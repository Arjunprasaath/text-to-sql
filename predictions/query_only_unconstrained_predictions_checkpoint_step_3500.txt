SELECT count(*) FROM clubs;	soccer_3
SELECT count(*) FROM clubs;	soccer_3
SELECT club_name FROM clubs ORDER BY club_name ASC;	soccer_3
SELECT club_name FROM clubs ORDER BY club_name ASC;	soccer_3
SELECT manager , captain FROM club ORDER BY manager , captain ASC;	soccer_3
SELECT manager , captain FROM club ORDER BY manager , captain ASC;	soccer_3
SELECT club_name FROM clubs WHERE manufacturer NOT = "Nike" ORDER BY club_name ASC;	soccer_3
SELECT club_name FROM clubs WHERE manufacturer NOT IN (SELECT manufacturer FROM clubs) ORDER BY club_name ASC;	soccer_3
SELECT name FROM player ORDER BY wins DESC;	soccer_3
SELECT player_name FROM player ORDER BY count(wins) ASC;	soccer_3
SELECT name FROM player ORDER BY earnings DESC LIMIT 1;	soccer_3
SELECT name FROM player ORDER BY money DESC LIMIT 1;	soccer_3
SELECT DISTINCT Country FROM Players WHERE Earnings > 1200000;	soccer_3
SELECT Country FROM Players WHERE Salary > 1200000;	soccer_3
SELECT T1.Country FROM player AS T1 JOIN player_win AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.WinCount > 2 GROUP BY T1.Country ORDER BY SUM(T2.Earnings) DESC LIMIT 1;	soccer_3
SELECT T1.Country FROM Player AS T1 JOIN Team AS T2 ON T1.TeamID = T2.TeamID WHERE T1.Wins > 2 GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1;	soccer_3
SELECT player_name , club_name FROM player JOIN club ON player.club_id = club.club_id;	soccer_3
SELECT player , club FROM player_club ORDER BY player ASC;	soccer_3
SELECT club_name FROM player JOIN club ON player.club_id = club.club_id WHERE win_count > 2;	soccer_3
SELECT club_name FROM player JOIN club ON player.club_id = club.club_id GROUP BY club_name HAVING count(*) > 2;	soccer_3
SELECT name FROM player WHERE manager = "Sam Allardyce" ;	soccer_3
SELECT name FROM player WHERE club = "Sam Allardyce" ORDER BY name ASC;	soccer_3
SELECT club_name FROM player JOIN club ON player.club_id = club.club_id GROUP BY club_name ORDER BY AVG(earnings) DESC;	soccer_3
SELECT club , avg(earnings) FROM players GROUP BY club ORDER BY avg(earnings) DESC;	soccer_3
SELECT manufacturer , count(*) FROM club GROUP BY manufacturer ;	soccer_3
SELECT manufacturer , count(*) FROM club GROUP BY manufacturer;	soccer_3
SELECT manufacturer FROM clubs GROUP BY manufacturer ORDER BY count(*) DESC LIMIT 1;	soccer_3
SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY count(*) DESC LIMIT 1;	soccer_3
SELECT manufacturer FROM club GROUP BY manufacturer HAVING count(*) > 1;	soccer_3
SELECT manufacturer FROM club GROUP BY manufacturer HAVING count(*) > 1;	soccer_3
SELECT country FROM player GROUP BY country HAVING count(*) > 1;	soccer_3
SELECT country FROM player GROUP BY country HAVING count(*) > 1;	soccer_3
SELECT club_name FROM clubs WHERE player_count = 0;	soccer_3
SELECT club_name FROM clubs WHERE player_count = 0;	soccer_3
SELECT Country FROM Players WHERE Earnings > 1400000 AND Earnings < 1100000;	soccer_3
SELECT T1.Country FROM Players AS T1 JOIN Players AS T2 ON T1.PlayerID = T2.PlayerID WHERE T1.Earnings > 1400000 AND T1.Earnings < 1100000 GROUP BY T1.Country HAVING COUNT(*) = 2;	soccer_3
SELECT count(DISTINCT player_country) FROM players;	soccer_3
SELECT count(DISTINCT country) FROM players;	soccer_3
SELECT Earnings FROM Players WHERE Country = "Australia" OR Country = "Zimbabwe" ;	soccer_3
SELECT Earnings FROM Players WHERE Country IN ('Australia', 'Zimbabwe') OR PlayerID IN (SELECT PlayerID FROM Players WHERE Country IN ('Australia', 'Zimbabwe')) ;	soccer_3
SELECT T1.customer_id , T1.first_name , T1.last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN items AS T4 ON T3.item_id = T4.item_id WHERE T2.order_count > 2 AND T4.item_count >= 3;	e_commerce
SELECT T1.customer_id , T1.first_name , T1.last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING count(*) > 2 AND count(*) >= 3;	e_commerce
SELECT order_id , status , count(*) FROM orders GROUP BY order_id ;	e_commerce
SELECT count(*) , order_status , order_id FROM orders GROUP BY order_status , order_id ;	e_commerce
SELECT order_date FROM orders ORDER BY order_date ASC LIMIT 1;	e_commerce
SELECT min(order_date) , max(order_date) FROM orders GROUP BY order_date HAVING count(*) > 1;	e_commerce
SELECT first_name , middle_initial , last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ORDER BY first_name ASC ;	e_commerce
SELECT first_name , last_name , middle_initial FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM orders ) ;	e_commerce
SELECT T1.id , T1.name , T1.price , T1.color FROM products AS T1 JOIN orders AS T2 ON T1.id = T2.product_id GROUP BY T1.id HAVING count(*) < 2;	e_commerce
SELECT id , name , price , color FROM products WHERE order_count < 2;	e_commerce
SELECT order_id , date FROM orders GROUP BY order_id HAVING count(*) >= 2;	e_commerce
SELECT order_id , date FROM orders GROUP BY order_id HAVING count(*) >= 2;	e_commerce
SELECT product_id, product_name, price FROM orders GROUP BY product_id ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT id , name , price FROM products ORDER BY count(*) DESC LIMIT 10;	e_commerce
SELECT order_id , SUM(order_price * product_price) FROM orders GROUP BY order_id ORDER BY SUM(order_price * product_price) LIMIT 1;	e_commerce
SELECT total_cost , ORDER BY total_cost ASC LIMIT 1;	e_commerce
SELECT payment_method FROM payments GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT Gender , COUNT(*) FROM Customers GROUP BY Gender ;	e_commerce
SELECT Gender , COUNT(*) FROM Products GROUP BY Gender ;	e_commerce
SELECT Gender , COUNT(*) FROM Orders GROUP BY Gender ;	e_commerce
SELECT Gender , COUNT(*) FROM Orders GROUP BY Gender ;	e_commerce
SELECT first_name , middle_initial , last_name , payment_method FROM customers;	e_commerce
SELECT first_name , middle_initial , last_name , payment_method FROM customers;	e_commerce
SELECT status , date , date_of_shipment FROM invoices;	e_commerce
SELECT status , date , shipment_date FROM invoices ORDER BY date ;	e_commerce
SELECT product_name , shipment_date FROM shipment ORDER BY shipment_date ASC LIMIT 10;	e_commerce
SELECT T1.ProductName , T1.ShippedOn FROM Products AS T1 JOIN Shipment AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductName , T1.ShippedOn ORDER BY T1.ShippedOn DESC LIMIT 10;	e_commerce
SELECT Status_Code , Shipment_Tracking_Number FROM Orders WHERE Status_Code = ( SELECT Status_Code FROM Orders WHERE Status_Code = ( SELECT Status_Code FROM Orders WHERE Status_Code = ( SELECT Status_Code FROM Orders WHERE Status_Code = Shipment_Tracking_Number ) ) ) ;	e_commerce
SELECT T1.status_code , T1.shipment_tracking_number FROM order_items AS T1 JOIN order AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_status = "Shipped" AND T1.order_status = "Ordered" ORDER BY T1.shipment_tracking_number ASC;	e_commerce
SELECT product_name , color FROM ordered_items ORDER BY order_date DESC LIMIT 10;	e_commerce
SELECT product_name , color FROM products ORDER BY product_name ASC;	e_commerce
SELECT DISTINCT product_name , price , description FROM orders WHERE gender = "Female" GROUP BY product_name ;	e_commerce
SELECT name , price , description FROM products WHERE gender = "Female" ;	e_commerce
SELECT Status FROM Invoices WHERE OrderID NOT IN (SELECT OrderID FROM Shipped) GROUP BY Status;	e_commerce
SELECT T1.Invoice_Status FROM invoices AS T1 JOIN order_items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T2.Shipped_Out_ID = NULL ORDER BY T1.Invoice_Status ASC;	e_commerce
SELECT order_id , date , total_cost FROM orders ;	e_commerce
SELECT order_id, order_date, total_amount_paid FROM orders;	e_commerce
SELECT count(*) FROM orders WHERE order_id IN (SELECT order_id FROM orders WHERE customer_id IN (SELECT customer_id FROM customers))	e_commerce
SELECT COUNT(DISTINCT CustomerID) FROM Orders;	e_commerce
SELECT count(*) FROM orders ORDER BY order_date DESC LIMIT 1;	e_commerce
SELECT count(DISTINCT item_status_code) FROM ordered_items;	e_commerce
SELECT count(DISTINCT payment_method) FROM payments;	e_commerce
SELECT count(DISTINCT payment_method) FROM customers;	e_commerce
SELECT T1.login_name , T1.password FROM customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.phone_number = '+12' ;	e_commerce
SELECT username , password FROM customers WHERE phone_number LIKE '+1%' ;	e_commerce
SELECT product_size FROM products WHERE name LIKE '%Dell%' ;	e_commerce
SELECT size FROM product WHERE name LIKE '%Dell%' ;	e_commerce
SELECT product_price , product_size FROM products WHERE product_price > ( SELECT AVG(product_price) FROM products ) ;	e_commerce
SELECT price , size , count(*) FROM products GROUP BY price , size ORDER BY count(*) DESC LIMIT 10;	e_commerce
SELECT COUNT(DISTINCT product_id) FROM sales ORDER BY product_id LIMIT 10;	e_commerce
SELECT count(*) FROM orders WHERE order_status = "Not Ordered" GROUP BY order_id;	e_commerce
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM payment_methods)	e_commerce
SELECT count(*) FROM customers WHERE payment_method_id IS NULL;	e_commerce
SELECT order_status , order_date FROM orders ORDER BY order_date ASC;	e_commerce
SELECT status_code, order_date FROM orders ORDER BY order_date ASC;	e_commerce
SELECT address , town , county FROM customers WHERE country = 'USA' ;	e_commerce
SELECT address , town , county FROM customers WHERE country = 'US' ;	e_commerce
SELECT first_name , product_name FROM buyers GROUP BY first_name , product_name;	e_commerce
SELECT first_name , product_name FROM buyers GROUP BY first_name ORDER BY first_name ASC;	e_commerce
SELECT COUNT(*) FROM order_items ORDER BY order_date DESC LIMIT 1;	e_commerce
SELECT COUNT(*) FROM orders ORDER BY order_date DESC LIMIT 1;	e_commerce
SELECT AVG(price) FROM products;	e_commerce
SELECT avg(cost) FROM products;	e_commerce
SELECT AVG(price) FROM orders ORDER BY order_date DESC LIMIT 1;	e_commerce
SELECT AVG(price) FROM orders ORDER BY order_date ASC LIMIT 1;	e_commerce
SELECT T1.email , T1.town , T1.county FROM customers AS T1 JOIN gender AS T2 ON T1.gender = T2.gender GROUP BY T1.email ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT email , city , county FROM customers WHERE gender = ( SELECT gender FROM customers GROUP BY gender ORDER BY count(*) DESC LIMIT 1 ) ;	e_commerce
SELECT order_date FROM orders WHERE customer_id IN (SELECT customer_id FROM payments GROUP BY customer_id HAVING count(*) >= 2) ORDER BY order_date ASC;	e_commerce
SELECT order_date FROM orders WHERE customer_id IN (SELECT customer_id FROM payments GROUP BY customer_id HAVING count(*) >= 2) ORDER BY order_date ASC;	e_commerce
SELECT order_status FROM orders GROUP BY order_status ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT order_status FROM orders GROUP BY order_status ORDER BY count(*) ASC LIMIT 1;	e_commerce
SELECT id , description FROM products WHERE sales > 3;	e_commerce
SELECT id , description FROM products WHERE sold > 3;	e_commerce
SELECT invoice_date , invoice_id FROM invoices GROUP BY invoice_date HAVING count(*) >= 2;	e_commerce
SELECT T1.InvoiceDate , T1.InvoiceID FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.InvoiceID = T2.InvoiceID GROUP BY T1.InvoiceDate , T1.InvoiceID HAVING count(*) >= 2;	e_commerce
SELECT shipment_tracking_number , shipment_date FROM shipment ORDER BY shipment_date ASC LIMIT 10;	e_commerce
SELECT tracking_number , date FROM shipments ORDER BY date DESC LIMIT 10;	e_commerce
SELECT color , description , size FROM products WHERE price < ( SELECT MAX(price) FROM products ) ;	e_commerce
SELECT color , description , size FROM product WHERE price < ( SELECT MAX(price) FROM product ) ;	e_commerce
SELECT name FROM director ORDER BY age DESC LIMIT 1;	bbc_channels
SELECT name FROM director ORDER BY age DESC LIMIT 1;	bbc_channels
SELECT COUNT(*) FROM channel WHERE channel.internet_link LIKE '%bbc%' ;	bbc_channels
SELECT COUNT(DISTINCT channel) FROM channels;	bbc_channels
SELECT title FROM program ORDER BY start_year DESC LIMIT 1;	bbc_channels
SELECT director FROM program GROUP BY director ORDER BY count(*) DESC LIMIT 1;	bbc_channels
SELECT name , age FROM director ORDER BY count(*) DESC LIMIT 1;	bbc_channels
SELECT title FROM programs ORDER BY start_date DESC LIMIT 1;	bbc_channels
SELECT channel_name , channel_website FROM channels WHERE channel_id IN ( SELECT channel_id FROM programs GROUP BY channel_id HAVING count(*) > 1 ) ;	bbc_channels
SELECT channel , count(*) FROM program GROUP BY channel ;	bbc_channels
SELECT COUNT(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)	bbc_channels
SELECT Name FROM Director WHERE Program = "Dracula" LIMIT 1;	bbc_channels
SELECT T1.channel_name , T2.director_name FROM channel AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id GROUP BY T1.channel_name ORDER BY count(*) DESC LIMIT 1;	bbc_channels
SELECT name FROM director WHERE age BETWEEN 30 AND 60;	bbc_channels
SELECT channel_name FROM channel WHERE director_yr < 40 INTERSECT SELECT channel_name FROM channel WHERE director_yr > 60;	bbc_channels
SELECT T1.channel_id , T1.channel_name FROM channel AS T1 JOIN director AS T2 ON T1.director_id = T2.director_id WHERE T2.director_name != "Hank Baskett" ORDER BY T1.channel_id ASC;	bbc_channels
SELECT count(*) FROM radios;	tv_shows
SELECT * FROM transmitters ORDER BY erp_kw ASC ;	tv_shows
SELECT show_name , original_air_date FROM tv_shows;	tv_shows
SELECT T1.station_name FROM channel AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T2.affiliation != "ABC" ORDER BY T1.station_name ASC;	tv_shows
SELECT T1.transmitter FROM transmitters AS T1 JOIN radios AS T2 ON T1.radios_id = T2.radios_id WHERE T2 ERP > 150 OR T2 ERP < 30 GROUP BY T1.transmitter;	tv_shows
SELECT T1.transmitter FROM Transmitter AS T1 JOIN Radio AS T2 ON T1.transmitter_id = T2.transmitter_id ORDER BY T2 ERP_kW DESC LIMIT 1;	tv_shows
SELECT AVG(erp) FROM radios GROUP BY radio_type;	tv_shows
SELECT affiliation , count(*) FROM city_channels GROUP BY affiliation ;	tv_shows
SELECT affiliation FROM city_channels GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1;	tv_shows
SELECT COUNT(*) FROM city_channel AS T1 JOIN city_channel_affiliation AS T2 ON T1.channel_id = T2.channel_id WHERE T2.channel_id > (SELECT channel_id FROM city_channel_affiliation GROUP BY channel_id HAVING count(*) > 3) ORDER BY T1.channel_id DESC LIMIT 10;	tv_shows
SELECT station_name FROM channel ORDER BY station_name ASC;	tv_shows
SELECT T1.city , T1.transmitter FROM transmitters AS T1 JOIN channels AS T2 ON T1.channel_id = T2.channel_id GROUP BY T1.city , T1.transmitter ORDER BY T1.city , T1.transmitter ;	tv_shows
SELECT T1.station_name , T1.transmitter FROM transmitters AS T1 JOIN radios AS T2 ON T1.radios_id = T2.radios_id GROUP BY T1.station_name ORDER BY T1 ERP DESC;	tv_shows
SELECT T1.transmitter , count(*) FROM transmitters AS T1 JOIN city_channels AS T2 ON T1.city_channel_id = T2.city_channel_id GROUP BY T1.transmitter ;	tv_shows
SELECT DISTINCT transmitter FROM radios WHERE city_channel IS NULL;	tv_shows
SELECT model FROM vehicle ORDER BY speed DESC LIMIT 1 WHERE power > 6000;	vehicle_driver
SELECT T1.model FROM vehicles AS T1 JOIN vehicles AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.power > 6000 ORDER BY T2.top_speed DESC LIMIT 1;	vehicle_driver
SELECT Name FROM Drivers WHERE Country = 'United States' ;	vehicle_driver
SELECT Name FROM Drivers WHERE Citizenship = "United States" ;	vehicle_driver
SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1; (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1) (SELECT count(*) , driver_id FROM	vehicle_driver
SELECT driver_id , count(*) FROM drivers GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1;	vehicle_driver
SELECT MAX(power) , AVG(power) FROM vehicles WHERE manufacturer = 'Zhuzhou' ;	vehicle_driver
SELECT MAX(power) , AVG(power) FROM vehicles WHERE brand = "Zhuzhou" ;	vehicle_driver
SELECT vehicle_id FROM vehicle_usage GROUP BY vehicle_id ORDER BY count(*) LIMIT 1;	vehicle_driver
SELECT vehicle_id FROM vehicles GROUP BY vehicle_id ORDER BY count(*) LIMIT 1;	vehicle_driver
SELECT TopSpeed , Power FROM Vehicles WHERE Year = 1996 ORDER BY TopSpeed DESC LIMIT 1;	vehicle_driver
SELECT top_speed , power FROM vehicles WHERE year = 1996;	vehicle_driver
SELECT build_year , model_name , builder FROM vehicles;	vehicle_driver
SELECT build_year , model , builder FROM vehicles;	vehicle_driver
SELECT COUNT(DISTINCT driver_id) FROM vehicles WHERE YEAR(creation_date) = 2012;	vehicle_driver
SELECT COUNT(DISTINCT driver_id) FROM vehicle WHERE year_of_driving = 2012 GROUP BY driver_id;	vehicle_driver
SELECT count(*) FROM drivers WHERE driverid IN (SELECT driverid FROM races WHERE raceclass = 'NASCAR')	vehicle_driver
SELECT COUNT(*) FROM drivers WHERE driver_id IN (SELECT driver_id FROM races WHERE race_type = 'NASCAR') ;	vehicle_driver
SELECT AVG(T1.Speed) FROM Vehicles AS T1 JOIN VehicleTypes AS T2 ON T1.VehicleTypeID = T2.VehicleTypeID GROUP BY T1.VehicleTypeID ORDER BY AVG(T1.Speed) DESC LIMIT 1;	vehicle_driver
SELECT avg(speed) FROM vehicles ORDER BY speed DESC LIMIT 1;	vehicle_driver
SELECT DISTINCT driver_name FROM drivers WHERE power > 5000;	vehicle_driver
SELECT driver_name FROM drivers WHERE vehicle_power > 5000;	vehicle_driver
SELECT model FROM cars WHERE total_production > 100 OR top_speed > 150;	vehicle_driver
SELECT model FROM cars WHERE total_production > 100 OR top_speed > 150;	vehicle_driver
SELECT Model_Name , Build_Year FROM Cars WHERE Model_Name LIKE '%DJ%' ;	vehicle_driver
SELECT Model, BuildYear FROM Cars WHERE Model LIKE '%DJ%' ;	vehicle_driver
SELECT T1.ModelName FROM Car AS T1 JOIN Driver AS T2 ON T1.DriverID = T2.DriverID GROUP BY T1.ModelName HAVING count(*) = 0;	vehicle_driver
SELECT vehicle_model FROM vehicles WHERE vehicle_id NOT IN (SELECT vehicle_id FROM vehicles_driven) GROUP BY vehicle_model;	vehicle_driver
SELECT T1.VehicleID , T1.Model FROM Vehicle AS T1 JOIN Driver AS T2 ON T1.DriverID = T2.DriverID JOIN Vehicle AS T3 ON T1.VehicleID = T3.VehicleID WHERE T2.DriverID = (SELECT DriverID FROM Driver WHERE DriverName = 'Ziyang') INTERSECT SELECT T1.VehicleID , T1.Model FROM Vehicle AS T1 JOIN Driver AS T2 ON T1.DriverID = T2.DriverID JOIN Vehicle AS T3 ON T1.VehicleID = T3.VehicleID WHERE T2.DriverID = (SELECT DriverID FROM Driver WHERE DriverName = 'Ziyang') EXCEPT SELECT T1.VehicleID , T1.Model FROM Vehicle AS T1 JOIN Driver AS T2 ON T1.DriverID = T2.DriverID JOIN Vehicle AS T3 ON T1	vehicle_driver
SELECT T1.vehicle_id , T1.vehicle_model FROM vehicle AS T1 JOIN driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.vehicle_id , T1.vehicle_model HAVING count(*) = 2 OR count(*) = 1 UNION SELECT T1.vehicle_id , T1.vehicle_model FROM vehicle AS T1 JOIN build AS T2 ON T1.build_id = T2.build_id GROUP BY T1.vehicle_id , T1.vehicle_model HAVING count(*) = 2 OR count(*) = 1 ;	vehicle_driver
SELECT vehicle_id, model FROM drivers GROUP BY vehicle_id HAVING count(*) > 2 INTERSECT SELECT vehicle_id, model FROM drivers WHERE driver_name = 'Jeff Gordon' GROUP BY vehicle_id HAVING count(*) > 2;	vehicle_driver
SELECT vehicle_id , vehicle_model FROM drivers GROUP BY vehicle_id HAVING count(*) > 2 INTERSECT SELECT vehicle_id , vehicle_model FROM drivers GROUP BY vehicle_id HAVING count(*) = 2;	vehicle_driver
SELECT count(*) FROM vehicles WHERE max_top_speed = ( SELECT max_top_speed FROM vehicles ) ;	vehicle_driver
SELECT count(*) FROM vehicles WHERE top_speed = ( SELECT max(top_speed) FROM vehicles ) ;	vehicle_driver
SELECT driver_name FROM drivers ORDER BY driver_name ASC;	vehicle_driver
SELECT driver_name FROM drivers ORDER BY driver_name ASC;	vehicle_driver
SELECT RacingSeries , COUNT(*) FROM Drivers GROUP BY RacingSeries ;	vehicle_driver
SELECT Series , COUNT(*) FROM Drivers GROUP BY Series ;	vehicle_driver
SELECT T1.Name , T1.Citizenship FROM Driver AS T1 JOIN Vehicle AS T2 ON T1.DriverID = T2.DriverID WHERE T2.Model = 'DJ1' ;	vehicle_driver
SELECT name , citizenship FROM driver WHERE model = 'DJ1' ;	vehicle_driver
SELECT COUNT(*) FROM Drivers WHERE DriverID NOT IN (SELECT DriverID FROM Cars)	vehicle_driver
SELECT count(*) FROM drivers WHERE driver_id NOT IN (SELECT driver_id FROM vehicles) ;	vehicle_driver
SELECT count(*) FROM exams;	online_exams
SELECT count(*) FROM exams;	online_exams
SELECT DISTINCT subject_code FROM exam ORDER BY subject_code ASC;	online_exams
SELECT DISTINCT subject_code FROM exam ORDER BY subject_code ASC;	online_exams
SELECT name , date FROM exam WHERE subject_code != "Database" ;	online_exams
SELECT EXAM_DATE , EXAM_NAME FROM EXAM WHERE SUBJECT_CODE NOT LIKE 'Database' ;	online_exams
SELECT date , subject_code FROM exam GROUP BY date , subject_code ORDER BY date DESC;	online_exams
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;	online_exams
SELECT question_type , count(*) FROM questions GROUP BY question_type;	online_exams
SELECT type_code , count(*) FROM questions GROUP BY type_code;	online_exams
SELECT DISTINCT T1.answer_text FROM comments AS T1 JOIN student_answers AS T2 ON T1.student_answer_id = T2.student_answer_id WHERE T2.comment_type = "Normal" GROUP BY T1.answer_text;	online_exams
SELECT DISTINCT T1.answer_text FROM comments AS T1 JOIN comments_answers AS T2 ON T1.comment_id = T2.comment_id WHERE T2.comment_type = "Normal" GROUP BY T1.answer_text ORDER BY count(*) DESC LIMIT 10;	online_exams
SELECT COUNT(DISTINCT T1.student_answer_id) FROM student_answers AS T1 JOIN comments AS T2 ON T1.student_answer_id = T2.student_answer_id GROUP BY T1.student_answer_id HAVING COUNT(T2.student_answer_id) > 1;	online_exams
SELECT COUNT(DISTINCT student_answer_id) FROM student_answers GROUP BY student_answer_id;	online_exams
SELECT * FROM student_answer_texts ORDER BY count DESC;	online_exams
SELECT student_answer_text , count(*) FROM student_answer GROUP BY student_answer_text ORDER BY count(*) DESC;	online_exams
SELECT first_name , answer_date FROM students ORDER BY answer_date ASC LIMIT 10;	online_exams
SELECT first_name , answer_date FROM student_answers GROUP BY first_name , answer_date;	online_exams
SELECT email , answer_date FROM student_answers GROUP BY email ORDER BY answer_date DESC;	online_exams
SELECT T1.email , T1.date FROM answer AS T1 JOIN student AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY T1.date DESC;	online_exams
SELECT Assessment FROM Students GROUP BY Assessment ORDER BY COUNT(*) DESC LIMIT 1;	online_exams
SELECT Assessment FROM Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1;	online_exams
SELECT first_name FROM students GROUP BY first_name HAVING count(*) >= 2;	online_exams
SELECT first_name FROM students GROUP BY first_name HAVING count(*) > 2;	online_exams
SELECT valid_answer FROM valid_answers GROUP BY valid_answer ORDER BY count(*) DESC LIMIT 1;	online_exams
SELECT question FROM questions ORDER BY count(*) DESC LIMIT 1;	online_exams
SELECT last_name FROM students WHERE gender != "M" ORDER BY last_name DESC;	online_exams
SELECT last_name FROM students WHERE gender != "M" ORDER BY last_name DESC LIMIT 1;	online_exams
SELECT Gender , COUNT(*) FROM Students GROUP BY Gender;	online_exams
SELECT Gender_Code , COUNT(*) FROM Students GROUP BY Gender_Code ;	online_exams
SELECT last_name FROM students WHERE gender = "F" UNION SELECT last_name FROM students WHERE gender = "M" ;	online_exams
SELECT LastName FROM Students WHERE Gender = "F" OR Gender = "M" ;	online_exams
SELECT first_name FROM students WHERE student_id NOT IN (SELECT student_id FROM answers) ORDER BY first_name ASC;	online_exams
SELECT first_name FROM students WHERE id NOT IN (SELECT student_id FROM answers) ORDER BY first_name ASC;	online_exams
SELECT answer_text FROM students_answers WHERE comment IN ('Normal', 'Absent') GROUP BY answer_text HAVING count(*) = 2;	online_exams
SELECT T1.Name FROM Student AS T1 JOIN Comment AS T2 ON T1.StudentID = T2.StudentID WHERE T2.Text = "Normal" INTERSECT SELECT T1.Name FROM Student AS T1 JOIN Comment AS T2 ON T1.StudentID = T2.StudentID WHERE T2.Text = "Absent" INTERSECT SELECT T1.Name FROM Student AS T1 JOIN Comment AS T2 ON T1.StudentID = T2.StudentID WHERE T2.Text = "Both"	online_exams
SELECT type FROM question GROUP BY type HAVING count(*) >= 3;	online_exams
SELECT question_type_code FROM questions GROUP BY question_type_code HAVING count(*) >= 3;	online_exams
SELECT * FROM Students;	online_exams
SELECT * FROM Students;	online_exams
SELECT count(*) FROM addresses;	customers_and_orders
SELECT COUNT(*) FROM addresses;	customers_and_orders
SELECT address_id , address_details FROM address_details;	customers_and_orders
SELECT address_id , address_details FROM address_details;	customers_and_orders
SELECT count(*) FROM Products;	customers_and_orders
SELECT count(*) FROM Products;	customers_and_orders
SELECT product_id , product_type_code , product_name FROM products;	customers_and_orders
SELECT product_id , product_type_code , product_name FROM products;	customers_and_orders
SELECT Price FROM Product WHERE Name = "Monitor" ;	customers_and_orders
SELECT Price FROM Monitor;	customers_and_orders
SELECT min(price), avg(price), max(price) FROM products;	customers_and_orders
SELECT min(price), avg(price), max(price) FROM products;	customers_and_orders
SELECT AVG(price) FROM products WHERE type = "Clothes" ;	customers_and_orders
SELECT AVG(price) FROM Clothes;	customers_and_orders
SELECT count(*) FROM hardware_type;	customers_and_orders
SELECT count(*) FROM products WHERE product_type = "Hardware" ;	customers_and_orders
SELECT product_name FROM products GROUP BY product_name HAVING AVG(price) > (SELECT AVG(price) FROM products) ;	customers_and_orders
SELECT product_name FROM products WHERE price > (SELECT avg(price) FROM products) ;	customers_and_orders
SELECT T1.product_name FROM hardware_product AS T1 JOIN hardware_product_type AS T2 ON T1.product_type_id = T2.product_type_id WHERE T1.price > (SELECT AVG(price) FROM hardware_product_type) ORDER BY T1.price ASC;	customers_and_orders
SELECT name FROM Hardware WHERE price > ( SELECT avg(price) FROM Hardware ) ;	customers_and_orders
SELECT Name FROM Products WHERE Type = "Clothes" ORDER BY Price DESC LIMIT 1;	customers_and_orders
SELECT name FROM Clothes ORDER BY price DESC LIMIT 1;	customers_and_orders
SELECT T1.product_id , T1.product_name FROM Hardware AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id ORDER BY T2.product_price ASC LIMIT 1;	customers_and_orders
SELECT id , name FROM Hardware ORDER BY price ASC LIMIT 1;	customers_and_orders
SELECT product_name FROM products ORDER BY price DESC LIMIT 10;	customers_and_orders
SELECT product_name FROM products ORDER BY price DESC;	customers_and_orders
SELECT * FROM HardwareType ORDER BY Price ASC;	customers_and_orders
SELECT name FROM hardware ORDER BY price ASC;	customers_and_orders
SELECT product_type_code , count(*) FROM products GROUP BY product_type_code ;	customers_and_orders
SELECT product_type , count(*) FROM products GROUP BY product_type ;	customers_and_orders
SELECT product_type_code, AVG(price) FROM products GROUP BY product_type_code;	customers_and_orders
SELECT product_type, AVG(price) FROM products GROUP BY product_type;	customers_and_orders
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2;	customers_and_orders
SELECT product_type_code FROM product_type GROUP BY product_type_code HAVING count(*) >= 2;	customers_and_orders
SELECT product_type_code , count(*) FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT product_type_code , count(*) FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT count(*) FROM customers;	customers_and_orders
SELECT count(*) FROM customers;	customers_and_orders
SELECT customer_id , customer_name FROM customers;	customers_and_orders
SELECT id , name FROM customers;	customers_and_orders
SELECT address , phone , email FROM customers WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT address , phone , email FROM customers WHERE name = "Jeromy" ;	customers_and_orders
SELECT payment_method_code , count(*) FROM payment_method GROUP BY payment_method_code ;	customers_and_orders
SELECT payment_method , count(*) FROM customers GROUP BY payment_method;	customers_and_orders
SELECT payment_method_code , COUNT(*) FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;	customers_and_orders
SELECT PaymentMethodCode FROM PaymentMethod GROUP BY PaymentMethodCode ORDER BY COUNT(*) DESC LIMIT 1;	customers_and_orders
SELECT customer_name FROM customers GROUP BY customer_name ORDER BY count(*) ASC LIMIT 1;	customers_and_orders
SELECT customer_name FROM customers GROUP BY customer_name ORDER BY count(*) DESC LIMIT 10;	customers_and_orders
SELECT payment_method , customer_number FROM customers WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT payment_method_code , customer_number FROM customers WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT DISTINCT payment_method FROM customers GROUP BY payment_method;	customers_and_orders
SELECT DISTINCT PaymentMethodCode FROM Customers;	customers_and_orders
SELECT product_id , product_type FROM products ORDER BY product_name;	customers_and_orders
SELECT product_id , product_type FROM products ORDER BY product_name ASC;	customers_and_orders
SELECT product_type FROM products GROUP BY product_type ORDER BY count(*) LIMIT 1;	customers_and_orders
SELECT product_type_code FROM product_type GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT COUNT(*) FROM Orders;	customers_and_orders
SELECT COUNT(*) FROM Orders;	customers_and_orders
SELECT order_id , order_date , order_status_code FROM orders WHERE customer_name = "Jeromy" ORDER BY order_status_code ;	customers_and_orders
SELECT order_id , date , status_code FROM orders WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT customer_name , customer_id , count(*) FROM orders GROUP BY customer_name ;	customers_and_orders
SELECT customer_name , customer_id , count(*) FROM orders GROUP BY customer_name , customer_id ;	customers_and_orders
SELECT customer_id , name , phone , email FROM customers ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT id , name , phone , email FROM customer ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT order_status , count(*) FROM orders GROUP BY order_status ;	customers_and_orders
SELECT status_code , count(*) FROM orders GROUP BY status_code ;	customers_and_orders
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT order_status_code , COUNT(*) FROM orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;	customers_and_orders
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT product_name FROM products WHERE order_id IS NULL;	customers_and_orders
SELECT product_name FROM orders WHERE order_id NOT IN (SELECT order_id FROM order_details) GROUP BY product_name ORDER BY product_name;	customers_and_orders
SELECT COUNT(*) FROM orders WHERE product_name = "Monitor" ;	customers_and_orders
SELECT count(*) FROM monitor ORDER BY order_date DESC LIMIT 1;	customers_and_orders
SELECT COUNT(*) FROM orders WHERE product_name = "Monitor" ;	customers_and_orders
SELECT COUNT(DISTINCT T1.CustomerID) FROM MonitorProduct AS T1 JOIN Customer AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID HAVING COUNT(T1.CustomerID) > 1;	customers_and_orders
SELECT count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customerid = T2.customerid;	customers_and_orders
SELECT COUNT(DISTINCT customer_id) FROM orders GROUP BY customer_id HAVING COUNT(*) > 1;	customers_and_orders
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT order_date , product_id FROM orders GROUP BY order_date HAVING SUM(quantity) > 6 OR COUNT(*) > 3;	customers_and_orders
SELECT order_id , order_date FROM orders WHERE quantity > 6 OR count(*) > 3;	customers_and_orders
SELECT count(*) FROM Buildings;	region_building
SELECT COUNT(*) FROM Buildings;	region_building
SELECT building_name FROM building ORDER BY number_of_stories ASC;	region_building
SELECT building_name , count(*) FROM building GROUP BY building_name ORDER BY count(*) ASC;	region_building
SELECT address FROM building ORDER BY completion_year DESC LIMIT 10;	region_building
SELECT building_address FROM buildings ORDER BY building_completion_year DESC LIMIT 10;	region_building
SELECT MAX(number_of_stories) FROM buildings WHERE year_completed < 1980;	region_building
SELECT MAX(stories) FROM Buildings WHERE YEAR(completed) < 1980;	region_building
SELECT AVG(population) FROM regions;	region_building
SELECT AVG(population) FROM region;	region_building
SELECT region_name FROM regions ORDER BY region_name ASC;	region_building
SELECT region_name FROM regions ORDER BY region_name ASC;	region_building
SELECT capital FROM regions WHERE area > 10000;	region_building
SELECT capital FROM regions WHERE area > 10000;	region_building
SELECT capital FROM region ORDER BY population DESC LIMIT 1;	region_building
SELECT T1.Region , T1.Capital FROM Region AS T1 JOIN Population AS T2 ON T1.RegionID = T2.RegionID ORDER BY T2.Population DESC LIMIT 1;	region_building
SELECT region_name FROM regions ORDER BY area DESC LIMIT 5;	region_building
SELECT region_name FROM regions ORDER BY area DESC LIMIT 5;	region_building
SELECT Building_Name , Region_Name FROM Buildings INNER JOIN Regions ON Buildings.Region_ID = Regions.Region_ID;	region_building
SELECT T1.Name , T2.Name FROM Building AS T1 JOIN Region AS T2 ON T1.RegionID = T2.RegionID;	region_building
SELECT region_name FROM building GROUP BY region_name HAVING count(*) > 1;	region_building
SELECT region FROM building GROUP BY region HAVING count(*) > 1;	region_building
SELECT Capital FROM Region GROUP BY Capital ORDER BY count(*) DESC LIMIT 1;	region_building
SELECT Region , COUNT(*) FROM Buildings GROUP BY Region ORDER BY COUNT(*) DESC LIMIT 1;	region_building
SELECT T1.address , T2.capital FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id;	region_building
SELECT T1.address , T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id;	region_building
SELECT COUNT(*) FROM building WHERE region = "Abruzzo" ;	region_building
SELECT region , count(*) FROM building WHERE region = "Abruzzo" GROUP BY region ;	region_building
SELECT CompletionYear , COUNT(*) FROM Buildings GROUP BY CompletionYear ;	region_building
SELECT Year , COUNT(*) FROM Buildings GROUP BY Year ;	region_building
SELECT Year FROM Building ORDER BY Year DESC LIMIT 1;	region_building
SELECT Year FROM Buildings ORDER BY Year DESC LIMIT 1;	region_building
SELECT region_name FROM regions WHERE region_id NOT IN (SELECT building_id FROM buildings) GROUP BY region_name;	region_building
SELECT RegionName FROM Buildings WHERE RegionName NOT IN (SELECT RegionName FROM Regions) ORDER BY RegionName ASC;	region_building
SELECT T1.Year FROM Building AS T1 JOIN Building AS T2 ON T1.BuildingID = T2.BuildingID WHERE T1.Stories > 20 AND T2.Stories < 15 GROUP BY T1.Year HAVING COUNT(*) >= 2;	region_building
SELECT YEAR FROM building ORDER BY YEAR DESC LIMIT 20, 15;	region_building
SELECT DISTINCT building_address FROM buildings;	region_building
SELECT DISTINCT building_address FROM buildings;	region_building
SELECT YEAR FROM BUILDING ORDER BY STORIES DESC LIMIT 10;	region_building
SELECT completion_year , COUNT(stories) FROM buildings GROUP BY completion_year ORDER BY COUNT(stories) DESC;	region_building
SELECT channel_name FROM channel ORDER BY channel_name ASC;	government_shift
SELECT * FROM channel ORDER BY channel_name ASC;	government_shift
SELECT count(*) FROM services;	government_shift
SELECT count(*) FROM services;	government_shift
SELECT ANALYTICAL_LAYER_TYPE_CODE , COUNT(*) FROM analytical_layer GROUP BY ANALYTICAL_LAYER_TYPE_CODE ORDER BY COUNT(*) DESC LIMIT 1;	government_shift
SELECT analytical_layer_type_code FROM analytical_layer_type GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT service_name FROM customer_services WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = "Hardy Kutch") GROUP BY service_name ORDER BY count(*) DESC LIMIT 10;	government_shift
SELECT service , count(*) FROM customers AS T1 JOIN customer_services AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_name = "Hardy Kutch" GROUP BY service ORDER BY count(*) DESC LIMIT 10;	government_shift
SELECT service_name , count(*) FROM services GROUP BY service_name HAVING count(*) > 3;	government_shift
SELECT service , count(*) FROM customers GROUP BY service HAVING count(*) > 3;	government_shift
SELECT customer_name , count(*) FROM customer_services GROUP BY customer_name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT customer_name , count(*) FROM services GROUP BY customer_name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT Customer_Name FROM Customers GROUP BY Customer_Name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT customer_name , count(*) FROM services GROUP BY customer_name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM services) ;	government_shift
SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM services) GROUP BY customer_name HAVING count(*) = 0;	government_shift
SELECT customer_id , customer_name , service , count(*) as use_count FROM customers GROUP BY customer_id , customer_name , service ORDER BY use_count DESC LIMIT 10;	government_shift
SELECT DISTINCT customer_name FROM service_usage GROUP BY customer_name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT COUNT(DISTINCT CustomerID) , COUNT(DISTINCT ServiceID) FROM Customers AS T1 JOIN Services AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY CustomerID , ServiceID ORDER BY CustomerID , ServiceID DESC LIMIT 10;	government_shift
SELECT count(*) , service_details FROM customer_services_details GROUP BY service_details;	government_shift
SELECT Name FROM Customers WHERE Name LIKE '%Kutch%' ;	government_shift
SELECT * FROM customers WHERE details LIKE '%Kutch%' OR details LIKE '%Kutch%' OR details LIKE '%Kutch%' OR details LIKE '%Kutch%' OR details LIKE '%Kutch%' OR details LIKE '%Kutch%';	government_shift
SELECT service_name FROM customer_interactions WHERE customer_name = "Hardy Kutch" OR rating = "good" GROUP BY service_name;	government_shift
SELECT T1.service FROM customer AS T1 JOIN customer_interaction AS T2 ON T1.customer_id = T2.customer_id JOIN service AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_name = "Hardy Kutch" OR T3.rating = "good" GROUP BY T1.customer_name ORDER BY count(*) DESC LIMIT 10;	government_shift
SELECT T1.service_name FROM customer AS T1 JOIN customer_interaction AS T2 ON T1.customer_id = T2.customer_id JOIN service AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_name = "Hardy Kutch" AND T2.rating = "bad" GROUP BY T1.service_name;	government_shift
SELECT T1.service FROM customer AS T1 JOIN customer_interaction AS T2 ON T1.customer_id = T2.customer_id JOIN service AS T3 ON T2.service_id = T3.service_id WHERE T1.customer_name = "Hardy Kutch" AND T3.rating = "bad" GROUP BY T1.service ORDER BY T1.service ASC;	government_shift
SELECT T1.service_name , T1.channel_name , T1.service_type , T1.service_status , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T1.service_type , T	government_shift
SELECT T1.service_name , T1.channel_id , T1.service_id , T2.service_name , T2.channel_id , T2.service_id , T3.service_name , T3.channel_id , T3.service_id , T4.service_name , T4.channel_id , T4.service_id , T5.service_name , T5.channel_id , T5.service_id , T6.service_name , T6.channel_id , T6.service_id , T7.service_name , T7.channel_id , T7.service_id , T8.service_name , T8.channel_id , T8.service_id , T9.service_name , T9.channel_id , T9.service_id , T10.service_name , T10.channel_id , T10.service_id , T11.service_name , T11.channel_id , T1	government_shift
SELECT T1.customer_id , T1.customer_name , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_website , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T	government_shift
SELECT T1.customer_id , T1.customer_name , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_website , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_mobile , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T	government_shift
SELECT count(*) FROM integration_platforms WHERE success = 1;	government_shift
SELECT COUNT(*) FROM integration_platform WHERE details LIKE '%Success%' ;	government_shift
SELECT T1.customer_id , T1.customer_name , T1.customer_email , T1.customer_phone , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T	government_shift
SELECT T1.customer_id , T1.customer_name , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_address , T	government_shift
SELECT service , count(*) FROM customers GROUP BY service HAVING count(*) = 0 ORDER BY service ;	government_shift
SELECT service_name FROM services WHERE customer_id IS NULL ORDER BY service_name ASC LIMIT 10;	government_shift
SELECT layer_type_code , count(*) FROM layer_usage GROUP BY layer_type_code ORDER BY count(*) DESC LIMIT 10;	government_shift
SELECT analytical_layer_type_code , count(*) FROM analytical_layer GROUP BY analytical_layer_type_code ;	government_shift
SELECT T1.service_name , T1.service_id , T1.service_type , T1.service_description , T1.service_price , T1.customer_id , T1.customer_name , T1.customer_address , T1.customer_city , T1.customer_state , T1.customer_zip , T1.customer_country , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T1.customer_email , T1.customer_phone , T	government_shift
SELECT service_details FROM services WHERE service_rating = "unsatisfied" GROUP BY service_details;	government_shift
SELECT count(*) FROM vehicles;	vehicle_rent
SELECT count(*) FROM vehicles;	vehicle_rent
SELECT name FROM vehicle ORDER BY model_year DESC;	vehicle_rent
SELECT model_year , vehicle_name FROM vehicles ORDER BY model_year DESC;	vehicle_rent
SELECT DISTINCT type_of_powertrain FROM vehicles;	vehicle_rent
SELECT DISTINCT POWERTRAIN_TYPE FROM POWERTRAINS;	vehicle_rent
SELECT name , type_of_powertrain , annual_fuel_cost FROM vehicles WHERE model_year = 2013 OR model_year = 2014;	vehicle_rent
SELECT T1.name , T1.type , T2.year , T3.fuel_cost FROM vehicle AS T1 JOIN powertrain AS T2 ON T1.model_year = T2.model_year JOIN fuel_cost AS T3 ON T1.vehicle_id = T3.vehicle_id WHERE T1.model_year BETWEEN 2013 AND 2014;	vehicle_rent
SELECT T1.Type FROM Vehicle AS T1 JOIN Powertrain AS T2 ON T1.VehicleID = T2.VehicleID WHERE T1.Year BETWEEN 2014 AND 2013;	vehicle_rent
SELECT DISTINCT Powertrain FROM Vehicles WHERE Year >= 2013 AND Year <= 2014 GROUP BY Powertrain;	vehicle_rent
SELECT type_of_powertrain , count(*) FROM powertrain GROUP BY type_of_powertrain ;	vehicle_rent
SELECT powertrain , count(*) FROM vehicles GROUP BY powertrain;	vehicle_rent
SELECT T1.Type FROM Vehicles AS T1 JOIN Powertrain AS T2 ON T1.VehicleID = T2.VehicleID GROUP BY T2.Type ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT type FROM powertrain GROUP BY type ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT min(fuel_cost) , max(fuel_cost) , avg(fuel_cost) FROM vehicles;	vehicle_rent
SELECT min(fuel_cost) , max(fuel_cost) , avg(fuel_cost) FROM vehicles;	vehicle_rent
SELECT name , model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;	vehicle_rent
SELECT T1.name , T1.model_year FROM vehicle AS T1 JOIN vehicle AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.city_fuel_economy_rate <= T1.highway_fuel_economy_rate ;	vehicle_rent
SELECT type_of_powertrain , AVG(fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*) >= 2;	vehicle_rent
SELECT type_of_powertrain , AVG(fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*) >= 2;	vehicle_rent
SELECT name , age , membership_credit FROM customers;	vehicle_rent
SELECT name , age , credit FROM customers;	vehicle_rent
SELECT name , age FROM customers ORDER BY membership_credit DESC LIMIT 1;	vehicle_rent
SELECT name , age FROM customers ORDER BY membership_credit DESC LIMIT 1;	vehicle_rent
SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(age) FROM customers) ;	vehicle_rent
SELECT AVG(age) FROM customers WHERE membership > (SELECT AVG(membership) FROM customers) ;	vehicle_rent
SELECT * FROM discounts;	vehicle_rent
SELECT * FROM discounts;	vehicle_rent
SELECT vehicle_name , SUM(hours_rented) FROM renting GROUP BY vehicle_name ;	vehicle_rent
SELECT vehicle_name , sum(rental_hours) FROM rentals GROUP BY vehicle_name ;	vehicle_rent
SELECT T1.vehicle_name FROM vehicle AS T1 JOIN renting AS T2 ON T1.vehicle_id = T2.vehicle_id WHERE T2.renting_status = "No" GROUP BY T1.vehicle_name;	vehicle_rent
SELECT vehicle_name FROM vehicles WHERE vehicle_id NOT IN (SELECT vehicle_id FROM rentals) ORDER BY vehicle_name ASC;	vehicle_rent
SELECT customer_name FROM renting_history GROUP BY customer_name HAVING count(*) >= 2;	vehicle_rent
SELECT Name FROM Customers GROUP BY Name HAVING COUNT(*) > 2;	vehicle_rent
SELECT name , year FROM renting_history GROUP BY name ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT model_year , name FROM vehicle_rental GROUP BY model_year ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT vehicle_name , sum(hours_rented) FROM renting GROUP BY vehicle_name ORDER BY sum(hours_rented) DESC LIMIT 1;	vehicle_rent
SELECT vehicle_name FROM renting ORDER BY total_hours DESC LIMIT 10;	vehicle_rent
SELECT discount_name , count(*) FROM renting_history GROUP BY discount_name ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT T1.DiscountName FROM Discount AS T1 JOIN RentalHistory AS T2 ON T1.DiscountID = T2.DiscountID GROUP BY T1.DiscountName ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT T1.name , T1.powertrain_type FROM rental AS T1 JOIN car AS T2 ON T1.car_id = T2.car_id WHERE T1.total_hours > 30;	vehicle_rent
SELECT name , powertrain_type FROM car WHERE total_rental_hours > 30;	vehicle_rent
SELECT city , highway , AVG(fuel_rate) FROM cars GROUP BY city , highway ;	vehicle_rent
SELECT AVG(T1.Fuel_Economy) , AVG(T2.Fuel_Economy) FROM Fuel_Economy AS T1 JOIN Powertrain AS T2 ON T1.Powertrain_ID = T2.Powertrain_ID GROUP BY T2.Powertrain_ID ORDER BY AVG(T1.Fuel_Economy) DESC LIMIT 10;	vehicle_rent
SELECT AVG(amount) FROM loans WHERE student_id IN (SELECT student_id FROM loans GROUP BY student_id HAVING count(*) > 1) ;	cre_Students_Information_Systems
SELECT AVG(amount_of_student_loans) FROM student_loans;	cre_Students_Information_Systems
SELECT biographical_data , student_id FROM students WHERE detentions < 2 INTERSECT SELECT biographical_data , student_id FROM students WHERE detentions > 2;	cre_Students_Information_Systems
SELECT biographical_data , student_id FROM students GROUP BY biographical_data , student_id HAVING count(*) >= 2 AND count(*) < 2;	cre_Students_Information_Systems
SELECT T1.TeacherID , T1.TeacherName , T2.ClassName FROM Teacher AS T1 JOIN Class AS T2 ON T1.TeacherID = T2.TeacherID WHERE T2.ClassName LIKE '%data%' OR T2.ClassName LIKE '%net%' AND T2.ClassName NOT LIKE '%net%' AND T2.ClassName NOT LIKE '%data%' GROUP BY T1.TeacherID ;	cre_Students_Information_Systems
SELECT T1.TeacherName FROM Teacher AS T1 JOIN Class AS T2 ON T1.TeacherID = T2.TeacherID WHERE T2.ClassDetail LIKE '%data%' AND T2.ClassDetail NOT LIKE '%net%' GROUP BY T1.TeacherName;	cre_Students_Information_Systems
SELECT Name , Detention , Loan FROM Students WHERE Detention IS NULL AND Loan IS NULL ;	cre_Students_Information_Systems
SELECT name , last_name , first_name FROM students WHERE student_id NOT IN ( SELECT student_id FROM detentions ) AND student_id NOT IN ( SELECT loan_id FROM loans ) ;	cre_Students_Information_Systems
SELECT LoanAmount , LoanDate FROM Students WHERE AchievementCount >= 2;	cre_Students_Information_Systems
SELECT amount , date FROM loans WHERE student_id IN (SELECT student_id FROM achievements GROUP BY student_id HAVING count(*) > 2) GROUP BY amount , date;	cre_Students_Information_Systems
SELECT T1.TeacherID , T1.TeacherName , COUNT(*) FROM Teacher AS T1 JOIN Course AS T2 ON T1.TeacherID = T2.TeacherID GROUP BY T1.TeacherID ORDER BY COUNT(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.TeacherID , T1.TeacherName , T1.CourseID , T1.CourseName , COUNT(*) FROM Teacher AS T1 JOIN Course AS T2 ON T1.CourseID = T2.CourseID GROUP BY T1.TeacherID ORDER BY COUNT(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT DISTINCT description FROM detentions;	cre_Students_Information_Systems
SELECT DISTINCT description FROM detentions;	cre_Students_Information_Systems
SELECT personal_details , address_type_description FROM students;	cre_Students_Information_Systems
SELECT * , address_type_desc FROM student_address_type;	cre_Students_Information_Systems
SELECT address_details , biographical_information FROM students;	cre_Students_Information_Systems
SELECT address_details, biographical_information FROM students;	cre_Students_Information_Systems
SELECT biographical_data , date_of_transcript FROM students ORDER BY date_of_transcript ASC;	cre_Students_Information_Systems
SELECT biographical_data , date_of_transcript_issuance FROM students;	cre_Students_Information_Systems
SELECT result , count(*) FROM behavioral_monitor_details GROUP BY result ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT result , count(*) FROM behavioral_monitoring_details GROUP BY result ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT biographical_data , details FROM students WHERE result = ( SELECT result FROM results GROUP BY result ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT biographical_data , details FROM students WHERE result = ( SELECT result FROM results GROUP BY result ORDER BY count(*) DESC LIMIT 3 ) ;	cre_Students_Information_Systems
SELECT T1.name , T2.result , T3.result , T4.result , T5.result , T6.result , T7.result , T8.result , T9.result , T10.result , T11.result , T12.result , T13.result , T14.result , T15.result , T16.result , T17.result , T18.result , T19.result , T20.result , T21.result , T22.result , T23.result , T24.result , T25.result , T26.result , T27.result , T28.result , T29.result , T30.result , T31.result , T32.result , T33.result , T34.result , T35.result	cre_Students_Information_Systems
SELECT * FROM students WHERE all_behaviour_details_result = ( SELECT max(all_behaviour_details_result) FROM students ) ;	cre_Students_Information_Systems
SELECT T1.biography FROM student AS T1 JOIN behaviour AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT biographical_data , event_date FROM events ORDER BY event_date ASC LIMIT 10;	cre_Students_Information_Systems
SELECT biographical_data , event_date FROM students WHERE student_id IN ( SELECT student_id FROM events ) ;	cre_Students_Information_Systems
SELECT count(*) , event_type , description FROM events GROUP BY event_type ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.event_type_code , count(*) , T1.event_type_description FROM events AS T1 JOIN students AS T2 ON T1.event_id = T2.event_id GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.achievement_detail , T1.achievement_type FROM achievements AS T1 JOIN achievement_types AS T2 ON T1.achievement_type_id = T2.achievement_type_id ORDER BY T1.achievement_detail ASC ;	cre_Students_Information_Systems
SELECT T1.achievement_detail , T1.type_description FROM achievements AS T1 JOIN achievement_types AS T2 ON T1.type_id = T2.type_id GROUP BY T1.achievement_detail , T1.type_description ;	cre_Students_Information_Systems
SELECT COUNT(T1.TeacherID) FROM Student AS T1 JOIN Achievement AS T2 ON T1.StudentID = T2.StudentID JOIN Teacher AS T3 ON T3.TeacherID = T1.TeacherID WHERE T2.AchievementID NOT IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID IN (SELECT AchievementID FROM Achievement WHERE AchievementID	cre_Students_Information_Systems
SELECT COUNT(T1.TeacherID) FROM Teacher AS T1 JOIN Student AS T2 ON T1.TeacherID = T2.TeacherID JOIN Achievement AS T3 ON T2.StudentID = T3.StudentID GROUP BY T1.TeacherID HAVING COUNT(T2.StudentID) = 0;	cre_Students_Information_Systems
SELECT date_of_transcript , transcript_details FROM transcripts ORDER BY date_of_transcript ASC;	cre_Students_Information_Systems
SELECT date , transcript FROM transcripts ORDER BY date ASC;	cre_Students_Information_Systems
SELECT achievement_type_code , achievement_details , date_of_achievement FROM achievements ORDER BY date_of_achievement ASC;	cre_Students_Information_Systems
SELECT T1.type_code , T1.details , T1.date_of_achievement FROM achievements AS T1 JOIN achievement_types AS T2 ON T1.type_code = T2.type_code;	cre_Students_Information_Systems
SELECT start_time , end_time FROM detentions;	cre_Students_Information_Systems
SELECT start_time , end_time FROM DetentionRecord;	cre_Students_Information_Systems
SELECT name , last_name , first_name FROM students WHERE last_name LIKE '%Suite%' OR first_name LIKE '%Suite%' ;	cre_Students_Information_Systems
SELECT biographical_information FROM students WHERE Suite LIKE '%Suite%' ;	cre_Students_Information_Systems
SELECT T1.TeacherID , T1.TeacherName , T2.StudentID , T2.StudentName FROM Teacher AS T1 JOIN Student AS T2 ON T1.TeacherID = T2.TeacherID GROUP BY T1.TeacherID , T1.TeacherName , T2.StudentID , T2.StudentName HAVING COUNT(*) = 1;	cre_Students_Information_Systems
SELECT T1.teacher , T1.student , T2.teacher , T2.student FROM teacher AS T1 JOIN class AS T2 ON T1.class_id = T2.class_id INTERSECT SELECT T1.teacher , T1.student , T2.teacher , T2.student FROM teacher AS T1 JOIN class AS T2 ON T1.class_id = T2.class_id WHERE T1.teacher = T2.teacher AND T1.student = T2.student;	cre_Students_Information_Systems
SELECT count(*) , teacher_id FROM teacher GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.TeacherID , COUNT(*) FROM Teacher AS T1 JOIN Course AS T2 ON T1.TeacherID = T2.TeacherID GROUP BY T1.TeacherID ORDER BY COUNT(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT count(*) , student_id FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1; SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count	cre_Students_Information_Systems
SELECT student_id , count(*) FROM students GROUP BY student_id ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT student_id , count(*) FROM courses GROUP BY student_id HAVING count(*) = 2;	cre_Students_Information_Systems
SELECT student_id , course_id FROM students GROUP BY student_id HAVING count(*) = 2;	cre_Students_Information_Systems
SELECT T1.Detention_Type_Code , T1.Detention_Type_Description FROM Detention_Type AS T1 JOIN Detention_Type_Description AS T2 ON T1.Detention_Type_ID = T2.Detention_Type_ID ORDER BY COUNT(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.type_code , T1.description FROM detention_type AS T1 JOIN detention_type_description AS T2 ON T1.type_code = T2.type_code ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT biographical_data, details FROM students WHERE student_loan > (SELECT AVG(student_loan) FROM students) ORDER BY student_loan DESC LIMIT 10;	cre_Students_Information_Systems
SELECT * FROM student_loan WHERE student_loan > (SELECT AVG(student_loan) FROM student_loan) LIMIT 10;	cre_Students_Information_Systems
SELECT MIN(date_of_loan) FROM loans;	cre_Students_Information_Systems
SELECT min(date_of_loan) FROM loans;	cre_Students_Information_Systems
SELECT biographical_information FROM loans ORDER BY loan_value LIMIT 1;	cre_Students_Information_Systems
SELECT * FROM student_loan WHERE student_loan.student_loan_id = ( SELECT min(student_loan.student_loan_id) FROM student_loan ) ;	cre_Students_Information_Systems
SELECT TranscriptIssued FROM Loans WHERE LoanMaxValue = (SELECT LoanMaxValue FROM Loans ORDER BY LoanMaxValue DESC LIMIT 1) LIMIT 1;	cre_Students_Information_Systems
SELECT T1.transcript_issuance_date FROM student AS T1 JOIN loan AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.TeacherName FROM Teacher AS T1 JOIN Student AS T2 ON T1.TeacherID = T2.TeacherID WHERE T2.TranscriptIssuanceDate = (SELECT MIN(TranscriptIssuanceDate) FROM Student) ORDER BY T1.TeacherName LIMIT 1;	cre_Students_Information_Systems
SELECT T1.TeacherID , T1.TeacherName , T2.TeacherID , T2.TeacherName , T3.TeacherID , T3.TeacherName , T4.TeacherID , T4.TeacherName , T5.TeacherID , T5.TeacherName , T6.TeacherID , T6.TeacherName , T7.TeacherID , T7.TeacherName , T8.TeacherID , T8.TeacherName , T9.TeacherID , T9.TeacherName , T10.TeacherID , T10.TeacherName , T11.TeacherID , T11.TeacherName , T12.TeacherID , T12.TeacherName , T13.TeacherID , T13.TeacherName , T14.TeacherID , T	cre_Students_Information_Systems
SELECT student_id , sum(amount) FROM loans GROUP BY student_id ;	cre_Students_Information_Systems
SELECT student_id , sum(amount) FROM loans GROUP BY student_id ;	cre_Students_Information_Systems
SELECT T1.student_id , T1.biographical_data , T1.course_count FROM student AS T1 JOIN course AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY T1.student_id ;	cre_Students_Information_Systems
SELECT student_id , biographical_data , count(*) FROM students GROUP BY student_id ;	cre_Students_Information_Systems
SELECT COUNT(*) FROM Detention WHERE DetentionType = 'Detention' GROUP BY DetentionType;	cre_Students_Information_Systems
SELECT COUNT(*) FROM Students WHERE DetentionRecord IS NOT NULL;	cre_Students_Information_Systems
SELECT code , description FROM address_type ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT address_type_code , address_type_description FROM address_type ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT name , address , city , state , zip , phone , email , date_of_birth , gender , race , ethnicity , religion , nationality , country , province , province_state , province_city , province_zip , province_phone , province_email , province_date_of_birth , province_gender , province_race , province_ethnicity , province_religion , province_nationality , province_country , province_province , province_province_state , province_province_city , province_province_zip , province_province_phone , province_province_email , province_province_date_of_birth , province_province_gender , province_province_race , province_province_ethnicity , province_province_religion , province_province_nationality , province_province_country , province_province_province , province_province_province_state , province_province_province_city , province_province_province_zip , province	cre_Students_Information_Systems
SELECT * FROM students WHERE student_id NOT IN (SELECT student_id FROM loans) LIMIT 1000;	cre_Students_Information_Systems
SELECT start_time , end_time FROM address WHERE student_id IN ( SELECT student_id FROM transcript GROUP BY student_id HAVING count(*) = 2 ) ;	cre_Students_Information_Systems
SELECT T1.StartTime , T1.EndTime FROM Student AS T1 JOIN Transcript AS T2 ON T1.StudentID = T2.StudentID WHERE T2.TranscriptID = 2 GROUP BY T1.StartTime , T1.EndTime ;	cre_Students_Information_Systems
SELECT date FROM detentions ORDER BY date ASC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.DetentionStartDate FROM Detention AS T1 JOIN Detention AS T2 ON T1.DetentionID = T2.DetentionID GROUP BY T1.DetentionStartDate ORDER BY T1.DetentionStartDate DESC LIMIT 10;	cre_Students_Information_Systems
SELECT author_name FROM authors;	book_1
SELECT author_name FROM authors;	book_1
SELECT Client_Name , Address FROM Clients;	book_1
SELECT name , address FROM clients;	book_1
SELECT title , isbn , sale_price FROM book;	book_1
SELECT title , isbn , sale_price FROM book;	book_1
SELECT count(*) FROM books;	book_1
SELECT COUNT(*) FROM Books;	book_1
SELECT count(*) FROM authors;	book_1
SELECT count(*) FROM authors;	book_1
SELECT count(*) FROM clients;	book_1
SELECT count(*) FROM clients;	book_1
SELECT name , address FROM clients ORDER BY name ASC;	book_1
SELECT name , address FROM clients ORDER BY name ASC;	book_1
SELECT title , author FROM book ORDER BY title ASC;	book_1
SELECT book_name , author_name FROM books ORDER BY book_name ASC;	book_1
SELECT order_id , client_name FROM orders;	book_1
SELECT order_id , client_name FROM orders;	book_1
SELECT author_name , count(*) FROM books GROUP BY author_name ;	book_1
SELECT author_name , count(*) FROM books GROUP BY author_name ;	book_1
SELECT isbn , count(*) FROM orders GROUP BY isbn ;	book_1
SELECT isbn , count(*) FROM orders GROUP BY isbn ;	book_1
SELECT isbn , SUM(order_amount) FROM orders GROUP BY isbn ;	book_1
SELECT isbn , SUM(quantity) FROM orders GROUP BY isbn ;	book_1
SELECT book_title FROM orders GROUP BY book_title ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT title FROM orders GROUP BY title ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT book_title , order_price FROM books ORDER BY order_price DESC LIMIT 1;	book_1
SELECT title , purchase_price FROM book ORDER BY total_order_amount DESC LIMIT 1;	book_1
SELECT book_title FROM orders ORDER BY order_date DESC LIMIT 10;	book_1
SELECT DISTINCT title FROM orders ORDER BY title LIMIT 10;	book_1
SELECT client_name FROM clients WHERE client_id IN (SELECT client_id FROM orders) GROUP BY client_name HAVING count(*) >= 1;	book_1
SELECT DISTINCT client_name FROM orders ORDER BY client_name;	book_1
SELECT client_name , count(*) FROM orders GROUP BY client_name ;	book_1
SELECT client_name , count(*) FROM orders GROUP BY client_name;	book_1
SELECT client_name FROM clients ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT client_name FROM orders GROUP BY client_name ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT client_name , SUM(order_amount) FROM orders GROUP BY client_name;	book_1
SELECT client_name , sum(order_amount) FROM orders GROUP BY client_name;	book_1
SELECT client_name , SUM(order_amount) FROM orders GROUP BY client_name ORDER BY SUM(order_amount) DESC LIMIT 1;	book_1
SELECT T1.ClientName FROM Orders AS T1 JOIN OrdersBooks AS T2 ON T1.OrderID = T2.OrderID JOIN Books AS T3 ON T2.BookID = T3.BookID GROUP BY T1.ClientName ORDER BY SUM(T2.Quantity) DESC LIMIT 1;	book_1
SELECT title FROM book ORDER BY id DESC LIMIT 10;	book_1
SELECT book_title FROM orders WHERE order_date NOT IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT book_id FROM orders WHERE order_date IN (SELECT order_date FROM orders WHERE book_id IN (SELECT	book_1
SELECT client_name FROM clients WHERE client_id NOT IN (SELECT client_id FROM orders) ;	book_1
SELECT Name FROM Clients WHERE ClientID NOT IN (SELECT ClientID FROM Orders) ;	book_1
SELECT MAX(sale_price) , MIN(sale_price) FROM sales ;	book_1
SELECT MAX(sale_price) , MIN(sale_price) FROM books;	book_1
SELECT AVG(Purchase_Price), AVG(Sale_Price) FROM Orders;	book_1
SELECT AVG(Purchase_Price), AVG(Sale_Price) FROM Books;	book_1
SELECT MAX(T1.Sale_Price - T1.Purchase_Price) FROM Products AS T1 JOIN Sales AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_ID ORDER BY MAX(T1.Sale_Price - T1.Purchase_Price) LIMIT 1;	book_1
SELECT MAX(T1.sale_price) - MIN(T1.purchase_price) FROM products AS T1 JOIN sale AS T2 ON T1.product_id = T2.product_id ORDER BY T2.sale_price DESC LIMIT 1;	book_1
SELECT title FROM book ORDER BY sale_price DESC LIMIT 1;	book_1
SELECT title FROM books WHERE sale_price > (SELECT avg(sale_price) FROM books) ;	book_1
SELECT title FROM book ORDER BY sale_price ASC LIMIT 1;	book_1
SELECT title FROM book ORDER BY sale_price ASC LIMIT 1;	book_1
SELECT title FROM book ORDER BY purchase_price DESC LIMIT 1;	book_1
SELECT title FROM book ORDER BY purchase_price DESC LIMIT 1;	book_1
SELECT avg(sale_price) FROM books WHERE author = "George Orwell" ;	book_1
SELECT AVG(price) FROM books WHERE author = "George Orwell" ;	book_1
SELECT price FROM books WHERE author = "Plato" ;	book_1
SELECT price FROM books WHERE author = "Plato" ;	book_1
SELECT title FROM book ORDER BY sale_price ASC LIMIT 1;	book_1
SELECT title FROM book ORDER BY saleprice ASC LIMIT 1;	book_1
SELECT title FROM book WHERE price < (SELECT avg(price) FROM book) LIMIT 1;	book_1
SELECT title FROM book WHERE author = "Plato" AND sale_price < ( SELECT AVG(sale_price) FROM book ) ;	book_1
SELECT author FROM books WHERE title = "Pride and Prejudice" LIMIT 1;	book_1
SELECT author FROM books WHERE title = "Pride and Prejudice" LIMIT 1;	book_1
SELECT title FROM book WHERE author = 'Plato' ORDER BY title ASC;	book_1
SELECT title FROM book WHERE author = "Plato" ORDER BY title ASC;	book_1
SELECT count(*) FROM orders WHERE title = "Pride and Prejudice" ;	book_1
SELECT COUNT(*) FROM Orders WHERE OrderType = 'Pride and Prejudice' ;	book_1
SELECT order_id FROM orders WHERE title IN ('Pride and Prejudice', 'The Little Prince') ;	book_1
SELECT order_id FROM orders WHERE order_date BETWEEN '2001-01-01' AND '2001-12-31' INTERSECT SELECT order_id FROM orders WHERE title LIKE '%Pride%' INTERSECT SELECT order_id FROM orders WHERE title LIKE '%The Little Prince%' ;	book_1
SELECT b.ISBN FROM Book AS b JOIN Order AS o ON b.ISBN = o.ISBN JOIN Client AS c ON o.CLIENT_ID = c.CLIENT_ID WHERE c.CLIENT_NAME = "Peter Doe" INTERSECT SELECT b.ISBN FROM Book AS b JOIN Order AS o ON b.ISBN = o.ISBN JOIN Client AS c ON o.CLIENT_ID = c.CLIENT_ID WHERE c.CLIENT_NAME = "James Smith"	book_1
SELECT DISTINCT isbn FROM orders WHERE client_name = "Peter Doe" INTERSECT SELECT DISTINCT isbn FROM orders WHERE client_name = "James Smith"	book_1
SELECT T1.title FROM book AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T2.client_name = "Peter Doe" INTERSECT SELECT T1.title FROM book AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T2.client_name = "James Smith" ;	book_1
SELECT Title FROM Books WHERE ClientID IN (SELECT ClientID FROM Orders WHERE ClientName = "Peter Doe") EXCEPT SELECT Title FROM Books WHERE ClientID IN (SELECT ClientID FROM Orders WHERE ClientName = "James Smith")	book_1
SELECT client_name FROM clients WHERE client_id IN (SELECT client_id FROM orders WHERE order_type = "Pride and Prejudice")	book_1
SELECT T1.ClientName FROM Orders AS T1 JOIN Clients AS T2 ON T1.ClientID = T2.ClientID JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T3.ProductName = "Pride and Prejudice" GROUP BY T1.ClientID;	book_1
SELECT count(*) FROM books;	book_review
SELECT title FROM books ORDER BY title ASC;	book_review
SELECT title FROM book ORDER BY pages DESC;	book_review
SELECT type , release_date FROM book_types ORDER BY release_date ASC;	book_review
SELECT book_id , max(chapters) , min(chapters) FROM book GROUP BY book_id ;	book_review
SELECT title FROM books WHERE title NOT LIKE "Poet%" GROUP BY title;	book_review
SELECT AVG(rating) FROM reviews;	book_review
SELECT title , rating FROM books;	book_review
SELECT rating , COUNT(*) FROM books GROUP BY rating ORDER BY COUNT(*) DESC LIMIT 1;	book_review
SELECT rank , count(*) FROM book ORDER BY count(*) LIMIT 1;	book_review
SELECT title FROM book ORDER BY rank DESC LIMIT 1;	book_review
SELECT avg(num_of_readers) FROM books WHERE type = "Novel" ;	book_review
SELECT type , count(*) FROM book GROUP BY type ;	book_review
SELECT type FROM book GROUP BY type ORDER BY count(*) DESC LIMIT 1;	book_review
SELECT type FROM book GROUP BY type HAVING count(*) >= 3;	book_review
SELECT title FROM book ORDER BY rating DESC;	book_review
SELECT title , audio_length FROM book ORDER BY num_readers DESC;	book_review
SELECT COUNT(*) FROM books WHERE review_id IS NULL;	book_review
SELECT type FROM book WHERE chapters > 75 INTERSECT SELECT type FROM book WHERE chapters < 50;	book_review
SELECT COUNT(DISTINCT Type) FROM Books;	book_review
SELECT T1.Type , T1.Title FROM Book AS T1 JOIN BookRating AS T2 ON T1.BookID = T2.BookID GROUP BY T1.Type , T1.Title HAVING COUNT(*) = 1;	book_review
SELECT count(*) FROM customers;	restaurant_bills
SELECT count(*) FROM customers;	restaurant_bills
SELECT name FROM customers ORDER BY level_of_membership ASC;	restaurant_bills
SELECT customer_name FROM customers ORDER BY membership_level ASC LIMIT 10;	restaurant_bills
SELECT Nationality , Card_Credits FROM Customers;	restaurant_bills
SELECT T1.nationality , T1.card_credit FROM customer AS T1 JOIN card AS T2 ON T1.customer_id = T2.customer_id;	restaurant_bills
SELECT Name FROM Customers WHERE Nationality = "England" OR Nationality = "Australia" ;	restaurant_bills
SELECT Name FROM Customers WHERE Nationality IN ('England', 'Australia') ;	restaurant_bills
SELECT avg(card_credit) FROM customers WHERE membership_level > 1;	restaurant_bills
SELECT AVG(Credit) FROM Customers WHERE Membership_Level > 1 GROUP BY Credit;	restaurant_bills
SELECT card_credit FROM customers ORDER BY membership_level DESC LIMIT 1;	restaurant_bills
SELECT customer_id , membership_level , card_credit FROM customers ORDER BY card_credit DESC LIMIT 1;	restaurant_bills
SELECT Nationality , COUNT(*) FROM Customers GROUP BY Nationality;	restaurant_bills
SELECT nationality , count(*) FROM customers GROUP BY nationality;	restaurant_bills
SELECT nationality , COUNT(*) FROM customers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;	restaurant_bills
SELECT nationality FROM customers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;	restaurant_bills
SELECT T1.nation FROM nation AS T1 JOIN customer AS T2 ON T1.nation_id = T2.nation_id WHERE T2.card_credit < 50 AND T2.card_credit > 75 GROUP BY T1.nation ORDER BY count(*) DESC LIMIT 10;	restaurant_bills
SELECT T1.nation FROM nation AS T1 JOIN customer AS T2 ON T1.nation_id = T2.nation_id WHERE T2.card_credit > 50 AND T2.card_credit < 75 GROUP BY T1.nation ORDER BY count(*) DESC LIMIT 10;	restaurant_bills
SELECT T1.customer_name , T2.dish_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id;	restaurant_bills
SELECT T1.customer_name , T2.dish_name FROM orders AS T1 JOIN order_details AS T2 ON T1.order_id = T2.order_id;	restaurant_bills
SELECT customer_name , dish_name , count(*) FROM orders GROUP BY customer_name ORDER BY count(*) DESC;	restaurant_bills
SELECT customer_name , dish_name , count(*) FROM orders GROUP BY customer_name , dish_name ORDER BY count(*) DESC;	restaurant_bills
SELECT customer_name , SUM(quantity) FROM orders GROUP BY customer_name;	restaurant_bills
SELECT customer_name , SUM(quantity) FROM orders GROUP BY customer_name ;	restaurant_bills
SELECT customer_name , SUM(quantity) FROM orders GROUP BY customer_name HAVING SUM(quantity) > 1;	restaurant_bills
SELECT customer_name FROM customers WHERE total_order_quantity > 1;	restaurant_bills
SELECT DISTINCT manager FROM branch ORDER BY manager ASC;	restaurant_bills
SELECT DISTINCT T1.ManagerName FROM Branch AS T1 JOIN Manager AS T2 ON T1.ManagerID = T2.ManagerID GROUP BY T1.ManagerName ORDER BY COUNT(*) DESC LIMIT 10;	restaurant_bills
SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	restaurant_bills
SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	restaurant_bills
SELECT count(*) FROM members;	club_leader
SELECT name FROM members ORDER BY age ASC;	club_leader
SELECT name , nationality FROM members;	club_leader
SELECT Name FROM Members WHERE Nationality NOT LIKE 'England' ;	club_leader
SELECT name FROM members WHERE age IN (19, 20) ;	club_leader
SELECT name FROM members ORDER BY age DESC LIMIT 1;	club_leader
SELECT nationality , count(*) FROM nationality GROUP BY nationality ;	club_leader
SELECT nationality FROM members GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;	club_leader
SELECT nation FROM nation GROUP BY nation HAVING count(*) >= 2;	club_leader
SELECT ClubLeaderName , ClubName FROM Leader JOIN Club ON Leader.ClubID = Club.ClubID GROUP BY ClubLeaderName ORDER BY ClubLeaderName ASC;	club_leader
SELECT club_leader FROM club ORDER BY overall_ranking DESC LIMIT 10;	club_leader
SELECT club_leader_name FROM club_leaders WHERE join_date < "2018-01-01" ORDER BY club_leader_name ASC;	club_leader
SELECT name FROM club WHERE club_name = "Houston" ORDER BY rank LIMIT 1;	club_leader
SELECT name FROM members WHERE club_leader IS NULL;	club_leader
SELECT T1.nation FROM nation AS T1 JOIN member AS T2 ON T1.nation_id = T2.nation_id WHERE T2.age > 22 AND T2.age < 19;	club_leader
SELECT AVG(age) FROM club_leader GROUP BY club_leader;	club_leader
SELECT club_name FROM clubs WHERE club_name LIKE '%state%' ;	club_leader
SELECT T1.name FROM collections AS T1 JOIN subsets AS T2 ON T1.id = T2.collection_id ORDER BY T2.name ASC;	cre_Doc_and_collections
SELECT DISTINCT collection_subsets.name FROM collections INNER JOIN collection_subsets ON collections.collection_id = collection_subsets.collection_id;	cre_Doc_and_collections
SELECT * FROM collections WHERE name = 'Top collection' ;	cre_Doc_and_collections
SELECT * FROM collections WHERE collection_name = 'Top collection' LIMIT 1;	cre_Doc_and_collections
SELECT document_name FROM documents ORDER BY document_name LIMIT 10;	cre_Doc_and_collections
SELECT DISTINCT document_subsets.name FROM document_subsets;	cre_Doc_and_collections
SELECT * FROM documents WHERE name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT * FROM document_subsets WHERE subset_name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT document_id FROM documents;	cre_Doc_and_collections
SELECT object_id FROM document_objects;	cre_Doc_and_collections
SELECT document_id FROM document WHERE document_type = 'Marlin' GROUP BY document_id ORDER BY document_id LIMIT 1;	cre_Doc_and_collections
SELECT document_object_id FROM objects WHERE owner = "Marlin" GROUP BY document_object_id;	cre_Doc_and_collections
SELECT Owner FROM Documents WHERE Description = 'Braeden Collection' LIMIT 1;	cre_Doc_and_collections
SELECT T1.Owner FROM DocumentObjects AS T1 JOIN DocumentObjects AS T2 ON T1.ObjectID = T2.ObjectID WHERE T2.Name = 'Braeden Collection' GROUP BY T1.Owner;	cre_Doc_and_collections
SELECT T1.Owner FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.ParentDocumentID WHERE T2.Owner = 'Marlin' GROUP BY T1.Owner ORDER BY COUNT(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT T1.Owner FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.ParentDocumentID WHERE T2.Owner = "Marlin" GROUP BY T1.Owner ORDER BY count(*) DESC LIMIT 10;	cre_Doc_and_collections
SELECT DISTINCT T1.Description FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.ParentDocumentID ORDER BY T1.Description ASC;	cre_Doc_and_collections
SELECT T1.Description FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.ParentDocumentID GROUP BY T1.Description HAVING COUNT(*) = 1;	cre_Doc_and_collections
SELECT count(*) FROM documents WHERE owner = "Marlin" ;	cre_Doc_and_collections
SELECT count(*) FROM documents WHERE owner = "Marlin" ;	cre_Doc_and_collections
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) > 1;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE parent_document_id IS NULL;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id ;	cre_Doc_and_collections
SELECT T1.ParentID , count(*) FROM Documents AS T1 JOIN Documents AS T2 ON T1.ParentID = T2.ParentID GROUP BY T1.ParentID ;	cre_Doc_and_collections
SELECT collection_name FROM collections;	cre_Doc_and_collections
SELECT collection_name FROM collections;	cre_Doc_and_collections
SELECT description FROM collections WHERE name = "Best" ;	cre_Doc_and_collections
SELECT Collection_Description FROM Collection WHERE Collection_Description = 'Best' ;	cre_Doc_and_collections
SELECT T1.Name FROM Collection AS T1 JOIN CollectionCollection AS T2 ON T1.CollectionID = T2.CollectionID WHERE T2.Name = "Nice" LIMIT 1;	cre_Doc_and_collections
SELECT T1.Name FROM Collection AS T1 JOIN ParentCollection AS T2 ON T1.CollectionID = T2.CollectionID JOIN Collection AS T3 ON T2.CollectionID = T3.CollectionID WHERE T3.Name = "Nice" ORDER BY T1.Name ASC;	cre_Doc_and_collections
SELECT collection_name FROM collections GROUP BY collection_name HAVING count(*) > 1 ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT collection_name FROM collections GROUP BY collection_name HAVING count(*) > 1;	cre_Doc_and_collections
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) > 1;	cre_Doc_and_collections
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) > 1;	cre_Doc_and_collections
SELECT count(*) FROM collections AS T1 JOIN child_collections AS T2 ON T1.collection_id = T2.collection_id JOIN collections AS T3 ON T3.collection_id = T2.collection_id WHERE T3.collection_name = "Best" ;	cre_Doc_and_collections
SELECT COUNT(*) FROM collections AS T1 JOIN collections_children AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = "Best" ;	cre_Doc_and_collections
SELECT document_id FROM document WHERE document_owner = "Ransom" GROUP BY document_id;	cre_Doc_and_collections
SELECT document_object_id FROM documents WHERE document_id IN (SELECT document_id FROM owned_documents WHERE owner_id = (SELECT owner_id FROM users WHERE username = 'Ransom')) ORDER BY document_object_id DESC LIMIT 10;	cre_Doc_and_collections
SELECT subset_id , name , count(*) FROM collections GROUP BY subset_id ;	cre_Doc_and_collections
SELECT subset_id , name , count(*) FROM subset GROUP BY subset_id ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT document_object_id , count(*) FROM documents GROUP BY document_object_id ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;	cre_Doc_and_collections
SELECT document_object_id FROM documents ORDER BY count(*) LIMIT 1;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id HAVING count(*) BETWEEN 2 AND 4 ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id HAVING count(*) between 2 and 4;	cre_Doc_and_collections
SELECT T1.Owner FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.DocumentID WHERE T2.Owner = "Braeden" GROUP BY T1.Owner ORDER BY T1.Owner ASC;	cre_Doc_and_collections
SELECT T1.Owner FROM Documents AS T1 JOIN Documents AS T2 ON T1.DocumentID = T2.DocumentID WHERE T2.Owner = "Braeden" GROUP BY T1.Owner ORDER BY COUNT(*) DESC LIMIT 10;	cre_Doc_and_collections
SELECT unique_subset FROM document WHERE owned_by = "Braeden" ORDER BY unique_subset ASC LIMIT 1;	cre_Doc_and_collections
SELECT DISTINCT subset_name FROM documents WHERE owner_name = 'Braeden' ORDER BY subset_name ASC;	cre_Doc_and_collections
SELECT subset_id , count(DISTINCT document_id) FROM documents GROUP BY subset_id ;	cre_Doc_and_collections
SELECT subset_id , name , count(DISTINCT document_id) FROM documents GROUP BY subset_id , name ;	cre_Doc_and_collections
SELECT document_subset_id , name , count(*) FROM document_subset GROUP BY document_subset_id ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT document_id , document_name , count(*) FROM documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT document_id FROM document_subset WHERE document_name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT document_id FROM Best_for_2000;	cre_Doc_and_collections
SELECT T1.subset , T1.doc_id FROM documents AS T1 JOIN document_subsets AS T2 ON T1.doc_id = T2.doc_id GROUP BY T2.doc_id ORDER BY count(*) DESC LIMIT 10;	cre_Doc_and_collections
SELECT document_id , document_name , document_subset , document_id FROM documents GROUP BY document_id , document_name , document_subset ;	cre_Doc_and_collections
SELECT Collection_Name FROM Documents WHERE Document_OwnedBy = 'Ransom' GROUP BY Collection_Name;	cre_Doc_and_collections
SELECT CollectionName FROM Documents WHERE OwnerName = "Ransom" ;	cre_Doc_and_collections
SELECT COUNT(DISTINCT document_id), document_id FROM documents GROUP BY document_id;	cre_Doc_and_collections
SELECT COUNT(DISTINCT document_object_id) FROM Documents WHERE document_object_id IN (SELECT document_object_id FROM Documents GROUP BY document_object_id HAVING COUNT(*) > 1)	cre_Doc_and_collections
SELECT count(*) FROM `collection` WHERE `name` = 'Best' LIMIT 1;	cre_Doc_and_collections
SELECT count(*) FROM Documents WHERE CollectionName = 'Best' ;	cre_Doc_and_collections
SELECT document_id FROM Best;	cre_Doc_and_collections
SELECT count(*) FROM Documents WHERE CollectionName = 'Best' ;	cre_Doc_and_collections
SELECT collection , count(*) FROM documents GROUP BY collection ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT c.name , c.id , count(*) FROM collections AS c JOIN documents AS d ON c.id = d.collection_id GROUP BY c.id ORDER BY count(*) DESC LIMIT 1;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE collection_name = "Best" AND year = 2000 GROUP BY document_id ORDER BY count(*) DESC LIMIT 10;	cre_Doc_and_collections
SELECT DISTINCT document_object_id FROM documents WHERE subset_name = 'Best for 2000' INTERSECT SELECT DISTINCT document_object_id FROM documents WHERE collection_name = 'Best' ;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE collection_name = "Best" AND document_id NOT IN (SELECT document_id FROM documents WHERE collection_name = "Best") LIMIT 2000;	cre_Doc_and_collections
SELECT DISTINCT document_object_id FROM Best EXCEPT SELECT DISTINCT document_object_id FROM Best WHERE document_object_id IN (SELECT document_object_id FROM Best WHERE collection_name = 'Best for 2000') ;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE document_type = "Best" AND document_date >= "2000-01-01" GROUP BY document_id ORDER BY count(*) DESC LIMIT 10;	cre_Doc_and_collections
SELECT DISTINCT document_id FROM documents WHERE subset_name = 'Best for 2000' OR collection_name = 'Best' ;	cre_Doc_and_collections
SELECT DISTINCT collection_name FROM collections WHERE collection_name = "Best" ORDER BY collection_name ASC;	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE collection_name = "Best" INTERSECT SELECT collection_name FROM collections;	cre_Doc_and_collections
SELECT COUNT(*) FROM collection AS T1 JOIN collection_relation AS T2 ON T1.collection_id = T2.collection_id WHERE T2.collection_name = "Best"	cre_Doc_and_collections
SELECT count(DISTINCT collection) FROM collections WHERE name = 'Best' ;	cre_Doc_and_collections
SELECT CollectionSubset FROM Collection WHERE Name = "Best in" LIMIT 1;	cre_Doc_and_collections
SELECT DISTINCT CollectionSubset FROM Collection WHERE CollectionName = 'Best' ORDER BY CollectionSubset ASC;	cre_Doc_and_collections
SELECT count(*) FROM songs WHERE song_name LIKE '%Love%' ;	sing_contest
SELECT name FROM songs ORDER BY name ASC;	sing_contest
SELECT song_name , language FROM songs;	sing_contest
SELECT MAX(voice_sound_quality_score) , MIN(voice_sound_quality_score) FROM performances;	sing_contest
SELECT Voice_Sound_Quality_Score , Rhythm_Tempo_Score , Stage_Presence_Score FROM Participants WHERE Participant_Name = 'Freeway' ;	sing_contest
SELECT T1.id , T1.language , T1.original_artist FROM song AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.name != 'Love' ;	sing_contest
SELECT name , original_artist FROM song WHERE english_translation = 'All the streets of love' ;	sing_contest
SELECT DISTINCT stage_presence_score FROM song WHERE language = 'English' ;	sing_contest
SELECT T1.id , T1.name FROM participants AS T1 JOIN songs AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING count(*) >= 2;	sing_contest
SELECT T1.id , T1.name , T1.popularity , count(*) FROM artist AS T1 JOIN song AS T2 ON T1.id = T2.artist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 10;	sing_contest
SELECT id , name FROM participants WHERE score = 5 OR sound_quality = 5 OR rhythm_tempo = 5;	sing_contest
SELECT Voice_Sound_Quality_Score FROM Songs WHERE Song_Name = 'The_Balkan_Girls' AND Language = 'English' ;	sing_contest
SELECT id , name FROM song ORDER BY count(*) DESC LIMIT 1;	sing_contest
SELECT COUNT(*) FROM performances WHERE stage_presence_score BETWEEN 7 AND 9 OR stage_presence_score > 9;	sing_contest
SELECT count(*) FROM songs WHERE song_id NOT IN (SELECT song_id FROM performances) ;	sing_contest
SELECT language , AVG(rhythm_score) FROM songs GROUP BY language;	sing_contest
SELECT DISTINCT participant_name FROM songs WHERE language = 'English' GROUP BY participant_name;	sing_contest
SELECT Name , Popularity FROM Participants WHERE Language = "Croatian" INTERSECT SELECT Name , Popularity FROM Participants WHERE Language = "English" ;	sing_contest
SELECT song_name FROM songs WHERE song_name LIKE "%Is%" ;	sing_contest
SELECT T1.artist_name FROM song AS T1 JOIN song_artist AS T2 ON T1.song_id = T2.song_id JOIN artist AS T3 ON T2.artist_id = T3.artist_id WHERE T1.rhythm_tempo > 5 ORDER BY T3.voice_quality DESC;	sing_contest
SELECT count(*) FROM cities;	address_1
SELECT count(*) FROM cities;	address_1
SELECT DISTINCT state FROM states;	address_1
SELECT DISTINCT state FROM states;	address_1
SELECT count(*) FROM countries;	address_1
SELECT COUNT(*) FROM countries;	address_1
SELECT name , code , state , country FROM cities;	address_1
SELECT name , code , state , country FROM cities;	address_1
SELECT latitude , longitude FROM locations WHERE city = "Baltimore" ;	address_1
SELECT latitude , longitude FROM locations WHERE city = "Baltimore" ;	address_1
SELECT name FROM cities WHERE state = "PA" ;	address_1
SELECT city FROM cities WHERE state = "PA" ;	address_1
SELECT count(*) FROM cities WHERE country = "Canada" ;	address_1
SELECT COUNT(*) FROM cities WHERE country = "Canada" ;	address_1
SELECT name FROM cities ORDER BY latitude ASC LIMIT 10;	address_1
SELECT city FROM cities ORDER BY latitude ASC;	address_1
SELECT state , count(*) FROM cities GROUP BY state ;	address_1
SELECT state , count(*) FROM cities GROUP BY state ;	address_1
SELECT country , count(*) FROM cities GROUP BY country ;	address_1
SELECT country , count(*) FROM cities GROUP BY country ;	address_1
SELECT state FROM cities GROUP BY state HAVING count(*) >= 2;	address_1
SELECT state FROM cities GROUP BY state HAVING count(*) >= 2;	address_1
SELECT state FROM cities GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT state FROM cities GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT country FROM cities GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT Country FROM Cities GROUP BY Country ORDER BY COUNT(*) ASC LIMIT 1;	address_1
SELECT first_name , last_name FROM students WHERE state = "MD" ;	address_1
SELECT full_name FROM students WHERE city = "MD" ;	address_1
SELECT count(*) FROM students WHERE country = "China" ;	address_1
SELECT COUNT(*) FROM students WHERE country = "China" ;	address_1
SELECT first_name , major FROM students WHERE city = "Baltimore" ;	address_1
SELECT first_name , major FROM students WHERE city = "Baltimore" ;	address_1
SELECT country , count(*) FROM students GROUP BY country ;	address_1
SELECT country , count(*) FROM students GROUP BY country ;	address_1
SELECT city , count(*) FROM students GROUP BY city ;	address_1
SELECT city , count(*) FROM students GROUP BY city ;	address_1
SELECT state FROM students GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT state FROM students GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT Country FROM Students GROUP BY Country ORDER BY COUNT(*) ASC LIMIT 1;	address_1
SELECT country FROM students GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT name FROM city ORDER BY count(*) DESC LIMIT 10;	address_1
SELECT city FROM students GROUP BY city HAVING count(*) >= 3;	address_1
SELECT state FROM students GROUP BY state HAVING count(*) > 5;	address_1
SELECT state FROM students GROUP BY state HAVING count(*) > 5;	address_1
SELECT student_id FROM students WHERE country != "USA" GROUP BY student_id;	address_1
SELECT student_id FROM students WHERE country != "USA" GROUP BY student_id HAVING count(*) > 1;	address_1
SELECT student_id FROM students WHERE sex = "F" AND state = "PA" ;	address_1
SELECT student_id FROM students WHERE gender = 'F' AND state = 'PA' GROUP BY student_id;	address_1
SELECT student_id FROM students WHERE sex = "Male" AND country != "USA" GROUP BY student_id;	address_1
SELECT student_id FROM students WHERE sex = 'M' AND country != 'USA' GROUP BY student_id HAVING count(*) = 1;	address_1
SELECT distance FROM airports WHERE city = "BAL" AND city = "CHI" ;	address_1
SELECT distance FROM airports WHERE citycode = "BAL" AND citycode = "CHI" ;	address_1
SELECT distance FROM distance_table WHERE city = "Boston" AND city = "Newark" ;	address_1
SELECT distance FROM distance_table WHERE city1 = "Boston" AND city2 = "Newark" ;	address_1
SELECT AVG(DISTANCE) , MIN(DISTANCE) , MAX(DISTANCE) FROM CITIES;	address_1
SELECT AVG(DISTANCE), MIN(DISTANCE), MAX(DISTANCE) FROM CITIES;	address_1
SELECT city_code FROM city ORDER BY distance DESC LIMIT 2;	address_1
SELECT city_code FROM cities GROUP BY city_code ORDER BY max_distance DESC LIMIT 1;	address_1
SELECT city_code FROM cities WHERE distance > (SELECT avg(distance) FROM cities) LIMIT 2;	address_1
SELECT city_code FROM cities WHERE distance > (SELECT avg(distance) FROM cities) GROUP BY city_code;	address_1
SELECT city_code FROM cities WHERE distance < 1000 ORDER BY city_code LIMIT 2;	address_1
SELECT city_code FROM cities WHERE distance < 1000;	address_1
SELECT SUM(T1.distance) FROM city AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.city_name = "BAL" GROUP BY T1.city_name ORDER BY SUM(T1.distance) DESC LIMIT 1;	address_1
SELECT SUM(T1.distance) FROM city AS T1 JOIN bal AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY SUM(T1.distance) DESC LIMIT 1;	address_1
SELECT avg(distance) FROM cities EXCEPT SELECT city FROM cities GROUP BY city ORDER BY avg(distance) DESC LIMIT 1;	address_1
SELECT AVG(distance) FROM cities EXCEPT SELECT distance FROM cities GROUP BY city ORDER BY distance DESC LIMIT 10;	address_1
SELECT city FROM cities ORDER BY distance FROM cities LIMIT 1;	address_1
SELECT name FROM cities ORDER BY distance FROM cities LIMIT 1;	address_1
SELECT city FROM cities ORDER BY distance_to_boston DESC LIMIT 1;	address_1
SELECT city_name FROM cities ORDER BY distance FROM cities LIMIT 1;	address_1
SELECT city_code, SUM(distance) FROM cities GROUP BY city_code;	address_1
SELECT city_code , SUM(distance) FROM cities GROUP BY city_code ;	address_1
SELECT city_name, AVG(distance) FROM cities GROUP BY city_name;	address_1
SELECT city_name, AVG(distance) FROM cities GROUP BY city_name;	address_1
SELECT distance FROM people WHERE first_name = 'Linda' AND last_name = 'Smith' UNION SELECT distance FROM people WHERE first_name = 'Tracy' AND last_name = 'Kim' ;	address_1
SELECT distance FROM cities WHERE city_name = "Linda Smith" INTERSECT SELECT distance FROM cities WHERE city_name = "Tracy Kim" ;	address_1
SELECT first_name , last_name FROM students WHERE last_name = "Linda Smith" ORDER BY first_name LIMIT 1;	address_1
SELECT full_name FROM students WHERE distance_from_linda_smith = (SELECT max(distance_from_linda_smith) FROM students) ORDER BY distance_from_linda_smith DESC LIMIT 1;	address_1
SELECT state FROM students WHERE first_name = "Linda" LIMIT 1;	address_1
SELECT state FROM students WHERE first_name = "Linda" LIMIT 1;	address_1
SELECT * FROM sailors WHERE age > 30;	boat_1
SELECT COUNT(*) FROM sailors WHERE age > 30;	boat_1
SELECT name , age FROM sailors WHERE age < 30;	boat_1
SELECT name , age FROM sailors WHERE age < 30;	boat_1
SELECT * FROM boat WHERE id = 1;	boat_1
SELECT DISTINCT boat_id FROM sailor WHERE id = 1;	boat_1
SELECT Name FROM Reservations WHERE Boat_ID = 102;	boat_1
SELECT name FROM sailors WHERE boat_number = 102;	boat_1
SELECT bid FROM reserved_boats GROUP BY bid HAVING count(*) > 1;	boat_1
SELECT boat_id FROM reservations GROUP BY boat_id HAVING count(*) > 1;	boat_1
SELECT name FROM sailors WHERE name LIKE '%e%' ;	boat_1
SELECT name FROM sailors WHERE name LIKE '%e%' ;	boat_1
SELECT id FROM sailors ORDER BY age DESC LIMIT 1;	boat_1
SELECT different_id FROM sailors WHERE id NOT IN (SELECT min_id FROM sailors) GROUP BY different_id;	boat_1
SELECT name FROM sailors WHERE rating > 7 INTERSECT SELECT name FROM sailors WHERE rating < 7;	boat_1
SELECT DISTINCT name FROM sailors WHERE rating > 7 AND name > (SELECT name FROM sailors WHERE rating > 7) ORDER BY name ASC;	boat_1
SELECT name , id FROM sailors WHERE boat_id IN (SELECT boat_id FROM reservations) ;	boat_1
SELECT name , id FROM sailor WHERE id IN (SELECT id FROM boat_reservation GROUP BY id HAVING count(*) > 1) ;	boat_1
SELECT id , name FROM sailors GROUP BY id HAVING count(*) > 1;	boat_1
SELECT DISTINCT name FROM sailors WHERE boat_reserved = 2 OR boat_reserved = 3 GROUP BY name HAVING count(*) > 1;	boat_1
SELECT sid FROM sailors WHERE boat = "red" OR boat = "blue" GROUP BY sid;	boat_1
SELECT sids FROM sailors WHERE reservetype = "red" OR reservetype = "blue" GROUP BY sids;	boat_1
SELECT name , id FROM sailors WHERE sid IN (SELECT sid FROM reservations WHERE color = "red" OR color = "blue") ;	boat_1
SELECT name , id FROM sailors WHERE boat = "red" OR boat = "blue" ;	boat_1
SELECT sid FROM sailors WHERE color IN ('red', 'blue') GROUP BY sid HAVING count(*) > 1;	boat_1
SELECT id FROM sailors WHERE reservetype = "red" INTERSECT SELECT id FROM sailors WHERE reservetype = "blue"	boat_1
SELECT name , id FROM sailors WHERE sid = ( SELECT sid FROM reservations WHERE color = "red" AND color = "blue" ) ;	boat_1
SELECT name , id FROM sailor WHERE reservetype = "red" INTERSECT SELECT name , id FROM sailor WHERE reservetype = "blue"	boat_1
SELECT id FROM sailors WHERE id NOT IN (SELECT boat_id FROM reservations) ;	boat_1
SELECT id FROM sailors WHERE id NOT IN (SELECT boat_id FROM reservations) ;	boat_1
SELECT name , id FROM sailors WHERE id NOT IN (SELECT boat_id FROM reservations) ;	boat_1
SELECT name , id FROM sailors WHERE id NOT IN (SELECT id FROM boat_reservations) ;	boat_1
SELECT id FROM sailors WHERE id NOT IN (SELECT sailor_id FROM boat_reservations) ;	boat_1
SELECT id FROM sailors WHERE id NOT IN (SELECT sailorid FROM boatreservations) ;	boat_1
SELECT name FROM sailors WHERE id = 103;	boat_1
SELECT name FROM sailors WHERE id = 103;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis") ORDER BY name ASC;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis") ORDER BY name LIMIT 10;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis") ORDER BY name ASC;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis") ORDER BY name ASC;	boat_1
SELECT name , id FROM sailor WHERE rating > 2 AND reserved = 1;	boat_1
SELECT name , id FROM sailors WHERE rating >= 3 AND reserved = 1;	boat_1
SELECT name , age FROM sailors ORDER BY age DESC LIMIT 1;	boat_1
SELECT name , age FROM sailor ORDER BY age DESC LIMIT 1;	boat_1
SELECT count(*) FROM sailors;	boat_1
SELECT count(*) FROM sailors;	boat_1
SELECT AVG(age) FROM sailors WHERE rating = 7;	boat_1
SELECT AVG(age) FROM sailors WHERE rating = 7;	boat_1
SELECT count(*) FROM sailors WHERE name LIKE 'D%' ;	boat_1
SELECT count(*) FROM sailors WHERE name LIKE 'D%' ;	boat_1
SELECT AVG(rating), MAX(age) FROM sailors;	boat_1
SELECT AVG(rating), MAX(age) FROM sailors;	boat_1
SELECT boat_name , count(*) FROM reservations GROUP BY boat_name ;	boat_1
SELECT boat_name , count(*) FROM reservations GROUP BY boat_name ;	boat_1
SELECT boat_id , count(*) FROM reservations GROUP BY boat_id HAVING boat_id > 50;	boat_1
SELECT COUNT(*) , boat_id FROM reservations GROUP BY boat_id HAVING boat_id > 50;	boat_1
SELECT boat_name , count(*) FROM reservations GROUP BY boat_name HAVING count(*) > 1;	boat_1
SELECT boat_name , count(*) FROM reservations GROUP BY boat_name HAVING count(*) > 1;	boat_1
SELECT T1.SailorID , count(*) FROM Reservations AS T1 JOIN Boat AS T2 ON T1.BoatID = T2.BoatID WHERE T1.SailorID > 1 GROUP BY T1.SailorID ;	boat_1
SELECT COUNT(*) , B.boat_name FROM sailor AS S JOIN boat AS B ON S.boat_id = B.boat_id WHERE S.id > 1 GROUP BY B.boat_name;	boat_1
SELECT rating , AVG(age) , COUNT(*) FROM sailors GROUP BY rating HAVING COUNT(*) > 10;	boat_1
SELECT rating , avg(age) FROM sailors WHERE rating = "red" GROUP BY rating ;	boat_1
SELECT name , rating , age FROM sailors ORDER BY rating , age ;	boat_1
SELECT name , rating , age FROM sailor ORDER BY rating , age;	boat_1
SELECT count(*) FROM boats;	boat_1
SELECT count(*) FROM boats;	boat_1
SELECT COUNT(*) FROM boats WHERE color = "red" ;	boat_1
SELECT COUNT(*) FROM boats WHERE color = "red" ;	boat_1
SELECT name FROM boat WHERE age BETWEEN 20 AND 30;	boat_1
SELECT name FROM boat WHERE age BETWEEN 20 AND 30;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM boats WHERE color = "red") ORDER BY rating DESC LIMIT 1;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM boats WHERE color = "red") LIMIT 1;	boat_1
SELECT top 1 rating FROM sailors ORDER BY rating DESC LIMIT 1;	boat_1
SELECT MAX(rating) FROM sailors;	boat_1
SELECT name FROM sailors WHERE boat_name = "Melon" ;	boat_1
SELECT Name FROM sailors WHERE Boat_Name = "Melon" ;	boat_1
SELECT name , age FROM sailors ORDER BY rating DESC;	boat_1
SELECT name , age FROM sailors ORDER BY rating DESC;	boat_1
SELECT model FROM headphones ORDER BY price DESC LIMIT 1;	headphone_store
SELECT model FROM headphones ORDER BY price DESC LIMIT 1;	headphone_store
SELECT DISTINCT model FROM headphones ORDER BY model ASC;	headphone_store
SELECT DISTINCT model FROM headphones ORDER BY model ASC;	headphone_store
SELECT headphone_class FROM headphones GROUP BY headphone_class ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT class FROM headphones GROUP BY class ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT class FROM headphones GROUP BY class HAVING count(*) > 2;	headphone_store
SELECT class FROM headphones GROUP BY class HAVING count(*) <= 2;	headphone_store
SELECT class , count(*) FROM headphones WHERE price > 200 GROUP BY class ;	headphone_store
SELECT class , count(*) FROM headphones GROUP BY class HAVING count(*) > 200;	headphone_store
SELECT count(*) FROM earpads;	headphone_store
SELECT COUNT(DISTINCT type) FROM earpads;	headphone_store
SELECT earpad FROM earpads GROUP BY earpad ORDER BY count(*) DESC LIMIT 2;	headphone_store
SELECT earpad_name , count(*) FROM earpads GROUP BY earpad_name ORDER BY count(*) DESC LIMIT 2;	headphone_store
SELECT T1.Model , T1.Class , T1.Construction FROM Product AS T1 JOIN Model AS T2 ON T1.ModelID = T2.ModelID JOIN Class AS T3 ON T1.ClassID = T3.ClassID JOIN Construction AS T4 ON T1.ConstructionID = T4.ConstructionID ORDER BY T1.Construction DESC LIMIT 1;	headphone_store
SELECT model , class , construction FROM headphone ORDER BY price LIMIT 1;	headphone_store
SELECT construction , AVG(price) FROM headphones GROUP BY construction;	headphone_store
SELECT construction , AVG(cost) FROM headphones GROUP BY construction ;	headphone_store
SELECT T1.HeadphoneClass FROM Headphones AS T1 JOIN Headphones AS T2 ON T1.HeadphoneID = T2.HeadphoneID WHERE T2.HeadphoneClass = "Bowls" INTERSECT SELECT T1.HeadphoneClass FROM Headphones AS T1 JOIN Headphones AS T2 ON T1.HeadphoneID = T2.HeadphoneID WHERE T2.HeadphoneClass = "Comfort Pads"	headphone_store
SELECT class FROM headphones WHERE earpads = "Bowls" INTERSECT SELECT class FROM headphones WHERE earpads = "Comfort Pads" ;	headphone_store
SELECT DISTINCT earpad FROM earpads WHERE earpad NOT LIKE '%plastic%' GROUP BY earpad ORDER BY count(*) DESC LIMIT 10;	headphone_store
SELECT * FROM Earpads WHERE EarpadType != "Plastic" LIMIT 1000;	headphone_store
SELECT model FROM headphones GROUP BY model HAVING AVG(price) < ( SELECT AVG(price) FROM headphones ) ;	headphone_store
SELECT model FROM headphones WHERE price < (SELECT avg(price) FROM headphones) ORDER BY price LIMIT 10;	headphone_store
SELECT store_name FROM store ORDER BY store_open_date ASC;	headphone_store
SELECT store_name FROM stores ORDER BY store_open_date ASC;	headphone_store
SELECT name , parking FROM stores WHERE neighborhood = "Tarzana" ;	headphone_store
SELECT store_name , parking_info FROM stores WHERE neighborhood = "Tarzana" ;	headphone_store
SELECT COUNT(DISTINCT T1.NEIGHBORHOOD) FROM STORES AS T1 JOIN NEIGHBORHOODS AS T2 ON T1.NEIGHBORHOOD_ID = T2.NEIGHBORHOOD_ID;	headphone_store
SELECT COUNT(DISTINCT neighborhood) FROM stores;	headphone_store
SELECT neighborhood , count(*) FROM stores GROUP BY neighborhood ;	headphone_store
SELECT neighborhood , count(*) FROM stores GROUP BY neighborhood ;	headphone_store
SELECT store_name , COUNT(*) FROM Store , Store_headphones WHERE Store_headphones.store_id = Store.store_id GROUP BY store_name ORDER BY COUNT(*) DESC LIMIT 1;	headphone_store
SELECT T1.StoreName , SUM(T2.Quantity) FROM Store AS T1 JOIN StoreInventory AS T2 ON T1.StoreID = T2.StoreID GROUP BY T1.StoreName ORDER BY SUM(T2.Quantity) DESC LIMIT 1;	headphone_store
SELECT store_name FROM stores WHERE store_id NOT IN (SELECT store_id FROM inventory WHERE product_id IN (SELECT product_id FROM headphones)) ;	headphone_store
SELECT store_name FROM store WHERE store_id NOT IN (SELECT store_id FROM product WHERE product_id IN (SELECT product_id FROM inventory WHERE product_type = "Headphones")) GROUP BY store_name;	headphone_store
SELECT T1.model FROM Store AS T1 JOIN Stock AS T2 ON T1.store_id = T2.store_id GROUP BY T1.model HAVING count(*) = 0;	headphone_store
SELECT T1.model FROM stores AS T1 JOIN stores AS T2 ON T1.store_id = T2.store_id WHERE T1.store_id != T2.store_id GROUP BY T1.model HAVING count(*) = 1;	headphone_store
SELECT T1.model FROM Store AS T1 JOIN Stock AS T2 ON T1.store_id = T2.store_id GROUP BY T1.model ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT T1.model FROM Stock AS T1 JOIN Product AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY SUM(T1.quantity) DESC LIMIT 1;	headphone_store
SELECT COUNT(*) FROM woodman_headphones;	headphone_store
SELECT SUM(quantity) FROM Headphones WHERE store_id = (SELECT store_id FROM Woodman WHERE store_name = 'Woodman')	headphone_store
SELECT neighborhood FROM products WHERE product_type = "Headphones" GROUP BY neighborhood HAVING count(*) = 0;	headphone_store
SELECT T1.NEIGHBORHOOD FROM PLAYLIST AS T1 JOIN PLAYLIST_TRACK AS T2 ON T1.PLAYLIST_ID = T2.PLAYLIST_ID JOIN TRACK AS T3 ON T2.TRACK_ID = T3.TRACK_ID WHERE T3.TYPE = "HEADPHONE" GROUP BY T1.NEIGHBORHOOD;	headphone_store
SELECT count(*) FROM authors;	aan_1
SELECT count(*) FROM authors;	aan_1
SELECT COUNT(*) FROM papers;	aan_1
SELECT COUNT(*) FROM papers;	aan_1
SELECT count(*) FROM Affiliations;	aan_1
SELECT count(*) FROM affiliations;	aan_1
SELECT COUNT(*) FROM NAACL 2000;	aan_1
SELECT count(*) FROM NAACL 2000;	aan_1
SELECT count(*) FROM papers WHERE year = 2009 AND institution = "Columbia University" ;	aan_1
SELECT COUNT(*) FROM Publications WHERE Year = 2009 AND Institution = "Columbia University" ;	aan_1
SELECT Name , Address FROM Affiliations;	aan_1
SELECT Name , Address FROM Affiliations;	aan_1
SELECT year , venue FROM paper ORDER BY year ;	aan_1
SELECT DISTINCT venue FROM papers ORDER BY year;	aan_1
SELECT T1.Title , T1.PaperID FROM Papers AS T1 JOIN Authors AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.University = "Harvard University" ;	aan_1
SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.affiliation_name = "Harvard University" ;	aan_1
SELECT T1.title , T1.paper_id FROM papers AS T1 JOIN papers_titles AS T2 ON T1.paper_id = T2.paper_id JOIN authors AS T3 ON T2.author_id = T3.author_id WHERE T3.author_name = "McKeown" ;	aan_1
SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = "McKeown" ;	aan_1
SELECT T1.title , T1.paper_id FROM papers AS T1 JOIN papers_collaborated AS T2 ON T1.paper_id = T2.paper_id WHERE T2.stanford = "Stanford University" AND T2.columbia = "Columbia University" ;	aan_1
SELECT T1.Title , T1.PaperID FROM Paper AS T1 JOIN Affiliated AS T2 ON T1.PaperID = T2.PaperID WHERE T2.University = "Stanford" INTERSECT SELECT T1.Title , T1.PaperID FROM Paper AS T1 JOIN Affiliated AS T2 ON T1.PaperID = T2.PaperID WHERE T2.University = "Columbia"	aan_1
SELECT T1.title , T1.paper_id FROM papers AS T1 JOIN papers AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author = "McKenna, Kathleen" AND T2.author = "Rambow, Owen" ;	aan_1
SELECT T1.Title , T1.PaperID FROM paper AS T1 JOIN paper AS T2 ON T1.PaperID = T2.PaperID WHERE T2.Author = "McKeown, Kathleen" AND T2.Author = "Rambow, Owen" ;	aan_1
SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = "McK" INTERSECT SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = "Ramb"	aan_1
SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id JOIN paper_author AS T3 ON T1.paper_id = T3.paper_id JOIN author AS T4 ON T3.author_id = T4.author_id WHERE T2.author_name = "McK" AND T4.author_name = "Rambow" ;	aan_1
SELECT T1.Title , T1.PaperID FROM Paper AS T1 JOIN Author AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.AuthorName = "McK" OR T2.AuthorName = "Rambow" OR T2.AuthorName = "Owen" ;	aan_1
SELECT T1.title , T1.paper_id FROM paper AS T1 JOIN paper_author AS T2 ON T1.paper_id = T2.paper_id JOIN author AS T3 ON T2.author_id = T3.author_id WHERE T3.author_name = "McKeown" OR T3.author_name = "Rambow" ;	aan_1
SELECT author_name , count(*) FROM authors GROUP BY author_name ORDER BY count(*) DESC;	aan_1
SELECT author , count(*) FROM papers GROUP BY author ORDER BY count(*) DESC;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ORDER BY count(*) DESC LIMIT 10;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ORDER BY count(*) DESC;	aan_1
SELECT Name FROM Authors WHERE Papers > 50;	aan_1
SELECT Name FROM Authors WHERE Papers > 50;	aan_1
SELECT name FROM authors WHERE count(*) = 1;	aan_1
SELECT author_name FROM authors WHERE paper_count = 1;	aan_1
SELECT venue , year FROM publication GROUP BY venue , year ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT venue , year FROM publication GROUP BY venue , year ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT venue FROM publication GROUP BY venue ORDER BY count(*) LIMIT 1;	aan_1
SELECT venue_name FROM venue WHERE publication_count = (SELECT MAX(publication_count) FROM venue) ORDER BY publication_count LIMIT 1;	aan_1
SELECT COUNT(*) FROM paper AS T1 JOIN paper_cited AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id = 'A00-1002' ;	aan_1
SELECT COUNT(*) FROM paper AS T1 JOIN paper_cited AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id = (SELECT paper_id FROM paper WHERE paper_title = "A00-1002") ;	aan_1
SELECT COUNT(*) FROM paper AS T1 JOIN reference AS T2 ON T1.id = T2.paper_id WHERE T1.id = 'D12-1027' ;	aan_1
SELECT COUNT(*) FROM paper AS T1 JOIN paper_reference AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 'D12-1027' ;	aan_1
SELECT id , count(*) FROM Citations GROUP BY id ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT id , COUNT(*) FROM Citations GROUP BY id ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT title FROM papers GROUP BY title ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT T1.Title FROM Paper AS T1 JOIN Paper AS T2 ON T1.PaperID = T2.PaperID GROUP BY T1.Title ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT title , count(*) FROM paper GROUP BY title ORDER BY count(*) DESC LIMIT 10;	aan_1
SELECT Title , COUNT(*) FROM Citations GROUP BY Title ORDER BY COUNT(*) DESC LIMIT 10;	aan_1
SELECT COUNT(*) FROM journalarticle AS T1 JOIN author AS T2 ON T1.authorid = T2.authorid WHERE T2.name = "McKeown", Kathleen ;	aan_1
SELECT COUNT(*) FROM author AS T1 JOIN book AS T2 ON T1.author_id = T2.author_id JOIN book_citation AS T3 ON T3.book_id = T2.book_id JOIN person AS T4 ON T4.person_id = T3.person_id WHERE T4.first_name = "McK" AND T4.last_name = "Mckeown" ;	aan_1
SELECT count(*) FROM papers AS T1 JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = "Mckeown , Kathleen" ;	aan_1
SELECT COUNT(*) FROM Citations AS T1 JOIN Authors AS T2 ON T1.AuthorID = T2.AuthorID JOIN Papers AS T3 ON T1.PaperID = T3.PaperID WHERE T2.AuthorName = "Mckeown" AND T2.AuthorName = "Kathleen" ;	aan_1
SELECT author_name , COUNT(*) FROM authors GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT author_name , COUNT(*) FROM authors GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT venue , year FROM papers WHERE mckeown = "Kathleen" ;	aan_1
SELECT venue , year FROM papers WHERE name = "Mckeown , Kathleen" ;	aan_1
SELECT venue , year FROM papers WHERE university = "Columbia University" ;	aan_1
SELECT venue , year FROM papers WHERE university = "Columbia University" ;	aan_1
SELECT author_name FROM authors WHERE YEAR_OF_PAPER = 2009 GROUP BY author_name ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT author_name FROM authors WHERE year = 2009 GROUP BY author_name ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT affiliation , count(*) FROM papers WHERE year = 2009 GROUP BY affiliation ORDER BY count(*) DESC LIMIT 3;	aan_1
SELECT Affiliation , COUNT(*) FROM Papers WHERE Year = 2009 GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 3;	aan_1
SELECT COUNT(*) FROM papers WHERE institution = "Columbia University" AND YEAR >= 2009;	aan_1
SELECT COUNT(*) FROM papers WHERE institution = "Columbia University" AND YEAR > 2009;	aan_1
SELECT COUNT(*) FROM Papers WHERE Year >= 2000 AND Year <= 2009;	aan_1
SELECT COUNT(*) FROM papers WHERE year >= 2000 AND year <= 2009;	aan_1
SELECT title FROM papers GROUP BY title ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT title FROM papers GROUP BY title ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT COUNT(*) FROM collaborators AS T1 JOIN people AS T2 ON T1.person_id = T2.person_id WHERE T2.first_name = "McKeown" AND T2.last_name = "Kathleen" ;	aan_1
SELECT COUNT(*) FROM collaboration AS T1 JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.first_name = "Mckeown" AND T2.last_name = "Kathleen" ;	aan_1
SELECT T1.Name FROM Papers AS T1 JOIN Authors AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.Name = "McKenna, Kathleen" GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT T1.author_name FROM authors AS T1 JOIN papers AS T2 ON T1.author_id = T2.author_id JOIN papers AS T3 ON T2.paper_id = T3.paper_id WHERE T3.author_name = "Kathleen Mckeown" GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT id FROM papers WHERE title LIKE '%translation%' ;	aan_1
SELECT paper_id FROM papers WHERE title LIKE '%translation%' ;	aan_1
SELECT T1.id , T1.title FROM paper AS T1 JOIN paper_cited AS T2 ON T1.id = T2.paper_id GROUP BY T1.id HAVING count(*) = 0;	aan_1
SELECT paper_id , title FROM papers WHERE paper_id NOT IN ( SELECT paper_id FROM citations ) ;	aan_1
SELECT T1.Affiliation FROM Papers AS T1 JOIN Affiliations AS T2 ON T1.AffiliationID = T2.AffiliationID WHERE T1.Address LIKE '%China%' GROUP BY T1.AffiliationID ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT T1.Affiliation FROM Papers AS T1 JOIN Affiliations AS T2 ON T1.AffiliationID = T2.AffiliationID GROUP BY T1.AffiliationID ORDER BY COUNT(*) DESC LIMIT 1;	aan_1
SELECT conf_year , count(*) FROM papers GROUP BY conf_year ;	aan_1
SELECT year , venue , count(*) FROM papers GROUP BY year , venue ;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ;	aan_1
SELECT Title FROM Papers WHERE Citations > 50;	aan_1
SELECT Title FROM Papers WHERE Citations > 50;	aan_1
SELECT COUNT(DISTINCT T1.author_id) FROM publication AS T1 JOIN paper AS T2 ON T1.publication_id = T2.publication_id JOIN author AS T3 ON T1.author_id = T3.author_id WHERE T2.citation_count > 50;	aan_1
SELECT COUNT(*) FROM authors AS T1 JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T2.citations > 50 GROUP BY T1.author_id HAVING COUNT(*) < 1;	aan_1
SELECT T1.author_name FROM paper AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id JOIN paper AS T3 ON T3.paper_id = T1.paper_id WHERE T3.year = 2009 AND T1.paper_title = "NAACL" AND T1.paper_title = "ACL" GROUP BY T1.author_name HAVING count(*) >= 1;	aan_1
SELECT T1.Name FROM Authors AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.Year = 2009 INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.Year = 2010 INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.Year = 2011 INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.Year = 2012 INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID	aan_1
SELECT T1.Name FROM Authors AS T1 JOIN Papers AS T2 ON T1.AuthorID = T2.AuthorID JOIN ACL AS T3 ON T2.PaperID = T3.PaperID GROUP BY T1.Name HAVING COUNT(*) = 0;	aan_1
SELECT author_name FROM authors WHERE author_id NOT IN (SELECT author_id FROM papers) GROUP BY author_name ORDER BY author_name ASC;	aan_1
SELECT count(*) FROM conference;	conference
SELECT count(*) FROM conference;	conference
SELECT DISTINCT conference_name FROM conferences;	conference
SELECT DISTINCT conference_name FROM conferences;	conference
SELECT conference_name , year , location FROM conference;	conference
SELECT name , year , location FROM conference;	conference
SELECT conference_name , count(*) FROM conference GROUP BY conference_name ;	conference
SELECT conference_name , count(*) FROM conference GROUP BY conference_name;	conference
SELECT year , count(*) FROM conference GROUP BY year ;	conference
SELECT COUNT(*) FROM conferences;	conference
SELECT Year FROM Conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1;	conference
SELECT Year FROM Conference GROUP BY Year ORDER BY count(*) LIMIT 1;	conference
SELECT location FROM conferences GROUP BY location HAVING count(*) >= 2;	conference
SELECT Location FROM Conference WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Host_ID IN (SELECT Conference_ID FROM Conference_Host WHERE Conference_ID IN	conference
SELECT institution_name , location , founded_year FROM institutions;	conference
SELECT name , location , founding_year FROM institution ;	conference
SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900;	conference
SELECT COUNT(*) FROM institution WHERE YEAR(founded) BETWEEN 1850 AND 1900;	conference
SELECT T1.Institution_Name , T1.Location FROM Institution AS T1 JOIN Institution_Location AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Founded_Date DESC LIMIT 1;	conference
SELECT name , location FROM institution ORDER BY created_at DESC LIMIT 1;	conference
SELECT T1.InstitutionName , count(*) FROM Institution AS T1 JOIN Staff AS T2 ON T1.InstitutionID = T2.InstitutionID WHERE T2.DateOfBirth > '1800-01-01' GROUP BY T1.InstitutionName ;	conference
SELECT T1.institution_id , count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id = T2.institution_id WHERE T2.birth_date > '1800-01-01' GROUP BY T1.institution_id ;	conference
SELECT T1.InstitutionName FROM Institution AS T1 JOIN Staff AS T2 ON T1.InstitutionID = T2.InstitutionID WHERE T2.StaffID IS NULL;	conference
SELECT institution_name FROM institution WHERE staff_count = 0;	conference
SELECT Staff_Name FROM Staff ORDER BY Age DESC LIMIT 1;	conference
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff) LIMIT 10;	conference
SELECT MAX(age) , MIN(age) FROM staff WHERE country = 'United States' ;	conference
SELECT MAX(age) , MIN(age) FROM staff;	conference
SELECT conference_name FROM staff WHERE country = "Canada" GROUP BY conference_name;	conference
SELECT conference_name FROM conference WHERE staff_from_canada = 1;	conference
SELECT staff_name FROM staff WHERE staff_id IN (SELECT staff_id FROM conference WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_type = 'speaker') INTERSECT SELECT staff_id FROM conference WHERE conference_id IN (SELECT conference_id FROM conference WHERE conference_type = 'sponsor')) GROUP BY staff_name HAVING count(*) > 1;	conference
SELECT T1.Staff_Name FROM Conference AS T1 JOIN Conference_Sponsor AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN Conference_Speaker AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Sponsor_ID = 1 INTERSECT SELECT T1.Staff_Name FROM Conference AS T1 JOIN Conference_Sponsor AS T2 ON T1.Conference_ID = T2.Conference_ID JOIN Conference_Speaker AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Speaker_ID = 1;	conference
SELECT name FROM acl WHERE id IN (SELECT id FROM naccl) EXCEPT SELECT name FROM acl WHERE id NOT IN (SELECT id FROM naccl)	conference
SELECT T1.Name FROM Conference AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T1.ConferenceName = "ACL" INTERSECT SELECT T1.Name FROM Conference AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T1.ConferenceName = "NACCL"	conference
SELECT Staff_Name FROM Staff WHERE YEAR(Join_Date) BETWEEN 2003 AND 2004;	conference
SELECT T1.Staff_Name FROM Conference AS T1 JOIN Staff AS T2 ON T1.Staff_ID = T2.Staff_ID WHERE T1.Conference_Date >= '2003-01-01' AND T1.Conference_Date <= '2004-12-31' GROUP BY T1.Staff_Name;	conference
SELECT conference_name , year , count(*) FROM conference GROUP BY conference_name , year ;	conference
SELECT T1.ConferenceID , T1.ConferenceName , T1.Year , T1.ParticipantCount FROM Conference AS T1 JOIN ConferenceParticipant AS T2 ON T1.ConferenceID = T2.ConferenceID GROUP BY T1.ConferenceID ORDER BY T1.ConferenceID ;	conference
SELECT conference_name FROM conference ORDER BY count(*) DESC LIMIT 2;	conference
SELECT conference_name FROM conferences ORDER BY count(*) DESC LIMIT 2;	conference
SELECT T1.Name , T1.Nationality FROM Conference AS T1 JOIN Person AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.ConferenceID NOT IN (SELECT ConferenceID FROM ACL Conference) GROUP BY T1.ConferenceID ;	conference
SELECT T1.Name , T1.Nationality FROM Conference AS T1 JOIN Person AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T2.ConferenceID NOT IN (SELECT ConferenceID FROM ACLConference) GROUP BY T1.ConferenceID HAVING COUNT(*) = 0;	conference
SELECT name , location FROM university WHERE staff_id NOT IN (SELECT staff_id FROM conference WHERE year = 2004) ;	conference
SELECT name , location FROM university WHERE staff_count = 0 INTERSECT SELECT name , location FROM university WHERE staff_count > 0;	conference
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;	pilot_1
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;	pilot_1
SELECT name FROM pilots WHERE age < (SELECT avg(age) FROM pilots) ORDER BY age;	pilot_1
SELECT name FROM pilots ORDER BY age ASC LIMIT 10;	pilot_1
SELECT * FROM pilots WHERE age < 30;	pilot_1
SELECT * FROM pilots WHERE age < 30;	pilot_1
SELECT name FROM pilots WHERE plane = "Piper Cub" AND age < 35;	pilot_1
SELECT name FROM pilots WHERE age < 35 AND plane = "Piper Cub" LIMIT 10;	pilot_1
SELECT location FROM planes WHERE model = "F-14" LIMIT 1;	pilot_1
SELECT location FROM hangar WHERE fighter = "F-14" LIMIT 1;	pilot_1
SELECT COUNT(DISTINCT LOCATION) FROM AIRPLANE WHERE LOCATION IN (SELECT LOCATION FROM AIRPLANE GROUP BY LOCATION HAVING COUNT(*)>1)	pilot_1
SELECT count(DISTINCT location) FROM hangars;	pilot_1
SELECT Plane FROM Pilot WHERE Age = 32 ORDER BY Plane DESC LIMIT 1;	pilot_1
SELECT T1.plane_name FROM plane AS T1 JOIN pilot AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.age = 32;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40;	pilot_1
SELECT COUNT(*) FROM plane_b52_bomber AS T1 JOIN pilot AS T2 ON T1.pilot_id = T2.id WHERE T2.age < 35;	pilot_1
SELECT COUNT(*) FROM Bomber WHERE PilotID < 35 AND Type = "B-52" ;	pilot_1
SELECT T1.Name FROM Pilot AS T1 JOIN Flight AS T2 ON T1.PilotID = T2.PilotID JOIN Plane AS T3 ON T2.PlanID = T3.PlanID WHERE T3.Name = "Piper Cub" ORDER BY T1.Age DESC LIMIT 1;	pilot_1
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;	pilot_1
SELECT name FROM planes ORDER BY count(*) DESC LIMIT 1;	pilot_1
SELECT Plane_Name FROM Flights GROUP BY Plane_Name ORDER BY count(*) DESC LIMIT 1;	pilot_1
SELECT name FROM planes ORDER BY count(*) LIMIT 1;	pilot_1
SELECT Plane_Name FROM Flights GROUP BY Plane_Name ORDER BY count(*) LIMIT 1;	pilot_1
SELECT COUNT(*) FROM aircraft WHERE city = "Chicago" AND plane IN (SELECT plane FROM aircraft WHERE city = "Chicago")	pilot_1
SELECT COUNT(*) FROM aircraft WHERE city = "Chicago" AND country = "United States" AND type = "Pilot" GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;	pilot_1
SELECT T1.plane FROM planes AS T1 JOIN pilots AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.age = 41 AND T2.pilot_name = "Smith" GROUP BY T1.plane;	pilot_1
SELECT name FROM planes WHERE pilot_name = "Smith" AND age = 41;	pilot_1
SELECT count(DISTINCT pilot) FROM planes;	pilot_1
SELECT COUNT(DISTINCT T1.plane_name) FROM pilot AS T1 JOIN plane AS T2 ON T1.pilot_id = T2.pilot_id;	pilot_1
SELECT count(*) FROM pilots WHERE pilot_name = "Smith" LIMIT 1;	pilot_1
SELECT COUNT(*) FROM planes AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.name = "Smith" ;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40;	pilot_1
SELECT count(*) FROM planes WHERE age > 40;	pilot_1
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;	pilot_1
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;	pilot_1
SELECT pilot_name FROM pilots ORDER BY age DESC;	pilot_1
SELECT name FROM pilots ORDER BY age DESC;	pilot_1
SELECT * FROM planes ORDER BY plane_name;	pilot_1
SELECT plane_name FROM planes ORDER BY plane_name;	pilot_1
SELECT DISTINCT type FROM planes ORDER BY type ASC;	pilot_1
SELECT DISTINCT plane_name FROM planes ORDER BY plane_name ASC;	pilot_1
SELECT count(*) FROM pilots WHERE age BETWEEN 30 AND 40 OR age BETWEEN 40 AND 30;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 OR age < 30;	pilot_1
SELECT name , age FROM pilots WHERE plane = "Piper Cub" AND age > 35 OR fighter = "F-14" AND age < 30;	pilot_1
SELECT Name , Age FROM Pilots WHERE Flight_Type = "Piper Cub" AND Age > 35 OR Flight_Type = "F-14 Fighter" AND Age < 30;	pilot_1
SELECT T1.PilotName FROM Plane AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.AircraftType = "Piper Cub" AND T2.AircraftType != "B-52 Bomber" GROUP BY T1.PilotName HAVING count(*) = 1;	pilot_1
SELECT name FROM pilots WHERE aircraft LIKE "Piper Cub%" AND aircraft NOT LIKE "B-52 Bomber%" GROUP BY name;	pilot_1
SELECT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id JOIN planes AS T3 ON T2.plane_id = T3.plane_id WHERE T3.plane_type = "Piper Cub" OR T3.plane_type = "B-52 Bomber" GROUP BY T1.pilot_name;	pilot_1
SELECT T1.PilotName FROM Pilot AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Name = "Piper Cub" INTERSECT SELECT T1.PilotName FROM Pilot AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Name = "B-52 Bomber"	pilot_1
SELECT AVG(age) , MIN(age) FROM pilots;	pilot_1
SELECT AVG(age) , MIN(age) FROM pilots;	pilot_1
SELECT name FROM pilots WHERE city = "Austin" INTERSECT SELECT name FROM pilots WHERE city = "Boston"	pilot_1
SELECT name FROM pilots WHERE city = "Austin" INTERSECT SELECT name FROM pilots WHERE city = "Boston"	pilot_1
SELECT T1.PilotName FROM Plane AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Name = "Piper Cub" OR T2.Name = "F-14 Fighter" GROUP BY T1.PilotName;	pilot_1
SELECT name FROM pilots WHERE aircraft IN ('Piper Cub', 'F-14 Fighter') ;	pilot_1
SELECT type_of_plane , AVG(age) FROM pilots GROUP BY type_of_plane ;	pilot_1
SELECT plane_name , AVG(age) FROM pilots GROUP BY plane_name ;	pilot_1
SELECT type , count(*) FROM planes GROUP BY type ;	pilot_1
SELECT plane_name , count(*) FROM flights GROUP BY plane_name ;	pilot_1
SELECT type_of_plane , name_of_pilot FROM pilots ORDER BY type_of_plane DESC;	pilot_1
SELECT DISTINCT plane_name , oldest_pilot FROM pilot ORDER BY plane_name ASC;	pilot_1
SELECT type_of_plane , name_of_pilot FROM pilots ORDER BY age DESC LIMIT 10;	pilot_1
SELECT plane_name , pilot_name FROM pilots ORDER BY pilot_name ASC LIMIT 10;	pilot_1
SELECT name , MAX(age) FROM pilots GROUP BY name ;	pilot_1
SELECT pilot_name , MAX(age) FROM pilots GROUP BY pilot_name;	pilot_1
SELECT city , COUNT(*) , AVG(age) FROM pilots GROUP BY city ;	pilot_1
SELECT location , count(*) , avg(age) FROM pilots GROUP BY location ;	pilot_1
SELECT count(*) FROM plane_type WHERE avg(pilot_age) < 35;	pilot_1
SELECT plane_name , count(*) FROM planes GROUP BY plane_name HAVING avg(pilot_age) < 35;	pilot_1
SELECT Location FROM Plane WHERE Owner = (SELECT YoungestPilot FROM Pilot) ORDER BY Location ASC LIMIT 1;	pilot_1
SELECT Location FROM Pilots WHERE Age = (SELECT MIN(Age) FROM Pilots) ORDER BY Location LIMIT 1;	pilot_1
SELECT name , age FROM pilots WHERE city = "Austin" AND plane IS NOT NULL;	pilot_1
SELECT name , age FROM pilots WHERE city = "Austin" ;	pilot_1
SELECT name FROM pilots ORDER BY age DESC LIMIT 10;	pilot_1
SELECT name FROM pilots WHERE age > (SELECT age FROM pilots ORDER BY age DESC LIMIT 1) ORDER BY name ASC;	pilot_1
SELECT COUNT(*) FROM pilots WHERE age < (SELECT MIN(age) FROM pilots WHERE plane = "F-14 Fighter")	pilot_1
SELECT COUNT(*) FROM pilots WHERE age < (SELECT MIN(age) FROM pilots WHERE type = "F-14")	pilot_1
SELECT DISTINCT plane_name FROM planes WHERE plane_name LIKE '%Bomber%' ;	pilot_1
SELECT DISTINCT plane_name FROM planes WHERE plane_name LIKE '%Bomber%' ;	pilot_1
SELECT count(*) FROM pilots WHERE age > (SELECT max(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT min(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (SELECT avg(age) FROM pilots) INTERSECT SELECT count(*) FROM pilots WHERE age > (	pilot_1
SELECT COUNT(*) FROM pilots WHERE age > (SELECT MIN(age) FROM pilots WHERE type = "Piper Cub")	pilot_1
SELECT district_name FROM districts ORDER BY area DESC LIMIT 1;	district_spokesman
SELECT area , government_website FROM district ORDER BY population ASC LIMIT 1;	district_spokesman
SELECT name , population FROM districts WHERE area > ( SELECT avg(area) FROM districts ) ;	district_spokesman
SELECT MAX(Area) , AVG(Area) FROM Districts;	district_spokesman
SELECT SUM(population) FROM districts WHERE area IN (SELECT MAX(area) FROM districts) LIMIT 3;	district_spokesman
SELECT id , name , website FROM districts ORDER BY population ;	district_spokesman
SELECT DISTINCT district_name FROM districts WHERE government_link LIKE '%gov%' ;	district_spokesman
SELECT district_id, district_name FROM districts WHERE population > 4000 OR area > 3000;	district_spokesman
SELECT Spokesperson_Name , Speech_Title FROM Spokespersons;	district_spokesman
SELECT AVG(points), AVG(age) FROM spokesmen WHERE rank_position = 1;	district_spokesman
SELECT name , points FROM spokesmen WHERE age < 40;	district_spokesman
SELECT name FROM spokesman ORDER BY age DESC LIMIT 1;	district_spokesman
SELECT spokesman FROM spokesman ORDER BY points DESC LIMIT 1;	district_spokesman
SELECT district FROM spokesman GROUP BY district ORDER BY count(*) DESC LIMIT 1;	district_spokesman
SELECT name FROM spokesmen WHERE district_year < 2004 GROUP BY name HAVING count(*) > 1;	district_spokesman
SELECT district , count(*) FROM spokesmen GROUP BY district ORDER BY count(*) DESC;	district_spokesman
SELECT DISTINCT district FROM spokesman ORDER BY rank_position LIMIT 10;	district_spokesman
SELECT district FROM spokesman GROUP BY district HAVING count(*) > 1;	district_spokesman
SELECT COUNT(DISTINCT district) FROM spokesmen EXCEPT SELECT DISTINCT district FROM spokesmen WHERE district IS NULL;	district_spokesman
SELECT name FROM spokesmen WHERE district_id NOT IN (SELECT district_id FROM spokesmen) ;	district_spokesman
SELECT SUM(population) , AVG(population) FROM district WHERE spokesman IS NOT NULL GROUP BY district;	district_spokesman
SELECT title FROM sculpture ORDER BY year DESC LIMIT 1;	art_1
SELECT Name FROM Sculptures ORDER BY CreationDate DESC LIMIT 1;	art_1
SELECT title , location FROM paintings ORDER BY creation_date DESC LIMIT 1;	art_1
SELECT name , location FROM paintings ORDER BY age DESC LIMIT 1;	art_1
SELECT sculpture_name FROM sculptures WHERE gallery_id = 226;	art_1
SELECT sculpture_name FROM sculptures WHERE gallery_id = 226;	art_1
SELECT title , location FROM paintings;	art_1
SELECT painting_name , location FROM paintings ORDER BY painting_name ASC;	art_1
SELECT title , location FROM sculptures;	art_1
SELECT sculpture_name , location FROM sculptures ORDER BY location ASC LIMIT 10;	art_1
SELECT medium_type FROM paintings WHERE id = 80;	art_1
SELECT medium FROM painting WHERE id = 80;	art_1
SELECT first_name , last_name FROM artist WHERE date_of_birth > 1850;	art_1
SELECT full_name FROM artist WHERE birth_year > 1850;	art_1
SELECT name , year FROM sculpture WHERE gallery 226 NOT IN ( SELECT gallery FROM sculpture ) ;	art_1
SELECT name , date FROM sculptures WHERE gallery 226 NOT IN (SELECT gallery FROM sculptures) ORDER BY date ASC;	art_1
SELECT DISTINCT artist_name , first_name , last_name FROM artist ORDER BY first_name ASC , last_name ASC LIMIT 100;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Artist_Sculpture AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN Sculpture AS T3 ON T2.Sculpture_ID = T3.Sculpture_ID WHERE T3.Date < '1900-01-01' ORDER BY FirstName , LastName ASC;	art_1
SELECT DISTINCT birth_year FROM artist WHERE birth_year > 1920;	art_1
SELECT T2.birth_year , T1.artist_name FROM artist AS T1 JOIN sculpture AS T2 ON T1.artist_id = T2.artist_id WHERE T2.birth_year > 1920 GROUP BY T2.birth_year , T1.artist_name ;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Person AS T2 ON T1.ArtistID = T2.ArtistID ORDER BY T2.LifeSpan DESC LIMIT 1;	art_1
SELECT name FROM artist ORDER BY age DESC LIMIT 1;	art_1
SELECT age FROM artist ORDER BY age ASC LIMIT 1;	art_1
SELECT age FROM artist ORDER BY age LIMIT 1;	art_1
SELECT first_name , age FROM artist ORDER BY age DESC LIMIT 1;	art_1
SELECT first_name , age FROM artist ORDER BY age DESC LIMIT 1;	art_1
SELECT COUNT(*) FROM Exhibition WHERE GalleryID = 240;	art_1
SELECT COUNT(*) FROM gallery AS T1 JOIN exhibition AS T2 ON T1.id = T2.gallery_id WHERE T2.gallery_id = 240;	art_1
SELECT count(*) FROM artist ORDER BY age DESC LIMIT 1;	art_1
SELECT COUNT(*) FROM artist AS T1 JOIN painting AS T2 ON T1.id = T2.artist_id ORDER BY T2.life DESC LIMIT 1;	art_1
SELECT name , year FROM artist WHERE first_name = "Mary" ORDER BY year ASC;	art_1
SELECT artist_name , year FROM painting WHERE artist_name = "Mary" ORDER BY year ASC;	art_1
SELECT width FROM paintings WHERE artist_name < "1850" ORDER BY width DESC LIMIT 10;	art_1
SELECT width FROM paintings WHERE artist_name = (SELECT artist_name FROM artists WHERE birth_year < 1850) ORDER BY width LIMIT 1;	art_1
SELECT location , medium_type FROM paintings WHERE artist_name = "Pablo" ;	art_1
SELECT location , medium FROM artist WHERE first_name = "Pablo" ;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Works AS T2 ON	art_1
SELECT full_name FROM artist WHERE artist_id IN (SELECT artist_id FROM artwork WHERE type = "painting" UNION SELECT artist_id FROM artwork WHERE type = "sculpture")	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN ArtistMedium AS T2 ON T1.ArtistID = T2.ArtistID JOIN Painting AS T3 ON T2.PaintingID = T3.PaintingID WHERE T3.PaintingMedium = "Oil" INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN ArtistMedium AS T2 ON T1.ArtistID = T2.ArtistID JOIN Painting AS T3 ON T2.PaintingID = T3.PaintingID WHERE T3.PaintingMedium = "Lithographic" INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN ArtistMedium AS T2 ON T1.ArtistID = T2.ArtistID JOIN Painting AS T3 ON T2.PaintingID = T3.PaintingID WHERE T3.PaintingMedium =	art_1
SELECT first_name , last_name FROM artist WHERE medium = "oil" INTERSECT SELECT first_name , last_name FROM artist WHERE medium = "lithographic"	art_1
SELECT birth_year FROM artist WHERE creation_year = 1884 AND type = "canvas" ORDER BY birth_year ASC LIMIT 1;	art_1
SELECT birth_year FROM artist WHERE creation_year = 1884;	art_1
SELECT T1.FirstName FROM Artist AS T1 JOIN Painting AS T2 ON T1.ArtistID = T2.ArtistID JOIN Gallery AS T3 ON T2.GalleryID = T3.GalleryID WHERE T3.GalleryID = 241 GROUP BY T1.FirstName HAVING COUNT(*) = 1;	art_1
SELECT first_name FROM artist WHERE gallery_id = 241 AND oil_paintings = 1;	art_1
SELECT medium_type , count(*) FROM works GROUP BY medium_type ;	art_1
SELECT medium , count(*) FROM works GROUP BY medium ;	art_1
SELECT medium_type , AVG(height) FROM paintings GROUP BY medium_type ;	art_1
SELECT medium_type , AVG(height) FROM paintings GROUP BY medium_type ;	art_1
SELECT Place , COUNT(*) FROM Painting GROUP BY Place ORDER BY Place ASC LIMIT 10;	art_1
SELECT COUNT(DISTINCT location) FROM painting ORDER BY year ASC LIMIT 10;	art_1
SELECT title FROM paintings WHERE date >= '1910-01-01' AND medium = 'oil' ORDER BY date DESC LIMIT 10;	art_1
SELECT painting_name FROM oil_paintings WHERE creation_date > '1910-01-01' ;	art_1
SELECT T1.id FROM painter AS T1 JOIN painter_gallery AS T2 ON T1.id = T2.painter_id JOIN gallery AS T3 ON T2.gallery_id = T3.id WHERE T3.id = 240 GROUP BY T1.id HAVING count(*) = 1;	art_1
SELECT T1.unique_id FROM painter AS T1 JOIN painting AS T2 ON T1.id = T2.painter_id JOIN gallery AS T3 ON T2.gallery_id = T3.id WHERE T3.id = 240;	art_1
SELECT DISTINCT T1.title FROM painting AS T1 JOIN painting AS T2 ON T1.painting_id = T2.painting_id WHERE T2.height > T1.height ;	art_1
SELECT DISTINCT T1.Title FROM Painting AS T1 JOIN Painting AS T2 ON T1.PaintingID = T2.PaintingID WHERE T2.Height > T1.Height;	art_1
SELECT DISTINCT painting_id FROM paintings WHERE gallery_id = 240 AND painting_date > (SELECT MAX(painting_date) FROM paintings WHERE gallery_id = 240) ;	art_1
SELECT DISTINCT painting_id FROM paintings WHERE painting_id NOT IN (SELECT painting_id FROM paintings WHERE gallery_id = 240) ORDER BY painting_id DESC;	art_1
SELECT id FROM paintings ORDER BY creation_date ASC LIMIT 1;	art_1
SELECT id FROM paintings ORDER BY creation_date ASC LIMIT 1;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Artist_Sculpture AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN Sculpture AS T3 ON T2.Sculpture_ID = T3.Sculpture_ID WHERE T3.Title = "Female" ORDER BY T1.LastName , T1.FirstName ASC;	art_1
SELECT full_name FROM artist WHERE title LIKE '%female%' ORDER BY full_name DESC LIMIT 1;	art_1
SELECT DISTINCT painting_name FROM paintings ORDER BY painting_name ASC;	art_1
SELECT DISTINCT painting_name FROM paintings ORDER BY painting_name ASC;	art_1
SELECT DISTINCT painting_name FROM paintings ORDER BY LENGTH(painting_name) DESC;	art_1
SELECT name FROM paintings ORDER BY height DESC LIMIT 10;	art_1
SELECT name FROM paintings JOIN sculptures ON paintings.id = sculptures.painting_id WHERE year BETWEEN 1900 AND 1950 GROUP BY name;	art_1
SELECT name FROM paintings WHERE date BETWEEN '1900-01-01' AND '1950-12-31' UNION SELECT name FROM sculptures WHERE date BETWEEN '1900-01-01' AND '1950-12-31' ;	art_1
SELECT title FROM painting WHERE artist_id = 222; UNION SELECT title FROM sculpture WHERE artist_id = 222;	art_1
SELECT title FROM painting WHERE artist_id = 222; UNION SELECT title FROM sculpture WHERE artist_id = 222;	art_1
SELECT artist_id FROM artist GROUP BY artist_id ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT artist_id FROM artist GROUP BY artist_id ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT first_name FROM artist ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT first_name FROM sculptors ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT painting_name FROM paintings WHERE width < 600 OR height > 800;	art_1
SELECT title FROM paintings WHERE width < 600 OR height > 800;	art_1
SELECT Location FROM Painting ORDER BY Year ASC LIMIT 10;	art_1
SELECT Location FROM Works WHERE YearPainted < 1885 OR YearPainted > 1930;	art_1
SELECT id FROM paintings WHERE height > 500 AND height < 2000;	art_1
SELECT id FROM paintings WHERE height > 500 AND height < 2000;	art_1
SELECT Location FROM paintings WHERE Medium = "on panel" INTERSECT SELECT Location FROM paintings WHERE Medium = "on canvas" ;	art_1
SELECT location FROM paintings WHERE medium = "on panels" OR medium = "on canvas" ;	art_1
SELECT Location FROM paintings WHERE Year < 1885 OR Year > 1930;	art_1
SELECT Location FROM Painting WHERE PaintedBefore 1885 INTERSECT SELECT Location FROM Painting WHERE PaintedAfter 1930	art_1
SELECT AVG(T1.height), AVG(T1.width) FROM painting AS T1 JOIN gallery AS T2 ON T1.galleryid = T2.galleryid WHERE T2.galleryid = 241 AND T1.medium = "oil" GROUP BY T1.medium ORDER BY AVG(T1.height) DESC LIMIT 10;	art_1
SELECT AVG(T1.height), AVG(T1.width) FROM painting AS T1 JOIN gallery AS T2 ON T1.galleryid = T2.galleryid WHERE T2.galleryid = 241 AND T1.medium = "oil" GROUP BY T1.medium;	art_1
SELECT T1.height , T1.id FROM painting AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T2.birth_date < "1900-01-01" ORDER BY T1.height DESC LIMIT 1;	art_1
SELECT T1.height , T1.id FROM painting AS T1 JOIN painting AS T2 ON T1.id = T2.parent ORDER BY T1.height ASC LIMIT 1;	art_1
SELECT Year , MAX ( Height ) , MAX ( Width ) FROM Painting GROUP BY Year ;	art_1
SELECT Year , MAX ( Height ) , MAX ( Width ) FROM Painting GROUP BY Year ;	art_1
SELECT painter , AVG(height) , AVG(width) FROM paintings GROUP BY painter ORDER BY painter ;	art_1
SELECT painter , AVG(height) , AVG(width) FROM paintings GROUP BY painter ORDER BY painter ;	art_1
SELECT first_name , count(*) FROM artist GROUP BY first_name HAVING count(*) >= 2;	art_1
SELECT first_name , count(*) FROM artist GROUP BY first_name HAVING count(*) >= 2;	art_1
SELECT death_year FROM artist GROUP BY death_year HAVING count(*) <= 3;	art_1
SELECT artist_name , death_date FROM artist ORDER BY death_date DESC LIMIT 10;	art_1
SELECT death_year FROM artist GROUP BY death_year ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT death_date FROM artist WHERE number_of_sculptures = (SELECT min(number_of_sculptures) FROM artist) LIMIT 1;	art_1
SELECT T1.id , T1.height FROM painting AS T1 JOIN gallery AS T2 ON T1.galleryid = T2.galleryid ORDER BY T2.width DESC LIMIT 1;	art_1
SELECT T1.height , T1.id FROM Gallery AS T1 JOIN Painting AS T2 ON T1.id = T2.gallery_id ORDER BY T2.height DESC LIMIT 1;	art_1
SELECT painting_id FROM paintings WHERE gallery_id NOT IN (SELECT gallery_id FROM paintings WHERE painting_id IN (SELECT painting_id FROM paintings WHERE gallery_id = 240)) GROUP BY painting_id ORDER BY painting_id LIMIT 10;	art_1
SELECT T1.id FROM paintings AS T1 JOIN galleries AS T2 ON T1.gallery_id = T2.id WHERE T2.id = 240 ORDER BY T1.created_at ASC LIMIT 1 OFFSET 1;	art_1
SELECT id FROM paintings WHERE height > (SELECT MAX(height) FROM paintings WHERE created > 1900) LIMIT 100;	art_1
SELECT T1.id FROM paintings AS T1 JOIN paintings AS T2 ON T1.id = T2.parent ORDER BY T2.height DESC LIMIT 1 OFFSET 1;	art_1
SELECT artist_name , count(*) FROM paintings WHERE medium = "oil" GROUP BY artist_name ORDER BY count(*) DESC LIMIT 3;	art_1
SELECT artist_name FROM artists WHERE oil_paintings = (SELECT max(oil_paintings) FROM artists) ORDER BY oil_paintings DESC LIMIT 1;	art_1
SELECT T1.painting_id , T1.location , T1.title , T2.year FROM painting AS T1 JOIN order AS T2 ON T1.painting_id = T2.painting_id ORDER BY T2.year ;	art_1
SELECT date_of_creation , id , location , title FROM oil_paintings ORDER BY date_of_creation ASC;	art_1
SELECT year , location , title FROM paintings WHERE height > 1000 ORDER BY title ;	art_1
SELECT year , location , name FROM painting ORDER BY year ASC LIMIT 1000;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Painting AS T2 ON T1.ArtistID = T2.ArtistID INTERSECT SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Sculpture AS T2 ON T1.ArtistID = T2.ArtistID WHERE T2.SculptureWork = NULL;	art_1
SELECT T1.FirstName , T1.LastName FROM Artist AS T1 JOIN Artist_Sculpture AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN Artist_Painting AS T3 ON T2.Artist_ID = T3.Artist_ID WHERE T3.Painting_Type = "Painting" AND T2.Sculpture_Type != "Sculpture" ORDER BY T1.FirstName , T1.LastName ASC;	art_1
SELECT location FROM paintings WHERE date < '1885-01-01' AND medium != 'canvas' GROUP BY location;	art_1
SELECT painting_name FROM paintings WHERE creation_date < "1885-01-01" GROUP BY painting_name HAVING count(*) < 1;	art_1
SELECT count(*) FROM races;	car_road_race
SELECT COUNT(*) FROM races;	car_road_race
SELECT T1.Driver , T1.Team , T1.Race FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID ORDER BY T2.Team ASC;	car_road_race
SELECT driver , team FROM race ORDER BY team ASC;	car_road_race
SELECT T1.DriverName FROM Laps AS T1 JOIN Races AS T2 ON T1.RaceID = T2.RaceID JOIN Drivers AS T3 ON T1.DriverID = T3.DriverID WHERE T2.PolePosition = "Junior Strous" AND T3.DriverName != "Junior Strous" ORDER BY T1.RaceID DESC LIMIT 10;	car_road_race
SELECT Name FROM Drivers WHERE DriverID NOT IN (SELECT DriverID FROM Races WHERE PolePosition = "Junior Strous") ORDER BY Points DESC LIMIT 10;	car_road_race
SELECT name FROM driver ORDER BY age ASC LIMIT 10;	car_road_race
SELECT DISTINCT constructor FROM driver ORDER BY age ASC;	car_road_race
SELECT DISTINCT entrant_type FROM driver WHERE age >= 20;	car_road_race
SELECT DISTINCT Entrant_Type FROM Drivers WHERE Age >= 20;	car_road_race
SELECT MAX(age) , MIN(age) FROM driver;	car_road_race
SELECT MAX(age) , MIN(age) FROM driver;	car_road_race
SELECT COUNT(DISTINCT ENGINE) FROM DRIVER WHERE AGE > 30 AND AGE < 20;	car_road_race
SELECT COUNT(DISTINCT T1.Engine) FROM Driver AS T1 JOIN Engine AS T2 ON T1.EngineID = T2.EngineID WHERE T1.Age > 30 INTERSECT SELECT COUNT(DISTINCT T1.Engine) FROM Driver AS T1 JOIN Engine AS T2 ON T1.EngineID = T2.EngineID WHERE T1.Age < 20;	car_road_race
SELECT name FROM driver ORDER BY name DESC;	car_road_race
SELECT name FROM driver ORDER BY name DESC;	car_road_race
SELECT driver_name , race_name FROM drivers JOIN races ON drivers.race_id = races.race_id;	car_road_race
SELECT driver_name , race_name FROM drivers JOIN races ON drivers.race_id = races.race_id;	car_road_race
SELECT driver_name , count(*) FROM race_driver GROUP BY driver_name;	car_road_race
SELECT driver_name , count(*) FROM race_driver GROUP BY driver_name ;	car_road_race
SELECT Age FROM Drivers ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT age FROM driver ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT name , age FROM drivers WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id IN (SELECT race_id FROM races WHERE race_id	car_road_race
SELECT name , age FROM driver GROUP BY name HAVING count(*) >= 2;	car_road_race
SELECT race_name FROM race WHERE driver_age >= 26;	car_road_race
SELECT race_name FROM race WHERE driver_age >= 26;	car_road_race
SELECT Name FROM Drivers WHERE Constructor NOT = "Bugatti" ;	car_road_race
SELECT Name FROM Drivers WHERE Constructor NOT IN (SELECT Constructor FROM Drivers WHERE Name = "Bugatti") ;	car_road_race
SELECT Constructor , COUNT(*) FROM Drivers GROUP BY Constructor;	car_road_race
SELECT Constructor , COUNT(*) FROM Drivers GROUP BY Constructor;	car_road_race
SELECT engine_type FROM drivers GROUP BY engine_type ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT engine_type FROM engine GROUP BY engine_type ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT DISTINCT engine_type FROM drivers GROUP BY engine_type HAVING count(*) >= 2;	car_road_race
SELECT T1.Engine_Type FROM Drivers AS T1 JOIN Drivers AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Engine_Type HAVING COUNT(*) > 2;	car_road_race
SELECT driver_name FROM drivers WHERE driver_id NOT IN (SELECT driver_id FROM races) ;	car_road_race
SELECT Name FROM Drivers WHERE DriverID NOT IN (SELECT DriverID FROM Races) ORDER BY Name ASC;	car_road_race
SELECT Constructor FROM Drivers WHERE Age < 20 INTERSECT SELECT Constructor FROM Drivers WHERE Age > 30;	car_road_race
SELECT T1.Constructor FROM Drivers AS T1 JOIN Drivers AS T2 ON T1.DriverID = T2.DriverID WHERE T2.DriverAge < 20 INTERSECT SELECT T1.Constructor FROM Drivers AS T1 JOIN Drivers AS T2 ON T1.DriverID = T2.DriverID WHERE T2.DriverAge >= 30;	car_road_race
SELECT team_name FROM teams GROUP BY team_name HAVING count(*) > 1;	car_road_race
SELECT Team FROM races GROUP BY Team HAVING count(*) > 1;	car_road_race
SELECT Name FROM Drivers WHERE DriverName IN (SELECT DriverName FROM Drivers WHERE DriverName = "James Hinchcliffe") INTERSECT SELECT DriverName FROM Drivers WHERE DriverName IN (SELECT DriverName FROM Drivers WHERE DriverName = "Carl Skerlong")	car_road_race
SELECT Name FROM Drivers WHERE PolePosition = 'James Hinchcliffe' INTERSECT SELECT Name FROM Drivers WHERE PolePosition = 'Carl Skerlong' ;	car_road_race
SELECT Name FROM Drivers WHERE PolePosition NOT IN ('James Hinchcliffe') LIMIT 1000;	car_road_race
SELECT Name FROM Drivers EXCEPT SELECT DriverName FROM Drivers WHERE DriverName = "James Hinchcliffe" ;	car_road_race
SELECT count(*) FROM language;	country_language
SELECT count(*) FROM languages;	country_language
SELECT name FROM languages ORDER BY name ASC;	country_language
SELECT language FROM languages ORDER BY language ASC;	country_language
SELECT name FROM languages WHERE word LIKE '%ish%' LIMIT 100;	country_language
SELECT name FROM languages WHERE substring(name, 1, 4) LIKE '%ish%' ;	country_language
SELECT name FROM countries ORDER BY overall_score DESC;	country_language
SELECT name FROM countries ORDER BY overall_score DESC;	country_language
SELECT avg(justice_score) FROM countries;	country_language
SELECT avg(justice_score) FROM countries;	country_language
SELECT MAX(health_score) , MIN(health_score) FROM countries WHERE country_name != "Norway" GROUP BY country_name ;	country_language
SELECT MAX(T1.health_score) , MIN(T1.health_score) FROM countries AS T1 JOIN countries AS T2 ON T1.country_id = T2.country_id WHERE T2.country_name != "Norway" GROUP BY T1.country_id ;	country_language
SELECT COUNT(DISTINCT Language) FROM OfficialLanguages;	country_language
SELECT COUNT(DISTINCT Language) FROM Official_Languages;	country_language
SELECT name FROM countries ORDER BY education_score DESC;	country_language
SELECT country FROM countries ORDER BY education DESC LIMIT 10;	country_language
SELECT name FROM countries ORDER BY score DESC LIMIT 1;	country_language
SELECT Country FROM Politics ORDER BY Politics DESC LIMIT 1;	country_language
SELECT country , official_language FROM countries ORDER BY country ;	country_language
SELECT country , language FROM countries ORDER BY country ;	country_language
SELECT official_language , count(*) FROM languages GROUP BY official_language;	country_language
SELECT language , count(*) FROM official_languages GROUP BY language ORDER BY count(*) DESC;	country_language
SELECT language FROM languages GROUP BY language ORDER BY count(*) DESC LIMIT 1;	country_language
SELECT official_language FROM languages ORDER BY count(*) DESC LIMIT 1;	country_language
SELECT Language FROM Official_Languages GROUP BY Language HAVING count(*) >= 2;	country_language
SELECT language FROM official_languages GROUP BY language HAVING count(*) > 1;	country_language
SELECT AVG(T1.Score) FROM Country AS T1 JOIN OfficialLanguage AS T2 ON T1.CountryID = T2.CountryID WHERE T2.Language = "English" GROUP BY T1.CountryID;	country_language
SELECT AVG(T1.Score) FROM T1 INNER JOIN T2 ON T1.CountryID = T2.CountryID INNER JOIN T3 ON T2.CountryID = T3.CountryID INNER JOIN T4 ON T3.CountryID = T4.CountryID INNER JOIN T5 ON T4.CountryID = T5.CountryID INNER JOIN T6 ON T5.CountryID = T6.CountryID INNER JOIN T7 ON T6.CountryID = T7.CountryID INNER JOIN T8 ON T7.CountryID = T8.CountryID INNER JOIN T9 ON T8.CountryID = T9.CountryID INNER JOIN T10 ON T9.CountryID = T10.CountryID INNER JOIN T11 ON T10.CountryID = T11.CountryID INNER JOIN T12 ON T11.CountryID = T12.CountryID INNER JOIN T13 ON T12.CountryID = T13.CountryID INNER JOIN T14 ON T13.CountryID =	country_language
SELECT language FROM official_languages GROUP BY language ORDER BY count(*) DESC LIMIT 3;	country_language
SELECT language FROM official_languages GROUP BY language ORDER BY count(*) DESC LIMIT 3;	country_language
SELECT official_language , avg(overall_score) FROM countries GROUP BY official_language ORDER BY avg(overall_score) DESC;	country_language
SELECT Official_Language FROM Official_Language ORDER BY AVG(Overall_Scores) DESC LIMIT 10;	country_language
SELECT Country FROM Languages GROUP BY Country ORDER BY count(*) DESC LIMIT 1;	country_language
SELECT Country FROM Languages GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;	country_language
SELECT Language FROM Languages WHERE Language NOT IN (SELECT OfficialLanguage FROM Countries) GROUP BY Language ORDER BY Language ASC;	country_language
SELECT Language FROM Languages GROUP BY Language HAVING count(*) = 0;	country_language
SELECT country_name FROM countries WHERE language_code NOT IN (SELECT language_code FROM languages) ORDER BY country_name ASC;	country_language
SELECT T1.CountryName FROM Country AS T1 JOIN Language AS T2 ON T1.CountryID = T2.CountryID GROUP BY T1.CountryName HAVING count(*) = 0;	country_language
SELECT T1.name FROM language AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.overall_score > 95 INTERSECT SELECT T1.name FROM language AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.overall_score < 90	country_language
SELECT Language FROM Languages WHERE Overall_Score > 95 AND Overall_Score < 90;	country_language
SELECT country , city FROM addresses;	real_estate_rentals
SELECT country , city , address FROM Address GROUP BY country , city ;	real_estate_rentals
SELECT state FROM properties GROUP BY state;	real_estate_rentals
SELECT state_province FROM properties GROUP BY state_province;	real_estate_rentals
SELECT description FROM features WHERE name = "rooftop" LIMIT 1;	real_estate_rentals
SELECT description FROM features WHERE feature_name = 'rooftop' ;	real_estate_rentals
SELECT T1.feature_name , T1.feature_description FROM property AS T1 JOIN property_feature AS T2 ON T1.property_id = T2.property_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT feature_name , feature_description FROM property_features GROUP BY feature_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT min(rooms) FROM properties;	real_estate_rentals
SELECT min(room_count) FROM properties;	real_estate_rentals
SELECT COUNT(*) FROM property WHERE parking_lot = 1 OR garage = 1;	real_estate_rentals
SELECT count(*) FROM properties WHERE parking_lots = 1 OR garage = 1;	real_estate_rentals
SELECT age_category FROM users WHERE description LIKE '%Mother%' ;	real_estate_rentals
SELECT age_category FROM users WHERE description LIKE '%Mother%' GROUP BY age_category;	real_estate_rentals
SELECT first_name FROM users GROUP BY first_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT first_name FROM users GROUP BY first_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT AVG(room_count) FROM properties WHERE gardens = 1;	real_estate_rentals
SELECT AVG(rooms) FROM properties WHERE garden_features = 1;	real_estate_rentals
SELECT city FROM properties WHERE swimming_pool IS NOT NULL;	real_estate_rentals
SELECT city FROM pool WHERE city IN (SELECT city FROM property WHERE swimming_pools = 1) ;	real_estate_rentals
SELECT id , price FROM vendor ORDER BY price LIMIT 1;	real_estate_rentals
SELECT T1.PropertyID , T1.Price FROM Property AS T1 JOIN Vendor AS T2 ON T1.VendorID = T2.VendorID WHERE T2.RequestedPrice = ( SELECT MIN(RequestedPrice) FROM Property AS T3 WHERE T3.VendorID = T2.VendorID ) ;	real_estate_rentals
SELECT AVG(rooms) FROM properties;	real_estate_rentals
SELECT avg(rooms) FROM properties;	real_estate_rentals
SELECT COUNT(DISTINCT room_size) FROM rooms;	real_estate_rentals
SELECT count(DISTINCT room_size) FROM rooms;	real_estate_rentals
SELECT user_id , COUNT(*) FROM search GROUP BY user_id HAVING COUNT(*) >= 2;	real_estate_rentals
SELECT user_id , COUNT(*) FROM search_history GROUP BY user_id HAVING COUNT(*) >= 2;	real_estate_rentals
SELECT MAX(search_time) FROM search_history WHERE user_id = (SELECT user_id FROM users WHERE username = 'user_name') ORDER BY search_time DESC LIMIT 1;	real_estate_rentals
SELECT strftime('%Y-%m-%d %H:%i:%s', search_time) FROM searches ORDER BY search_time DESC LIMIT 1;	real_estate_rentals
SELECT time , content FROM user_search ORDER BY content DESC LIMIT 10;	real_estate_rentals
SELECT search_string , time_stamp FROM user_search ORDER BY search_string DESC;	real_estate_rentals
SELECT zip_code FROM properties WHERE user_zip_code NOT IN (SELECT user_zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (	real_estate_rentals
SELECT zip_code FROM properties WHERE user_zip_code NOT IN (SELECT user_zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (SELECT zip_code FROM properties WHERE owner_zip_code IN (SELECT zip_code FROM users WHERE user_zip_code IN (	real_estate_rentals
SELECT category , user_id FROM users GROUP BY category , user_id HAVING count(*) = 1;	real_estate_rentals
SELECT user_id , category_code FROM users GROUP BY user_id HAVING count(*) = 1;	real_estate_rentals
SELECT age_range_category FROM users WHERE user_id = (SELECT user_id FROM searches ORDER BY date DESC LIMIT 1) LIMIT 1;	real_estate_rentals
SELECT age_category FROM users ORDER BY date_of_birth ASC LIMIT 1;	real_estate_rentals
SELECT first_name , last_name FROM users ORDER BY first_name ASC ;	real_estate_rentals
SELECT T1.FirstName , T1.LastName FROM Employees AS T1 JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.SeniorCitizen = 1 ORDER BY T1.FirstName ASC;	real_estate_rentals
SELECT COUNT(*) FROM buyers;	real_estate_rentals
SELECT COUNT(*) FROM orders WHERE buyer_id IN (SELECT buyer_id FROM buyers GROUP BY buyer_id HAVING COUNT(*) > 1)	real_estate_rentals
SELECT registration_date FROM users WHERE login_name = "ratione" LIMIT 1;	real_estate_rentals
SELECT registration_date FROM users WHERE login_name = "ratione" ;	real_estate_rentals
SELECT first_name , middle_name , last_name , login_name FROM seller WHERE seller_value = 1;	real_estate_rentals
SELECT T1.login_name , T1.first_name , T1.middle_name , T1.last_name , T1.username , T1.password FROM users AS T1 JOIN sellers AS T2 ON T1.user_id = T2.user_id GROUP BY T1.login_name ORDER BY T1.login_name ASC LIMIT 10;	real_estate_rentals
SELECT Building , Street , City FROM SeniorCitizens;	real_estate_rentals
SELECT Building , Street , City FROM Address WHERE SeniorCitizen = 1;	real_estate_rentals
SELECT count(*) FROM properties WHERE features >= 2;	real_estate_rentals
SELECT count(*) FROM properties WHERE num_features >= 2;	real_estate_rentals
SELECT property_id , COUNT(*) FROM photos GROUP BY property_id ;	real_estate_rentals
SELECT property_id , count(*) FROM property_photos GROUP BY property_id ;	real_estate_rentals
SELECT owner_id , count(*) FROM photos GROUP BY owner_id ;	real_estate_rentals
SELECT owner_id , COUNT(*) FROM property_photos GROUP BY owner_id HAVING COUNT(*) > 1;	real_estate_rentals
SELECT MAX(price) FROM properties WHERE owner_type = 'single mother' OR owner_type = 'student' GROUP BY owner_type;	real_estate_rentals
SELECT MAX(T1.Price) FROM Properties AS T1 JOIN Owners AS T2 ON T1.OwnerID = T2.OwnerID WHERE T2.Sex = "Single" OR T2.Sex = "Student" GROUP BY T2.Sex;	real_estate_rentals
SELECT datestamp , property_name FROM property_history ORDER BY datestamp;	real_estate_rentals
SELECT datestamp , property_name FROM property_history ORDER BY datestamp;	real_estate_rentals
SELECT description , code FROM property_type ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT property_type , description FROM property_type GROUP BY property_type ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT * FROM age_category WHERE age_category_code = 'Over 60' ;	real_estate_rentals
SELECT category_description FROM age_category WHERE age_category = 'Over 60' ;	real_estate_rentals
SELECT room_size , count(*) FROM rooms GROUP BY room_size ;	real_estate_rentals
SELECT room_size , count(*) FROM rooms GROUP BY room_size ;	real_estate_rentals
SELECT country FROM users WHERE first_name = "Robbie" LIMIT 1;	real_estate_rentals
SELECT Country FROM Users WHERE FirstName = "Robbie" LIMIT 1;	real_estate_rentals
SELECT T1.FirstName , T1.LastName , T1.Address , T1.City , T1.State , T1.Zip , T1.Home , T1.Bedroom , T1.Bathrooms , T1.Floor , T1.FloorType , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T1.FloorNumber , T	real_estate_rentals
SELECT full_name FROM users WHERE property_id IN (SELECT id FROM properties WHERE owner_id IN (SELECT id FROM users)) ;	real_estate_rentals
SELECT T1.search_content FROM users AS T1 JOIN property AS T2 ON T1.user_id = T2.user_id WHERE T2.property_type = "single" GROUP BY T1.user_id HAVING count(*) = 0;	real_estate_rentals
SELECT search_string FROM users WHERE user_id NOT IN (SELECT user_id FROM properties) GROUP BY search_string HAVING COUNT(*) = 0;	real_estate_rentals
SELECT last_name , id FROM users GROUP BY last_name , id HAVING count(*) >= 2 AND count(*) <= 2 ;	real_estate_rentals
SELECT last_name , id FROM users GROUP BY last_name , id HAVING count(*) <= 2 AND count(*) >= 2;	real_estate_rentals
SELECT COUNT(*) FROM bikes WHERE weight > 780;	bike_racing
SELECT product_name , weight FROM bikes ORDER BY price ASC;	bike_racing
SELECT heat , name , nation FROM cyclist ORDER BY heat ;	bike_racing
SELECT MAX(weight) , MIN(weight) FROM bikes;	bike_racing
SELECT avg(price) FROM bikes WHERE material = "Carbon CC" ;	bike_racing
SELECT name , result FROM cyclist WHERE country NOT LIKE 'Russia' ;	bike_racing
SELECT DISTINCT id , product_name FROM bikes WHERE purchase_year > 2015;	bike_racing
SELECT bike_id, bike_name FROM bikes WHERE bike_id IN (SELECT bike_id FROM purchases GROUP BY bike_id HAVING count(*) >= 4) ORDER BY bike_id;	bike_racing
SELECT id , name FROM cyclist ORDER BY count(*) DESC LIMIT 1;	bike_racing
SELECT DISTINCT T1.product_name FROM bikes AS T1 JOIN cyclists AS T2 ON T1.cyclist_id = T2.cyclist_id WHERE T2.country = 'Russia' OR T2.country = 'Great Britain' GROUP BY T1.product_name;	bike_racing
SELECT COUNT(DISTINCT T1.Level) FROM Cyclist AS T1 JOIN Heat AS T2 ON T1.CyclistID = T2.CyclistID GROUP BY T1.Level ORDER BY COUNT(DISTINCT T1.Level) DESC LIMIT 1;	bike_racing
SELECT COUNT(*) FROM cyclist WHERE YEAR(bike_year) > 2015 GROUP BY YEAR(bike_year) HAVING COUNT(*) = 0;	bike_racing
SELECT DISTINCT T1.bike_name FROM bikes AS T1 JOIN cyclists AS T2 ON T1.bike_id = T2.bike_id WHERE T2.result > '4:21.558' ORDER BY T1.bike_name LIMIT 10;	bike_racing
SELECT T1.Name , T1.Price FROM Cyclist AS T1 JOIN Bike AS T2 ON T1.CyclistID = T2.CyclistID WHERE T1.Name = 'Bradley Wiggins' INTERSECT SELECT T1.Name , T1.Price FROM Cyclist AS T1 JOIN Bike AS T2 ON T1.CyclistID = T2.CyclistID WHERE T1.Name = 'Antonio Tauler' ;	bike_racing
SELECT T1.Name , T1.Nation , T1.Result FROM Cyclist AS T1 JOIN Bike AS T2 ON T1.BikeID = T2.BikeID WHERE T2.BikeID IS NULL;	bike_racing
SELECT bike_name FROM bikes WHERE material LIKE '%fiber%' ;	bike_racing
SELECT cyclist_id , count(*) FROM bikes GROUP BY cyclist_id ORDER BY cyclist_id ;	bike_racing
SELECT Flavor , Price FROM Cake ORDER BY Price DESC LIMIT 1;	bakery_1
SELECT id , flavor FROM cakes ORDER BY price DESC LIMIT 1;	bakery_1
SELECT T1.flavor , T1.price FROM cookies AS T1 JOIN flavors AS T2 ON T1.flavor_id = T2.flavor_id ORDER BY T1.price LIMIT 1;	bakery_1
SELECT id , flavor FROM cookies ORDER BY price ASC LIMIT 1;	bakery_1
SELECT `id` FROM `goods` WHERE `flavor` = 'apple' ;	bakery_1
SELECT id FROM fruit WHERE flavor = "apple" ;	bakery_1
SELECT id FROM goods WHERE price < 3;	bakery_1
SELECT `id` FROM `goods` WHERE `cost` < 3;	bakery_1
SELECT DISTINCT customer_id FROM cakes WHERE flavor = "lemon" GROUP BY customer_id;	bakery_1
SELECT DISTINCT customer_id FROM cakes WHERE flavor = "lemon" GROUP BY customer_id;	bakery_1
SELECT type_of_food , count(*) FROM orders GROUP BY type_of_food ;	bakery_1
SELECT Food , COUNT(*) FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID GROUP BY Food;	bakery_1
SELECT customer_id FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY order_date HAVING count(*) >= 15) ORDER BY count(*) DESC LIMIT 10;	bakery_1
SELECT customer_id FROM receipts GROUP BY customer_id HAVING count(*) >= 15;	bakery_1
SELECT last_name FROM customers GROUP BY last_name HAVING count(*) > 10;	bakery_1
SELECT last_name FROM customers GROUP BY last_name HAVING count(*) > 10;	bakery_1
SELECT count(*) FROM Bakery WHERE type = "Cake" ;	bakery_1
SELECT COUNT(DISTINCT T1.type) FROM bakery AS T1 JOIN cake AS T2 ON T1.id = T2.bakery_id;	bakery_1
SELECT Flavor FROM Croissant;	bakery_1
SELECT flavor FROM croissant;	bakery_1
SELECT DISTINCT ItemName FROM Orders WHERE CustomerID = 15;	bakery_1
SELECT DISTINCT item FROM purchases WHERE customer_id = 15;	bakery_1
SELECT type_of_food , avg(price) , max(price) , min(price) FROM food GROUP BY type_of_food ;	bakery_1
SELECT Food , AVG(Price) , MIN(Price) , MAX(Price) FROM Orders GROUP BY Food ;	bakery_1
SELECT receipt_number FROM orders WHERE cake = "Cake" AND cookie = "Cookie" ;	bakery_1
SELECT receipt_number FROM orders WHERE cake_id IN (SELECT cake_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cookie_id IN (SELECT cookie_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cake_id IN (SELECT cake_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cookie_id IN (SELECT cookie_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cake_id IN (SELECT cake_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cookie_id IN (SELECT cookie_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cake_id IN (SELECT cake_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cookie_id IN (SELECT cookie_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cake_id IN (SELECT cake_id FROM orders WHERE instance_id IN (SELECT instance_id FROM orders WHERE cookie_id IN (SELECT cookie_id FROM orders WHERE instance_id IN (	bakery_1
SELECT receipt_number FROM Receipt WHERE customer_last_name = "LOGAN" AND product_name = "Croissant" ;	bakery_1
SELECT receipt_number FROM orders WHERE customer_last_name = "Logan" AND order_type = "Croissant" ORDER BY receipt_number DESC LIMIT 1;	bakery_1
SELECT receipt_number , date FROM receipt ORDER BY price DESC LIMIT 1;	bakery_1
SELECT receipt_number , date FROM receipt ORDER BY price DESC LIMIT 1;	bakery_1
SELECT item FROM orders GROUP BY item ORDER BY count(*) LIMIT 1;	bakery_1
SELECT item_name FROM purchases GROUP BY item_name ORDER BY count(*) LIMIT 1;	bakery_1
SELECT food_type , count(*) FROM goods GROUP BY food_type ;	bakery_1
SELECT Food_Type , COUNT(*) FROM Orders GROUP BY Food_Type;	bakery_1
SELECT food_type , AVG(price) FROM orders GROUP BY food_type ;	bakery_1
SELECT food_type , AVG(price) FROM orders GROUP BY food_type ;	bakery_1
SELECT T1.id FROM T1 WHERE T1.flavor = "Apricot" AND T1.price < 5 ;	bakery_1
SELECT T1.GOODS_ID FROM GOODS AS T1 JOIN GOODS_FLAVOR AS T2 ON T1.GOODS_ID = T2.GOODS_ID WHERE T2.FLAVOR = "Apricot" AND T1.PRICE < 5 GROUP BY T1.GOODS_ID;	bakery_1
SELECT Flavor FROM cakes WHERE Price > 10;	bakery_1
SELECT Flavor FROM cakes WHERE Price > 10;	bakery_1
SELECT DISTINCT id , price FROM goods WHERE price < ( SELECT avg(price) FROM goods ) ;	bakery_1
SELECT DISTINCT id , price FROM good ORDER BY price LIMIT 10;	bakery_1
SELECT DISTINCT id FROM goods WHERE price < (SELECT price FROM goods WHERE type = "Tart") GROUP BY id;	bakery_1
SELECT DISTINCT id FROM goods WHERE cost < ( SELECT MIN(cost) FROM goods ) ;	bakery_1
SELECT DISTINCT RECEIPT_NUMBER FROM RECEIPT WHERE RECEIPT_PRICE > 13;	bakery_1
SELECT DISTINCT RECEIPT_NUMBER FROM RECEIPT WHERE RECEIPT_PRICE > 13;	bakery_1
SELECT date FROM purchases WHERE good_cost > 15 ORDER BY date LIMIT 1;	bakery_1
SELECT purchase_date FROM purchases WHERE good_cost > 15 ORDER BY purchase_date ASC LIMIT 1;	bakery_1
SELECT `id` FROM `goods` WHERE `id` IN (SELECT `id` FROM `goods` GROUP BY `id` HAVING COUNT(*) > 1) ORDER BY `id` ASC;	bakery_1
SELECT id FROM goods WHERE id LIKE '%APP%' ;	bakery_1
SELECT * FROM good WHERE id = "70" ORDER BY price DESC LIMIT 1;	bakery_1
SELECT id , price FROM good WHERE id = "70" ;	bakery_1
SELECT last_name FROM customers ORDER BY last_name ASC;	bakery_1
SELECT last_name FROM customers ORDER BY last_name ASC;	bakery_1
SELECT good_id FROM good ORDER BY good_id DESC LIMIT 10;	bakery_1
SELECT DISTINCT good_id FROM orders ORDER BY good_id DESC;	bakery_1
SELECT T1.ReceiptID , T1.ReceiptDate , T1.CustomerID , T1.Fruit , T1.Flavor , T1.Price , T1.Quantity , T2.Fruit , T2.Flavor , T2.Price , T2.Quantity FROM Receipt AS T1 JOIN Customer AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Fruit = "Apple" OR T1.CustomerID = 12 ORDER BY T1.ReceiptID ;	bakery_1
SELECT T1.ReceiptNumber FROM Receipt AS T1 JOIN Pie AS T2 ON T1.PieID = T2.PieID WHERE T1.CustomerID = 12 OR T2.Flavor = "Apple" GROUP BY T1.ReceiptNumber;	bakery_1
SELECT date FROM receipts ORDER BY date DESC LIMIT 1; SELECT date FROM receipts ORDER BY date DESC LIMIT 1;	bakery_1
SELECT receipt_number , date FROM receipt ORDER BY date DESC LIMIT 1;	bakery_1
SELECT * FROM receipt ORDER BY date ASC LIMIT 10;	bakery_1
SELECT receipt_number FROM receipts WHERE price > 10 ORDER BY date ASC LIMIT 10;	bakery_1
SELECT id FROM cookies WHERE cost BETWEEN 3 AND 7; UNION SELECT id FROM cakes WHERE cost BETWEEN 3 AND 7;	bakery_1
SELECT id FROM cookies WHERE cost BETWEEN 3 AND 7 GROUP BY id; SELECT id FROM cakes WHERE cost BETWEEN 3 AND 7 GROUP BY id;	bakery_1
SELECT first_name , last_name FROM customers ORDER BY visit_date ASC LIMIT 1;	bakery_1
SELECT full_name FROM customers ORDER BY visit_date ASC LIMIT 1;	bakery_1
SELECT AVG(price) FROM goods WHERE flavor = "Blackberry" OR flavor = "Blueberry" ;	bakery_1
SELECT AVG(price) FROM products WHERE flavor = 'blackberry' OR flavor = 'blueberry' ;	bakery_1
SELECT T1.price FROM T1 WHERE T1.flavor = "cheese" ORDER BY T1.price ASC LIMIT 1;	bakery_1
SELECT T1.Name , T1.Price , T2.Name , T2.Price , T3.Name , T3.Price , T4.Name , T4.Price , T5.Name , T5.Price , T6.Name , T6.Price , T7.Name , T7.Price , T8.Name , T8.Price , T9.Name , T9.Price , T10.Name , T10.Price , T11.Name , T11.Price , T12.Name , T12.Price , T13.Name , T13.Price , T14.Name , T14.Price , T15.Name , T15.Price , T16.Name , T16.Price , T17.Name , T17.Price , T18.Name , T18.Price , T	bakery_1
SELECT Flavor , MAX(Price) , MIN(Price) , AVG(Price) FROM Goods GROUP BY Flavor ORDER BY Price DESC LIMIT 1;	bakery_1
SELECT Flavor , MAX(Price) , MIN(Price) , AVG(Price) FROM Products GROUP BY Flavor ;	bakery_1
SELECT Food_Type , MIN(Price) , MAX(Price) FROM Goods GROUP BY Food_Type ORDER BY Food_Type ;	bakery_1
SELECT min(price), max(price) FROM food_goods ORDER BY price;	bakery_1
SELECT date , SUM(receipts) as total_recs FROM orders GROUP BY date ORDER BY total_recs DESC LIMIT 3;	bakery_1
SELECT Date FROM Receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT customer_name , count(*) FROM orders GROUP BY customer_name ORDER BY count(*) DESC LIMIT 1;	bakery_1
SELECT customer_id , COUNT(*) FROM orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;	bakery_1
SELECT DATE, COUNT(DISTINCT customer_id) FROM visits GROUP BY DATE;	bakery_1
SELECT date , count(*) FROM customers GROUP BY date;	bakery_1
SELECT first_name , last_name FROM customers WHERE flavor = "Apple Tart" ;	bakery_1
SELECT full_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN tarts ON order_items.ingredient_id = tarts.ingredient_id WHERE tarts.flavor = "apple" GROUP BY full_name;	bakery_1
SELECT T1.cookie_id FROM cookies AS T1 JOIN croissants AS T2 ON T1.cookie_id = T2.cookie_id WHERE T1.price < T2.price GROUP BY T1.cookie_id HAVING count(*) = 1;	bakery_1
SELECT T1.coffee_id FROM coffees AS T1 JOIN croissants AS T2 ON T1.coffee_id = T2.coffee_id WHERE T2.price < T1.price GROUP BY T1.coffee_id HAVING count(*) = 1;	bakery_1
SELECT id FROM cakes WHERE price >= ( SELECT avg(price) FROM cakes ) ;	bakery_1
SELECT id FROM cakes WHERE price >= (SELECT avg(price) FROM cakes) ;	bakery_1
SELECT id FROM goods WHERE price > 2 * (SELECT avg(price) FROM goods) ;	bakery_1
SELECT T1.GoodsID FROM T1 INNER JOIN T2 ON T1.GoodsID = T2.GoodsID GROUP BY T1.GoodsID HAVING AVG(T1.Price) > (SELECT AVG(T2.Price) FROM T2) ORDER BY AVG(T1.Price) DESC LIMIT 10;	bakery_1
SELECT id , flavor , type FROM orders ORDER BY price DESC;	bakery_1
SELECT id , flavor , food_type FROM goods ORDER BY price ;	bakery_1
SELECT id , flavor FROM cakes ORDER BY flavor ;	bakery_1
SELECT id , flavor FROM cakes ORDER BY flavor;	bakery_1
SELECT item_name FROM items WHERE flavor = "chocolate" GROUP BY item_name HAVING count(*) <= 10;	bakery_1
SELECT item_name FROM items WHERE flavor = "chocolate" GROUP BY item_name HAVING count(*) <= 10;	bakery_1
SELECT Flavor FROM Cake WHERE Flavor NOT IN (SELECT Flavor FROM Tart) ;	bakery_1
SELECT Flavor FROM Cakes EXCEPT SELECT Flavor FROM Tart;	bakery_1
SELECT name , count(*) FROM bakery_goods GROUP BY name ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT item_name , count(*) FROM bakery_items GROUP BY item_name ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT customer_id FROM customers GROUP BY customer_id HAVING SUM(amount) > 150;	bakery_1
SELECT customer_id FROM customers GROUP BY customer_id HAVING SUM(amount) > 150;	bakery_1
SELECT customer_id FROM customers GROUP BY customer_id HAVING AVG(spendings) > 5;	bakery_1
SELECT T1.Good , COUNT(*) , AVG(T1.Spend) FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Good ORDER BY AVG(T1.Spend) DESC LIMIT 10;	bakery_1
SELECT date FROM sales GROUP BY date HAVING SUM(amount) > 100;	bakery_1
SELECT sale_date FROM sales GROUP BY sale_date HAVING SUM(amount) > 100;	bakery_1
SELECT count(*) FROM drivers;	car_racing
SELECT count(*) FROM driver;	car_racing
SELECT make , COUNT(*) FROM drivers GROUP BY make HAVING SUM(points) > 150;	car_racing
SELECT make , count(*) FROM drivers GROUP BY make HAVING count(*) > 150;	car_racing
SELECT make , AVG(age) FROM driver GROUP BY make;	car_racing
SELECT make , AVG(age) FROM driver GROUP BY make ;	car_racing
SELECT AVG(Laps) FROM Drivers WHERE Age < 20;	car_racing
SELECT AVG(laps) FROM drivers WHERE age < 20;	car_racing
SELECT T1.manager , T1.sponsor FROM Team AS T1 JOIN TeamManager AS T2 ON T1.teamid = T2.teamid JOIN Sponsor AS T3 ON T2.sponsorid = T3.sponsorid ORDER BY T1.carowners;	car_racing
SELECT T1.manager , T1.sponsor , T2.car_owner FROM Team AS T1 JOIN Sponsor AS T2 ON T1.sponsor_id = T2.sponsor_id ORDER BY T1.car_owner ;	car_racing
SELECT make FROM team GROUP BY make HAVING count(*) > 1;	car_racing
SELECT make FROM Team GROUP BY make HAVING count(*) > 1;	car_racing
SELECT T1.Make FROM Team AS T1 JOIN TeamOwner AS T2 ON T1.TeamID = T2.TeamID JOIN CarOwner AS T3 ON T2.OwnerID = T3.OwnerID WHERE T3.Name = "Buddy Arrington" GROUP BY T1.Make;	car_racing
SELECT make FROM Team WHERE car_owner = "Buddy Arrington" LIMIT 1;	car_racing
SELECT MAX(points) , MIN(points) FROM drivers;	car_racing
SELECT MAX(Drivers.Points) , MIN(Drivers.Points) FROM Drivers;	car_racing
SELECT count(*) FROM drivers WHERE points < 150;	car_racing
SELECT count(*) FROM drivers WHERE points < 150;	car_racing
SELECT driver_name FROM drivers ORDER BY age ASC;	car_racing
SELECT driver_name FROM drivers ORDER BY age ASC;	car_racing
SELECT driver_name FROM driver ORDER BY points DESC LIMIT 10;	car_racing
SELECT driver_name FROM drivers ORDER BY points DESC;	car_racing
SELECT Name , Country FROM Drivers;	car_racing
SELECT name , country FROM driver;	car_racing
SELECT MAX(points) FROM drivers WHERE country = "Dublin" ORDER BY points DESC LIMIT 1;	car_racing
SELECT MAX(points) FROM drivers WHERE country = "Dublin" ORDER BY points DESC LIMIT 1;	car_racing
SELECT AVG(age) FROM driver WHERE native_language = "English" GROUP BY country;	car_racing
SELECT AVG(age) FROM Drivers WHERE country = "English" GROUP BY country;	car_racing
SELECT Country FROM Drivers WHERE Points > 150;	car_racing
SELECT Country FROM Drivers WHERE Points > 150 GROUP BY Country HAVING count(*) > 1;	car_racing
SELECT Capital FROM Drivers WHERE Points = (SELECT MAX(Points) FROM Drivers) ORDER BY Capital LIMIT 1;	car_racing
SELECT capital , country FROM driver ORDER BY points DESC LIMIT 1;	car_racing
SELECT make , count(*) FROM driver GROUP BY make;	car_racing
SELECT make , count(*) FROM driver GROUP BY make;	car_racing
SELECT make FROM drivers GROUP BY make ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT make FROM drivers GROUP BY make ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT make FROM drivers GROUP BY make HAVING count(*) >= 3;	car_racing
SELECT make FROM drivers GROUP BY make HAVING count(*) >= 3;	car_racing
SELECT T1.TeamName FROM Team AS T1 JOIN Driver AS T2 ON T1.TeamID = T2.TeamID GROUP BY T1.TeamName HAVING COUNT(T2.DriverID) = 0;	car_racing
SELECT T2.TeamName FROM Drivers AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID WHERE T1.DriverID IS NULL;	car_racing
SELECT Country FROM Drivers WHERE Make = "Dodge" INTERSECT SELECT Country FROM Drivers WHERE Make = "Chevrolet" ;	car_racing
SELECT DISTINCT Country FROM Drivers WHERE Make = "Dodge" INTERSECT SELECT DISTINCT Country FROM Drivers WHERE Make = "Chevrolet" ;	car_racing
SELECT SUM(points) , AVG(points) FROM drivers;	car_racing
SELECT SUM(points) , AVG(points) FROM drivers;	car_racing
SELECT country FROM driver GROUP BY country HAVING count(*) = 0;	car_racing
SELECT Country FROM Drivers WHERE Country NOT IN (SELECT Country FROM Drivers) GROUP BY Country;	car_racing
SELECT T1.Manager , T1.Sponsor FROM Team AS T1 JOIN Driver AS D ON T1.TeamID = D.TeamID GROUP BY T1.Manager , T1.Sponsor ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT T1.manager , T1.sponsor FROM team AS T1 JOIN driver AS T2 ON T1.teamid = T2.teamid GROUP BY T1.manager ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT T1.Manager , T1.CarOwner FROM Team AS T1 JOIN Driver AS D ON T1.DriverID = D.DriverID GROUP BY T1.Manager , T1.CarOwner HAVING count(*) >= 2;	car_racing
SELECT T1.TeamName , T1.Manager , T1.CarOwner FROM Drivers AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID INTERSECT SELECT T1.TeamName , T1.Manager , T1.CarOwner FROM Drivers AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID WHERE T1.TeamID = ( SELECT TeamID FROM Drivers GROUP BY TeamID HAVING count(*) = 2 ) ;	car_racing
SELECT count(*) FROM institution;	institution_sports
SELECT count(*) FROM institution;	institution_sports
SELECT name FROM institution ORDER BY name ASC;	institution_sports
SELECT name FROM institution ORDER BY name ASC;	institution_sports
SELECT institution_name FROM institution ORDER BY founded_year ASC;	institution_sports
SELECT name FROM institution ORDER BY year_of_founding DESC;	institution_sports
SELECT T1.City , T1.Province FROM Institution AS T1 JOIN City AS T2 ON T1.CityID = T2.CityID JOIN Province AS T3 ON T1.ProvinceID = T3.ProvinceID;	institution_sports
SELECT city , province FROM institutions;	institution_sports
SELECT MAX(enrollment) , MIN(enrollment) FROM institutions;	institution_sports
SELECT MAX(enrollment) , MIN(enrollment) FROM institutions;	institution_sports
SELECT Affiliation FROM Institution WHERE City != "Vancouver" GROUP BY Affiliation;	institution_sports
SELECT T1.Affiliation FROM Institution AS T1 JOIN City AS T2 ON T1.CityID = T2.CityID WHERE T2.City != "Vancouver" GROUP BY T1.Affiliation;	institution_sports
SELECT stadium FROM institution ORDER BY capacity DESC LIMIT 10;	institution_sports
SELECT stadium FROM institution ORDER BY capacity DESC;	institution_sports
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1;	institution_sports
SELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1;	institution_sports
SELECT Name , Nickname FROM Institution;	institution_sports
SELECT institution , nickname FROM institutions;	institution_sports
SELECT nickname FROM institution ORDER BY enrollment ASC LIMIT 1;	institution_sports
SELECT nickname FROM institution ORDER BY enrollment LIMIT 1;	institution_sports
SELECT institution_name FROM championships ORDER BY championships DESC LIMIT 10;	institution_sports
SELECT institution FROM championships ORDER BY count(*) DESC LIMIT 10;	institution_sports
SELECT institution FROM championship GROUP BY institution HAVING count(*) >= 1;	institution_sports
SELECT institution FROM championship GROUP BY institution HAVING count(*) > 1;	institution_sports
SELECT count(*) FROM institution INNER JOIN championship ON institution.id_championship = championship.id_championship WHERE institution.public_affiliation = 'public' GROUP BY institution.id_championship ORDER BY count(*) DESC LIMIT 1;	institution_sports
SELECT count(*) FROM institution WHERE affiliation = "Public" ;	institution_sports
SELECT Affiliation , COUNT(*) FROM Institution GROUP BY Affiliation;	institution_sports
SELECT type_of_affiliation , count(*) FROM affiliation GROUP BY type_of_affiliation ;	institution_sports
SELECT Affiliation FROM Institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;	institution_sports
SELECT type FROM affiliation GROUP BY type ORDER BY count(*) DESC LIMIT 1;	institution_sports
SELECT Year FROM Institution GROUP BY Year HAVING count(*) > 1;	institution_sports
SELECT year , count(*) FROM institution GROUP BY year HAVING count(*) > 1;	institution_sports
SELECT nickname FROM institution ORDER BY capacity DESC;	institution_sports
SELECT nickname , capacity FROM institution ORDER BY capacity DESC;	institution_sports
SELECT SUM(enrollment) FROM institution WHERE city = "Vancouver" OR city = "Calgary" ;	institution_sports
SELECT institution FROM enrollments WHERE city IN ("Vancouver", "Calgary") ;	institution_sports
SELECT province FROM institutions WHERE institution_year BETWEEN 1920 AND 1950 INTERSECT SELECT province FROM institutions WHERE institution_year NOT BETWEEN 1920 AND 1950;	institution_sports
SELECT DISTINCT province FROM institutions WHERE institution_date BETWEEN '1920-01-01' AND '1950-12-31' INTERSECT SELECT DISTINCT province FROM institutions WHERE institution_date > '1950-12-31' ;	institution_sports
SELECT count(DISTINCT province) FROM institution;	institution_sports
SELECT count(DISTINCT province) FROM institutions;	institution_sports
SELECT * FROM Warehouses;	warehouse_1
SELECT * FROM Warehouse;	warehouse_1
SELECT DISTINCT contents FROM New_York;	warehouse_1
SELECT DISTINCT contents FROM boxes WHERE city = "New York" ;	warehouse_1
SELECT * FROM boxes WHERE value > 150;	warehouse_1
SELECT contents FROM boxes WHERE value > 150;	warehouse_1
SELECT warehouse_code , AVG(value) FROM boxes GROUP BY warehouse_code ;	warehouse_1
SELECT warehouse , AVG(boxes) FROM orders GROUP BY warehouse ;	warehouse_1
SELECT AVG(value), SUM(value) FROM boxes;	warehouse_1
SELECT AVG(value), SUM(value) FROM boxes GROUP BY value;	warehouse_1
SELECT avg(capacity), sum(capacity) FROM warehouses;	warehouse_1
SELECT avg(capacity), sum(capacity) FROM warehouses GROUP BY warehouse_id;	warehouse_1
SELECT content , AVG(value) , MAX(value) FROM table_name GROUP BY content ;	warehouse_1
SELECT type , AVG(value) , MAX(value) FROM boxes GROUP BY type ;	warehouse_1
SELECT T1.content , SUM(T1.value) FROM table1 AS T1 JOIN table2 AS T2 ON T1.boxid = T2.boxid GROUP BY T1.content ORDER BY SUM(T1.value) DESC LIMIT 1;	warehouse_1
SELECT content FROM box ORDER BY value DESC LIMIT 1;	warehouse_1
SELECT AVG(Quantity) FROM Boxes;	warehouse_1
SELECT AVG(boxes) FROM boxes;	warehouse_1
SELECT DISTINCT T1.contents FROM box AS T1 JOIN contents AS T2 ON T1.boxid = T2.boxid;	warehouse_1
SELECT DISTINCT contents FROM boxes;	warehouse_1
SELECT count(*) FROM contents;	warehouse_1
SELECT COUNT(DISTINCT box_contents) FROM contents;	warehouse_1
SELECT DISTINCT Location FROM Warehouses;	warehouse_1
SELECT location FROM warehouse ORDER BY location ASC;	warehouse_1
SELECT T1.BoxCode FROM Warehouse AS T1 JOIN Box AS T2 ON T1.WarehouseID = T2.WarehouseID WHERE T1.City = "Chicago" OR T1.City = "New York" GROUP BY T1.BoxCode;	warehouse_1
SELECT T1.BoxCode FROM Warehouse AS T1 JOIN Box AS T2 ON T1.WarehouseID = T2.WarehouseID WHERE T1.City = "Chicago" OR T1.City = "New York" ;	warehouse_1
SELECT SUM(Quantity) FROM Warehouses WHERE City IN ('Chicago', 'New York') ;	warehouse_1
SELECT SUM(Quantity) FROM Boxes WHERE City IN ('Chicago', 'New York') ;	warehouse_1
SELECT * FROM warehouse WHERE city = "Chicago" INTERSECT SELECT * FROM warehouse WHERE city = "New York"	warehouse_1
SELECT * FROM chicago JOIN new_york ON chicago.city_id = new_york.city_id WHERE chicago.state = "IL" AND new_york.state = "NY" ;	warehouse_1
SELECT type FROM contents WHERE warehouse NOT IN (SELECT warehouse FROM warehouses WHERE city = 'New York') GROUP BY type;	warehouse_1
SELECT T1.type FROM contents AS T1 JOIN warehouse AS T2 ON T1.warehouse_id = T2.warehouse_id WHERE T2.city = "New York" AND T1.type NOT IN (SELECT T3.type FROM contents AS T3 JOIN warehouse AS T4 ON T3.warehouse_id = T4.warehouse_id WHERE T4.city = "New York")	warehouse_1
SELECT location FROM warehouse WHERE contents = "Rocks" AND contents != "Scissors" ;	warehouse_1
SELECT Location FROM Warehouses WHERE BoxesContainingRocks AND BoxesContainingScissors IS NULL;	warehouse_1
SELECT T1.WarehouseName FROM Warehouse AS T1 JOIN Contents AS T2 ON T1.WarehouseID = T2.WarehouseID WHERE T2.Name = "Rocks" OR T2.Name = "Scissors" GROUP BY T1.WarehouseName;	warehouse_1
SELECT DISTINCT warehouse FROM box WHERE contents IN ('Rocks', 'Scissors') GROUP BY warehouse;	warehouse_1
SELECT location FROM warehouse WHERE contents = "Rocks" INTERSECT SELECT location FROM warehouse WHERE contents = "Scissors"	warehouse_1
SELECT Location FROM Warehouse WHERE BoxType = "Rocks" INTERSECT SELECT Location FROM Warehouse WHERE BoxType = "Scissors" ;	warehouse_1
SELECT code , contents FROM boxes ORDER BY contents ;	warehouse_1
SELECT code , contents FROM box ORDER BY contents ;	warehouse_1
SELECT code , contents FROM Box ORDER BY value LIMIT 1;	warehouse_1
SELECT code , contents FROM box ORDER BY value LIMIT 1;	warehouse_1
SELECT DISTINCT contents FROM Box ORDER BY value DESC LIMIT 10;	warehouse_1
SELECT box_contents FROM boxes WHERE box_contents > (SELECT avg(box_contents) FROM boxes) GROUP BY box_contents;	warehouse_1
SELECT DISTINCT type FROM contents ORDER BY type;	warehouse_1
SELECT box_contents FROM boxes ORDER BY box_contents ASC;	warehouse_1
SELECT BoxCode FROM Boxes WHERE Value > (SELECT Value FROM Boxes WHERE Content = "Rocks") GROUP BY BoxCode;	warehouse_1
SELECT T1.BoxCode FROM Box AS T1 JOIN Rocks AS T2 ON T1.BoxCode = T2.BoxCode GROUP BY T1.BoxCode HAVING COUNT(*) > 1 ORDER BY T1.BoxCode LIMIT 10;	warehouse_1
SELECT code , content , value FROM Box ORDER BY value DESC LIMIT 1;	warehouse_1
SELECT code , contents FROM Box ORDER BY value DESC LIMIT 1;	warehouse_1
SELECT SUM(Quantity) FROM Warehouse ORDER BY Capacity DESC LIMIT 1;	warehouse_1
SELECT SUM(Quantity) FROM Boxes WHERE Capacity = ( SELECT MAX(Capacity) FROM Boxes ) ;	warehouse_1
SELECT warehouse_code , AVG(value) FROM boxes GROUP BY warehouse_code HAVING AVG(value) > 150;	warehouse_1
SELECT warehouse , AVG(boxes) FROM sales GROUP BY warehouse HAVING AVG(boxes) > 150;	warehouse_1
SELECT content_type , count(*) , sum(value) FROM orders GROUP BY content_type ;	warehouse_1
SELECT content , SUM(value) , COUNT(*) FROM orders GROUP BY content ;	warehouse_1
SELECT location , SUM(capacity) , AVG(capacity) , MAX(capacity) FROM locations GROUP BY location ;	warehouse_1
SELECT location , SUM(capacity) , AVG(capacity) , MAX(capacity) FROM warehouses GROUP BY location ;	warehouse_1
SELECT SUM(capacity) FROM warehouse_location;	warehouse_1
SELECT SUM(capacity) FROM Warehouses;	warehouse_1
SELECT warehouse_location , MAX(price) FROM boxes GROUP BY warehouse_location ;	warehouse_1
SELECT warehouse_location , MAX(box_price) FROM boxes GROUP BY warehouse_location;	warehouse_1
SELECT warehouse_code , count(*) FROM boxes GROUP BY warehouse_code ;	warehouse_1
SELECT warehouse , count(*) FROM boxes GROUP BY warehouse ;	warehouse_1
SELECT COUNT(DISTINCT Location) FROM Rocks;	warehouse_1
SELECT COUNT(DISTINCT WarehouseID) FROM Boxes INNER JOIN Rocks ON Boxes.BoxID = Rocks.BoxID GROUP BY WarehouseID HAVING COUNT(*) > 1;	warehouse_1
SELECT code , city FROM Box;	warehouse_1
SELECT box_code , warehouse_location FROM boxes ORDER BY box_code ;	warehouse_1
SELECT code FROM boxes WHERE city = "Chicago" ;	warehouse_1
SELECT WarehouseCode FROM Warehouse WHERE City = "Chicago" GROUP BY WarehouseCode;	warehouse_1
SELECT warehouse , count(*) FROM boxes GROUP BY warehouse ;	warehouse_1
SELECT warehouse_name , count(*) FROM boxes GROUP BY warehouse_name ;	warehouse_1
SELECT warehouse , count(*) FROM contents GROUP BY warehouse ;	warehouse_1
SELECT Warehouse , COUNT(DISTINCT Type) FROM Contents GROUP BY Warehouse;	warehouse_1
SELECT WarehouseCode FROM Warehouses WHERE Capacity > (SELECT Capacity FROM Warehouses ORDER BY Capacity DESC LIMIT 1) ;	warehouse_1
SELECT WarehouseCode FROM Warehouses GROUP BY WarehouseCode HAVING COUNT(*) > (SELECT Capacity FROM Warehouses) ;	warehouse_1
SELECT SUM(Quantity) FROM Boxes WHERE WarehouseID NOT IN (SELECT WarehouseID FROM Warehouses) GROUP BY WarehouseID ORDER BY SUM(Quantity) DESC LIMIT 1;	warehouse_1
SELECT SUM(Quantity) FROM Boxes WHERE Location NOT IN (SELECT Location FROM Locations WHERE Location = 'Chicago') GROUP BY Location ORDER BY SUM(Quantity) DESC LIMIT 1;	warehouse_1
SELECT name , city , state FROM university ORDER BY name ASC;	university_rank
SELECT name , city , state FROM university ORDER BY name ASC ;	university_rank
SELECT count(*) FROM university WHERE state = "Illinois" OR state = "Ohio" ;	university_rank
SELECT count(*) FROM university WHERE state = "Illinois" OR state = "Ohio"	university_rank
SELECT MAX(enrollment) , AVG(enrollment) , MIN(enrollment) FROM universities;	university_rank
SELECT MAX(enrollment) , AVG(enrollment) , MIN(enrollment) FROM universities;	university_rank
SELECT T1.TeamName FROM University AS T1 JOIN Enrollment AS T2 ON T1.UniversityID = T2.UniversityID GROUP BY T1.TeamName ORDER BY AVG(T2.Enrollment) DESC LIMIT 10;	university_rank
SELECT T1.TeamName FROM Team AS T1 JOIN University AS T2 ON T1.UniversityID = T2.UniversityID GROUP BY T1.TeamName HAVING AVG(T1.EnrolledPeople) > (SELECT AVG(T2.EnrolledPeople) FROM Team AS T2) ORDER BY AVG(T1.EnrolledPeople) DESC LIMIT 10;	university_rank
SELECT conference_name FROM home_conference ORDER BY conference_name ASC LIMIT 10;	university_rank
SELECT conference FROM university WHERE conference NOT IN (SELECT conference FROM conference) ORDER BY conference;	university_rank
SELECT conference , count(*) FROM conferences GROUP BY conference ;	university_rank
SELECT count(*) FROM conference WHERE conference_id IN (SELECT conference_id FROM home_conference) GROUP BY conference_id HAVING count(*) > 1;	university_rank
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1;	university_rank
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1;	university_rank
SELECT conference_name FROM home_conference WHERE average_enrollment > 2000 GROUP BY conference_name ORDER BY average_enrollment DESC LIMIT 10;	university_rank
SELECT conference_name FROM conference WHERE average_university_enrollment > 2000;	university_rank
SELECT conference_name FROM Conference GROUP BY conference_name ORDER BY count(*) ASC LIMIT 1;	university_rank
SELECT conference_name FROM conference WHERE number_of_enrolled_people = (SELECT MIN(number_of_enrolled_people) FROM conference) LIMIT 1;	university_rank
SELECT major_name , major_code FROM major ORDER BY major_code ;	university_rank
SELECT major_name , major_code FROM major ORDER BY major_code;	university_rank
SELECT major , rank FROM major ORDER BY rank ;	university_rank
SELECT rank , major FROM major ORDER BY rank , major ASC;	university_rank
SELECT name , city , state FROM university WHERE rank = 1 AND major = "Accounting" LIMIT 1;	university_rank
SELECT name , city , state FROM university WHERE rank = 1 ;	university_rank
SELECT University FROM Major GROUP BY University ORDER BY count(*) DESC LIMIT 1;	university_rank
SELECT university_name FROM university ORDER BY major_count DESC LIMIT 1;	university_rank
SELECT name FROM university WHERE rank = 1 AND major = NULL LIMIT 10;	university_rank
SELECT University_Name FROM University WHERE Major_Number NOT IN (SELECT Major_Number FROM Major ORDER BY Major_Number LIMIT 1) GROUP BY University_Name;	university_rank
SELECT university_name FROM university WHERE major = "Accounting" INTERSECT SELECT university_name FROM university WHERE major = "Urban Education" ;	university_rank
SELECT Name FROM University WHERE Major = "Accounting" INTERSECT SELECT Name FROM University WHERE Major = "Urban Education"	university_rank
SELECT Name , Overall_Rank FROM University ORDER BY Overall_Rank DESC LIMIT 1;	university_rank
SELECT name , rank FROM university WHERE state = "Wisconsin" ;	university_rank
SELECT university_name , research_point FROM university ORDER BY research_point DESC LIMIT 1;	university_rank
SELECT UniversityName FROM ResearchPoints ORDER BY ResearchPoints DESC LIMIT 1;	university_rank
SELECT university_name FROM university ORDER BY reputation_points ASC;	university_rank
SELECT university_name FROM university ORDER BY reputation_points ASC;	university_rank
SELECT Name FROM University WHERE Major = "Accounting" AND Rank >= 3;	university_rank
SELECT T1.UniversityName FROM University AS T1 JOIN Major AS T2 ON T1.UniversityID = T2.UniversityID JOIN Department AS T3 ON T2.DepartmentID = T3.DepartmentID JOIN Course AS T4 ON T3.DepartmentID = T4.DepartmentID JOIN Major AS T5 ON T4.MajorID = T5.MajorID JOIN Course AS T6 ON T4.CourseID = T6.CourseID JOIN Course AS T7 ON T6.CourseID = T7.CourseID JOIN Course AS T8 ON T7.CourseID = T8.CourseID JOIN Course AS T9 ON T8.CourseID = T9.CourseID JOIN Course AS T10 ON T9.CourseID = T10.CourseID JOIN Course AS T11 ON T10.CourseID = T11.CourseID JOIN Course AS T12 ON T11	university_rank
SELECT SUM(enrollment) FROM university WHERE overall_rank < 5;	university_rank
SELECT count(*) FROM university WHERE rank <= 5;	university_rank
SELECT University_Name , Citation_Point FROM Universities ORDER BY Citation_Point DESC LIMIT 3;	university_rank
SELECT University_Name , Citation_Point FROM Universities ORDER BY Reputation_Point DESC LIMIT 3;	university_rank
SELECT state FROM university GROUP BY state HAVING count(*) > 2 AND count(*) < 3000;	university_rank
SELECT state FROM university GROUP BY state HAVING count(*) > 2 AND count(*) < 3000;	university_rank
SELECT title FROM movies WHERE rating IS NULL;	movie_2
SELECT movie_name FROM movies WHERE movie_id NOT IN (SELECT movie_id FROM ratings) ;	movie_2
SELECT movie_name FROM movies WHERE rating = 'G' ;	movie_2
SELECT name FROM movie WHERE rating = 'G' ;	movie_2
SELECT title FROM movie WHERE theater = "Odeon" LIMIT 1;	movie_2
SELECT movie_title FROM movies WHERE theater_name = "Odeon" ORDER BY movie_title ASC LIMIT 10;	movie_2
SELECT T1.name , T2.theater FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id GROUP BY T1.theater_id HAVING count(*) > 1;	movie_2
SELECT T1.movie_name , T2.theater_name FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id GROUP BY T1.movie_name , T2.theater_name HAVING count(*) > 1;	movie_2
SELECT count(*) FROM movie WHERE rating = 'G' ;	movie_2
SELECT count(*) FROM movie WHERE rating = 'G' ;	movie_2
SELECT count(*) FROM movie WHERE theater_id IN (SELECT theater_id FROM movie_played) GROUP BY theater_id ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT COUNT(*) FROM movie WHERE play_in_theaters = 1;	movie_2
SELECT COUNT(DISTINCT movie_id) FROM movie_theater ORDER BY movie_id LIMIT 10;	movie_2
SELECT COUNT(DISTINCT movie_id) FROM movie_played GROUP BY movie_id;	movie_2
SELECT count(DISTINCT theater) FROM movie_theater;	movie_2
SELECT count(DISTINCT theater) FROM movie_theater;	movie_2
SELECT Rating FROM Movies WHERE Name LIKE '%Citizen%' LIMIT 1;	movie_2
SELECT rating FROM movies WHERE name LIKE '%Citizen%' GROUP BY rating;	movie_2
SELECT cinema_name FROM cinema WHERE movie_rating IN ('G', 'PG') ;	movie_2
SELECT movie_theater_name FROM movie_theater WHERE movie_rating IN ('G', 'PG') GROUP BY movie_theater_name;	movie_2
SELECT movie_name FROM movies WHERE cinema = "Odeon" OR cinema = "Imperial" ;	movie_2
SELECT title FROM movie WHERE theater IN ('Odeon', 'Imperial') ;	movie_2
SELECT T1.movie_name FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.theater_name = "Odeon" INTERSECT SELECT T1.movie_name FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.theater_name = "Imperial"	movie_2
SELECT T1.Title FROM Movie AS T1 JOIN Theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.name = "Odeon" INTERSECT SELECT T1.Title FROM Movie AS T1 JOIN Theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.name = "Imperial" INTERSECT SELECT T1.Title FROM Movie AS T1 JOIN Theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.name = "Odeon" INTERSECT SELECT T1.Title FROM Movie AS T1 JOIN Theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.name = "Imperial"	movie_2
SELECT name FROM movie WHERE theater = "Odeon" GROUP BY name HAVING count(*) = 0;	movie_2
SELECT movie_name FROM movies WHERE theater_name = "Odeon" GROUP BY movie_name HAVING count(*) = 0;	movie_2
SELECT title FROM movie ORDER BY title ASC;	movie_2
SELECT movie_name FROM movies ORDER BY movie_name ASC;	movie_2
SELECT title FROM movies ORDER BY rating DESC;	movie_2
SELECT movie_name FROM movies ORDER BY rating DESC;	movie_2
SELECT theater_name FROM movies GROUP BY theater_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT theater_name FROM movies GROUP BY theater_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT movie_name FROM movies GROUP BY movie_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT T1.FilmName FROM Film AS T1 JOIN Theater AS T2 ON T1.theaterID = T2.theaterID GROUP BY T1.FilmName ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT rating , count(*) FROM movies GROUP BY rating;	movie_2
SELECT rating , count(*) FROM movies GROUP BY rating;	movie_2
SELECT count(*) FROM movies WHERE rating IS NOT NULL;	movie_2
SELECT count(*) FROM movies WHERE rating IS NOT NULL;	movie_2
SELECT T1.theater_name FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id GROUP BY T1.theater_name HAVING count(*) > 1;	movie_2
SELECT theater_name FROM movie WHERE theater_id IN (SELECT theater_id FROM movie_played GROUP BY theater_id HAVING count(*) > 1)	movie_2
SELECT name FROM movie_theater WHERE status != "showing" ORDER BY name ASC;	movie_2
SELECT cinema_name FROM cinema WHERE cinema_name NOT IN (SELECT cinema_name FROM movie WHERE movie_id NOT IN (SELECT movie_id FROM movie)) ;	movie_2
SELECT name FROM movie_theater WHERE rating = 'G' ;	movie_2
SELECT T1.Name FROM Theater AS T1 JOIN Movie AS M ON T1.theater_id = M.theater_id JOIN Movie_Rating AS MR ON M.movie_id = MR.movie_id WHERE MR.rating = 'G' ORDER BY T1.name ASC;	movie_2
SELECT title FROM movies;	movie_2
SELECT movie_name FROM movies;	movie_2
SELECT DISTINCT rating FROM ratings;	movie_2
SELECT DISTINCT movie_rating FROM movie_ratings ORDER BY movie_rating DESC LIMIT 10;	movie_2
SELECT * FROM movie ORDER BY rating DESC LIMIT 10;	movie_2
SELECT * FROM movies ORDER BY rating DESC LIMIT 10;	movie_2
SELECT movie_title FROM movies WHERE movie_id NOT IN (SELECT movie_id FROM showings) GROUP BY movie_title HAVING count(*) = 0;	movie_2
SELECT movie_name FROM movies WHERE movie_id NOT IN (SELECT movie_id FROM showings) GROUP BY movie_name ORDER BY movie_name ASC LIMIT 10;	movie_2
SELECT Name FROM Package ORDER BY Weight DESC LIMIT 1;	planet_1
SELECT client_name FROM packages ORDER BY weight DESC LIMIT 1;	planet_1
SELECT SUM(weight) FROM packages WHERE customer_id = (SELECT customer_id FROM customers WHERE name = "Leo Wong") GROUP BY customer_id;	planet_1
SELECT SUM(weight) FROM packages WHERE sender = 'Leo Wong' ;	planet_1
SELECT Position FROM Employees WHERE FirstName = 'Amy' AND LastName = 'Wong' LIMIT 1;	planet_1
SELECT Position FROM Employees WHERE FirstName = 'Amy' AND LastName = 'Wong';	planet_1
SELECT salary , position FROM employees WHERE employee_name = "Turanga Leela" ;	planet_1
SELECT salary , position FROM employee WHERE name = "Turanga Leela" ;	planet_1
SELECT AVG(salary) FROM intern;	planet_1
SELECT AVG(salary) FROM intern;	planet_1
SELECT Level FROM Physician ORDER BY Level DESC LIMIT 1;	planet_1
SELECT clearance_level FROM physician;	planet_1
SELECT package_number FROM package ORDER BY package_number DESC LIMIT 10;	planet_1
SELECT count(*) FROM packages WHERE sender_name = 'Leo Wong' ;	planet_1
SELECT package_number FROM orders WHERE customer_name = 'Leo Wong' ORDER BY order_date DESC LIMIT 10;	planet_1
SELECT package_number FROM orders WHERE customer_name = 'Leo Wong' ORDER BY order_date DESC LIMIT 10;	planet_1
SELECT T1.package_sent , T1.package_received FROM package AS T1 JOIN package_sent AS T2 ON T1.package_id = T2.package_id JOIN package_received AS T3 ON T1.package_id = T3.package_id WHERE T3.package_sent = 'Leo Wong' OR T3.package_received = 'Leo Wong' GROUP BY T1.package_sent , T1.package_received ;	planet_1
SELECT DISTINCT Package_Number FROM Messages WHERE Sender_Name = 'Leo Wong' OR Receiver_Name = 'Leo Wong' ;	planet_1
SELECT COUNT(*) FROM packages WHERE sender_name = "Ogden Wernstrom" AND receiver_name = "Leo Wong" ;	planet_1
SELECT COUNT(*) FROM packages WHERE sender_name = "Ogden Wernstrom" AND receiver_name = "Leo Wong" ;	planet_1
SELECT contents FROM package WHERE sent_by = "John Zoidfarb" ;	planet_1
SELECT T1.package FROM package AS T1 JOIN order AS T2 ON T1.package_id = T2.package_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.customer_name = "John Zoidfarb" GROUP BY T1.package ;	planet_1
SELECT package_number , weight FROM packages WHERE client_name = "John" ORDER BY weight DESC LIMIT 1;	planet_1
SELECT package_number , weight FROM packages WHERE client_name = "John" ORDER BY weight DESC LIMIT 1;	planet_1
SELECT package_number , weight FROM packages ORDER BY weight LIMIT 3;	planet_1
SELECT package_number , weight FROM packages ORDER BY weight LIMIT 3;	planet_1
SELECT client_name , count(*) FROM packages GROUP BY client_name ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT client_name , count(*) FROM package ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT client_name , count(*) FROM packages GROUP BY client_name ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT min(number_of_packages_received), person_name FROM packages GROUP BY person_name ORDER BY min(number_of_packages_received) LIMIT 1;	planet_1
SELECT client_name FROM packages GROUP BY client_name HAVING count(*) > 1;	planet_1
SELECT client_name FROM clients GROUP BY client_name HAVING count(*) > 1;	planet_1
SELECT coordinates FROM planets WHERE name = "Mars" ;	planet_1
SELECT coordinates FROM planets WHERE name = "Mars" ;	planet_1
SELECT name , coordinates FROM planets ORDER BY name ASC;	planet_1
SELECT name , coordinates FROM planets ORDER BY name ASC ;	planet_1
SELECT T1.ShipmentID FROM Shipments AS T1 JOIN Employees AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ManagerID = "Phillip J. Fry" GROUP BY T1.ShipmentID ORDER BY T1.ShipmentID DESC LIMIT 10;	planet_1
SELECT T1.shipment_id FROM delivery AS T1 JOIN deliveryman AS T2 ON T1.deliveryman_id = T2.deliveryman_id WHERE T2.name = "Phillip J Fry" GROUP BY T1.shipment_id;	planet_1
SELECT shipment_date FROM shipments ORDER BY shipment_date ASC;	planet_1
SELECT shipment_date FROM shipments ORDER BY shipment_date ASC;	planet_1
SELECT shipment_id FROM shipment ORDER BY shipment_id ASC LIMIT 10;	planet_1
SELECT shipment_id FROM shipments WHERE planet = "Mars" ;	planet_1
SELECT T1.shipment_id FROM shipment AS T1 JOIN planet AS T2 ON T1.planet_id = T2.id WHERE T2.name = "Mars" AND T2.manager = "Turanga Leela" ORDER BY T1.shipment_id ASC;	planet_1
SELECT id FROM shipments WHERE planet = "Mars" AND manager = "Turanga Leela" GROUP BY id;	planet_1
SELECT T1.shipment_id FROM shipments AS T1 JOIN planets AS T2 ON T1.planet_id = T2.planet_id WHERE T2.name = "Mars" OR T2.name = "Turanga Leela" ORDER BY T1.shipment_id ASC;	planet_1
SELECT id FROM shipments WHERE planet = "Mars" AND manager = "Turanga Leela" ORDER BY id ASC LIMIT 1000;	planet_1
SELECT Planet , SUM(Shipments) FROM Shipments GROUP BY Planet ;	planet_1
SELECT Planet , count(*) FROM Shipments GROUP BY Planet ;	planet_1
SELECT Planet FROM shipments GROUP BY Planet ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT Planet FROM shipments ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT manager_name , count(*) FROM shipments GROUP BY manager_name ORDER BY count(*) DESC;	planet_1
SELECT count(*) , manager_name FROM shipments GROUP BY manager_name ORDER BY count(*) DESC LIMIT 10;	planet_1
SELECT SUM(weight) FROM package ORDER BY weight DESC LIMIT 1;	planet_1
SELECT SUM(weight) FROM packages WHERE planet = "Mars" ;	planet_1
SELECT Planet , SUM(Weight) FROM Package GROUP BY Planet ;	planet_1
SELECT Planet , SUM(Weight) FROM Package GROUP BY Planet ;	planet_1
SELECT planet_name FROM shipment ORDER BY total_weight_shipment DESC LIMIT 1;	planet_1
SELECT name FROM planets WHERE total_shipment_weight > 30;	planet_1
SELECT package_number FROM packages WHERE planet = "Omicron Persei 8" AND sender = "Zapp Brannigan" GROUP BY package_number;	planet_1
SELECT COUNT(*) FROM packages WHERE sender_name = 'Zapp Brannigan' UNION SELECT COUNT(*) FROM packages WHERE shipper_name = 'Omicron Persei 8' ;	planet_1
SELECT package_number FROM packages WHERE planet_name = "Omicron Persei 8" OR shipper = "Zapp Brannigan" ;	planet_1
SELECT count(*) FROM packages WHERE planet = "Omicron Persei 8" OR sender = "Zapp Brannigan" ;	planet_1
SELECT package_number , weight FROM packages WHERE weight BETWEEN 10 AND 30;	planet_1
SELECT package_number, weight FROM packages WHERE package_number BETWEEN 10 AND 30;	planet_1
SELECT name FROM employees WHERE clearance NOT IN (SELECT clearance FROM employees) ORDER BY name ASC;	planet_1
SELECT employee_name FROM employees WHERE clearance_on_mars IS NULL;	planet_1
SELECT Name FROM Employees WHERE Clearance IN ('Omega III') ;	planet_1
SELECT Name FROM Employees WHERE Clearance = 'Omega III' ;	planet_1
SELECT T1.planet_name FROM planets AS T1 JOIN employees AS T2 ON T1.planet_id = T2.planet_id WHERE T2.employee_id = 1 GROUP BY T1.planet_name LIMIT 1;	planet_1
SELECT T1.planet FROM planet AS T1 JOIN employee AS T2 ON T1.planet_id = T2.planet_id JOIN clearance AS T3 ON T2.employee_id = T3.employee_id WHERE T3.cleared = "Yes" GROUP BY T1.planet ORDER BY T1.planet ASC;	planet_1
SELECT Name FROM Employees WHERE Salary BETWEEN 5000 AND 10000;	planet_1
SELECT Name FROM Employees WHERE Salary BETWEEN 5000 AND 10000;	planet_1
SELECT name FROM employees WHERE salary > (SELECT avg(salary) FROM employees) OR salary > 5000;	planet_1
SELECT name FROM employees WHERE salary > (SELECT avg(salary) FROM employees) OR salary > 5000;	planet_1
SELECT count(*) FROM employees WHERE clearance NOT IN (SELECT clearance FROM employees) ;	planet_1
SELECT count(*) FROM employees WHERE clearance_on_mars IS NULL;	planet_1
SELECT count(*) FROM games;	video_game
SELECT count(*) FROM games;	video_game
SELECT title , developer FROM game ORDER BY units_sold DESC;	video_game
SELECT title , developer FROM game ORDER BY units_sold DESC;	video_game
SELECT CAST(SUM(T1.units_sold) AS REAL) / 1000000 FROM Game AS T1 JOIN GameDevelopment AS T2 ON T1.game_id = T2.game_id WHERE T2.developer != "Nintendo" GROUP BY T1.game_id;	video_game
SELECT avg(units_sold_in_millions) FROM games WHERE developed_by_nintendo = 0 GROUP BY units_sold_in_millions;	video_game
SELECT name , market_district FROM platform ;	video_game
SELECT platform_name , market_district FROM platform_market_district;	video_game
SELECT name , id FROM platform ORDER BY download_rank LIMIT 1 ;	video_game
SELECT platform_name , platform_id FROM platform ORDER BY download_rank LIMIT 1 ;	video_game
SELECT max(rank) , min(rank) FROM players ;	video_game
SELECT max(rank) , min(rank) FROM player ORDER BY rank;	video_game
SELECT count(*) FROM player WHERE rank_of_the_year < 3;	video_game
SELECT count(*) FROM player WHERE rank <= 3;	video_game
SELECT player_name FROM players ORDER BY player_name ASC;	video_game
SELECT name FROM player ORDER BY name ASC;	video_game
SELECT name , college FROM player ORDER BY rank_of_year DESC;	video_game
SELECT name , college FROM player ORDER BY rank_of_year DESC;	video_game
SELECT name , rank FROM player ORDER BY rank LIMIT 10;	video_game
SELECT name , rank FROM player WHERE title = "Super Mario World" ;	video_game
SELECT DISTINCT T1.Developer FROM Game AS T1 JOIN Player AS T2 ON T1.PlayerID = T2.PlayerID JOIN College AS T3 ON T2.CollegeID = T3.CollegeID WHERE T3.Name = "Auburn" GROUP BY T1.Developer;	video_game
SELECT DISTINCT T1.Developer FROM Game AS T1 JOIN GamePlayer AS T2 ON T1.GameID = T2.GameID JOIN Player AS T3 ON T2.PlayerID = T3.PlayerID WHERE T3.College = "Auburn" GROUP BY T1.Developer ORDER BY COUNT(*) DESC LIMIT 10;	video_game
SELECT avg(units_sold_in_millions_of_games_played) FROM players WHERE position = "Guard" ;	video_game
SELECT avg(units_sold_in_millions) FROM games WHERE player_position = "Guard" GROUP BY player_position;	video_game
SELECT T1.Title , T1.Platform FROM Game AS T1 JOIN GamePlatform AS T2 ON T1.GameID = T2.GameID GROUP BY T1.Title , T1.Platform ORDER BY T1.Title ASC ;	video_game
SELECT title , platform FROM game;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Platforms AS T2 ON T1.PlatformID = T2.PlatformID WHERE T2.MarketDistrict = "Asia" OR T2.MarketDistrict = "USA" GROUP BY T1.Title;	video_game
SELECT T1.Title FROM Game AS T1 JOIN Platform AS T2 ON T1.PlatformID = T2.PlatformID WHERE T2.MarketDistrict = "Asia" OR T2.MarketDistrict = "USA" ;	video_game
SELECT name , count(*) FROM franchises GROUP BY name;	video_game
SELECT Franchise , COUNT(*) FROM games GROUP BY Franchise;	video_game
SELECT name FROM franchise GROUP BY name ORDER BY count(*) DESC LIMIT 1;	video_game
SELECT T1.Franchise FROM franchise AS T1 JOIN game AS T2 ON T1.FranchiseID = T2.FranchiseID GROUP BY T1.Franchise ORDER BY count(*) DESC LIMIT 1;	video_game
SELECT Name FROM Franchise GROUP BY Name HAVING COUNT(*) > 2;	video_game
SELECT Name FROM Franchise GROUP BY Name HAVING COUNT(*) > 2;	video_game
SELECT name FROM players WHERE player_id NOT IN (SELECT player_id FROM games) ;	video_game
SELECT player_name FROM players WHERE player_id NOT IN (SELECT player_id FROM games) ;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.College = "Oklahoma" INTERSECT SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.College = "Auburn"	video_game
SELECT T1.Title FROM Game AS T1 JOIN Player AS T2 ON T1.PlayerID = T2.PlayerID JOIN College AS T3 ON T2.CollegeID = T3.CollegeID WHERE T3.CollegeName = "Oklahoma" OR T3.CollegeName = "Auburn" GROUP BY T1.Title;	video_game
SELECT DISTINCT T1.Franchise FROM Game AS T1 JOIN GameGenre AS T2 ON T1.GenreID = T2.GenreID GROUP BY T1.Franchise ORDER BY T1.Franchise ASC;	video_game
SELECT DISTINCT franchise FROM franchises;	video_game
SELECT T1.Title FROM Game AS T1 JOIN Player AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.Position = "Guard" GROUP BY T1.Title HAVING COUNT(*) = 0;	video_game
SELECT T1.Title FROM Game AS T1 JOIN Player AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.Position = "Guard" GROUP BY T1.Title HAVING COUNT(*) = 0;	video_game
SELECT name FROM press ORDER BY profit DESC LIMIT 10;	book_press
SELECT press_name FROM press ORDER BY year_profit DESC LIMIT 10;	book_press
SELECT Name FROM Publishers WHERE Profit > 15000000000 OR Profit > 10000000000 ORDER BY Profit DESC LIMIT 1;	book_press
SELECT press_name FROM press WHERE yearly_profit > 15000000000 OR monthly_profit > 10000000000;	book_press
SELECT AVG(profit) , MAX(profit) FROM press ;	book_press
SELECT year , AVG(profit) , MAX(profit) FROM sales GROUP BY year ;	book_press
SELECT publisher_name FROM publisher ORDER BY monthly_profit DESC LIMIT 1;	book_press
SELECT press_name FROM profits ORDER BY monthly_profit DESC LIMIT 1;	book_press
SELECT publisher_name FROM publisher ORDER BY monthly_profit DESC LIMIT 1 OR SELECT publisher_name FROM publisher ORDER BY monthly_profit ASC LIMIT 1;	book_press
SELECT name FROM press ORDER BY monthly_profit DESC LIMIT 1; UNION SELECT name FROM press ORDER BY monthly_profit ASC LIMIT 1;	book_press
SELECT count(*) FROM authors WHERE age < 30;	book_press
SELECT count(*) FROM authors WHERE age < 30;	book_press
SELECT Gender , AVG(Age) FROM Authors GROUP BY Gender ;	book_press
SELECT Gender , AVG(Age) FROM Authors GROUP BY Gender;	book_press
SELECT gender , count(*) FROM authors WHERE age > 30 GROUP BY gender ;	book_press
SELECT gender , count(*) FROM authors WHERE age > 30 GROUP BY gender ;	book_press
SELECT title FROM book ORDER BY release_date DESC LIMIT 10;	book_press
SELECT book_title FROM books ORDER BY release_date DESC;	book_press
SELECT series , count(*) FROM books GROUP BY series ;	book_press
SELECT book_series , count(*) FROM books GROUP BY book_series ;	book_press
SELECT title , publish_date FROM book ORDER BY sales DESC LIMIT 5;	book_press
SELECT title , release_date FROM book ORDER BY sale_amount DESC LIMIT 5;	book_press
SELECT book_series_name FROM books GROUP BY book_series_name HAVING COUNT(*) > 1000 AND COUNT(*) < 500;	book_press
SELECT BookSeriesName FROM BookSeries WHERE SaleAmount > 1000 INTERSECT SELECT BookSeriesName FROM BookSeries WHERE SaleAmount < 500;	book_press
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "MM" INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "LT" INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "LT" AND T3.SeriesName = "MM"	book_press
SELECT T1.AuthorName FROM Author AS T1 JOIN Book AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "MM" INTERSECT SELECT T1.AuthorName FROM Author AS T1 JOIN Book AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "LT" INTERSECT SELECT T1.AuthorName FROM Author AS T1 JOIN Book AS T2 ON T1.AuthorID = T2.AuthorID JOIN Series AS T3 ON T2.SeriesID = T3.SeriesID WHERE T3.SeriesName = "LT" AND T3.SeriesName = "MM"	book_press
SELECT name , age FROM authors WHERE id NOT IN ( SELECT author_id FROM books ) ;	book_press
SELECT Name FROM Authors WHERE Id NOT IN (SELECT AuthorId FROM Books) ;	book_press
SELECT author_name FROM authors GROUP BY author_name HAVING count(*) > 1;	book_press
SELECT author_name FROM authors GROUP BY author_name HAVING count(*) > 1;	book_press
SELECT title , author_name , publisher_name FROM books ORDER BY sales DESC LIMIT 3;	book_press
SELECT title , author , press FROM book ORDER BY sales DESC LIMIT 3;	book_press
SELECT press_name , SUM(book_sale_amount) FROM sales GROUP BY press_name ;	book_press
SELECT press_name , SUM(book_sale_amount) FROM book_sales GROUP BY press_name;	book_press
SELECT press_name , count(*) FROM books GROUP BY press_name HAVING count(*) > 1000;	book_press
SELECT press_name , count(*) FROM sales GROUP BY press_name HAVING count(*) > 1000;	book_press
SELECT author_name FROM books ORDER BY sales DESC LIMIT 1;	book_press
SELECT author_name FROM books ORDER BY sales DESC LIMIT 1;	book_press
SELECT name , gender FROM author ORDER BY count(*) DESC LIMIT 1;	book_press
SELECT author_name , gender FROM authors ORDER BY count(*) DESC LIMIT 1;	book_press
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.BookPress = "Accor" GROUP BY T1.Name HAVING COUNT(*) = 0;	book_press
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID JOIN Press AS T3 ON T2.PressID = T3.PressID WHERE T3.Name != "Accor" GROUP BY T1.Name HAVING COUNT(*) = 0;	book_press
SELECT Name , Yearly_Profit_Billion FROM Press WHERE Yearly_Profit_Billion > 2;	book_press
SELECT name , SUM(profit)/1000000 AS yearly_profit FROM books GROUP BY name HAVING count(*) > 2;	book_press
SELECT count(*) FROM authors;	cre_Doc_Workflow
SELECT author_name FROM authors;	cre_Doc_Workflow
SELECT Name , FirstName , LastName , Address , City , State , Zip , Country , Email , Phone , Fax , Website , LinkedIn , Twitter , Instagram , Facebook , Other Details FROM Authors ORDER BY Name ASC;	cre_Doc_Workflow
SELECT * FROM authors WHERE author_name = "Addison Denesik" ;	cre_Doc_Workflow
SELECT count(*) FROM Documents;	cre_Doc_Workflow
SELECT author FROM document WHERE id = 4;	cre_Doc_Workflow
SELECT author FROM document WHERE title = "Travel to Brazil" LIMIT 1;	cre_Doc_Workflow
SELECT COUNT(*) FROM document AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T2.author_name = "Era Kerluke" ;	cre_Doc_Workflow
SELECT document_name , document_description FROM documents;	cre_Doc_Workflow
SELECT id , name FROM document WHERE author = "Bianka Cummings" ;	cre_Doc_Workflow
SELECT author_name , details FROM document WHERE document_name = "Travel to China" ;	cre_Doc_Workflow
SELECT author_name , count(*) FROM documents GROUP BY author_name ;	cre_Doc_Workflow
SELECT author_name FROM authors GROUP BY author_name ORDER BY count(*) DESC LIMIT 1;	cre_Doc_Workflow
SELECT author_name FROM authors GROUP BY author_name HAVING count(*) >= 2;	cre_Doc_Workflow
SELECT count(*) FROM Business_Processes;	cre_Doc_Workflow
SELECT next_process_id , process_name , process_description FROM processes WHERE process_id = 9;	cre_Doc_Workflow
SELECT process_name FROM processes WHERE id = 9 ORDER BY process_name DESC LIMIT 1;	cre_Doc_Workflow
SELECT count(*) FROM process_outcomes;	cre_Doc_Workflow
SELECT code , description FROM process_outcome;	cre_Doc_Workflow
SELECT description FROM process_outcome_code WHERE process_outcome_code = 'working' ;	cre_Doc_Workflow
SELECT count(*) FROM sysprocesses;	cre_Doc_Workflow
SELECT code , description FROM process_status;	cre_Doc_Workflow
SELECT description FROM process_status_code WHERE code = "ct" ;	cre_Doc_Workflow
SELECT count(*) FROM staff;	cre_Doc_Workflow
SELECT staff_id , * FROM staff ;	cre_Doc_Workflow
SELECT * FROM Staff WHERE StaffID = 100;	cre_Doc_Workflow
SELECT count(*) FROM staff_role;	cre_Doc_Workflow
SELECT code , description FROM staff_role;	cre_Doc_Workflow
SELECT description FROM roles WHERE role_code = "HR" ;	cre_Doc_Workflow
SELECT count(*) FROM documents WHERE process IS NOT NULL;	cre_Doc_Workflow
SELECT process_id FROM documents ORDER BY process_id ASC LIMIT 10;	cre_Doc_Workflow
SELECT document_id FROM documents WHERE process_id IS NULL;	cre_Doc_Workflow
SELECT process_id FROM documents GROUP BY process_id HAVING count(*) = 0;	cre_Doc_Workflow
SELECT T1.Process_Outcome_Description , T1.Process_Status_Description FROM Documents AS T1 JOIN Process_Outcomes AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_ID = 0;	cre_Doc_Workflow
SELECT process_name FROM documents WHERE document_name = "Travel to Brazil" ;	cre_Doc_Workflow
SELECT process_id , count(*) FROM documents GROUP BY process_id ;	cre_Doc_Workflow
SELECT COUNT(*) FROM document AS T1 JOIN staff AS T2 ON T1.doc_id = T2.staff_id WHERE T1.process_id = 9;	cre_Doc_Workflow
SELECT staff_id , count(*) FROM document_process GROUP BY staff_id ;	cre_Doc_Workflow
SELECT staff_role_code , count(*) FROM roles GROUP BY staff_role_code ;	cre_Doc_Workflow
SELECT count(DISTINCT role) FROM staff WHERE id = 3;	cre_Doc_Workflow
SELECT count(*) FROM agency;	advertising_agencies
SELECT count(*) FROM agency;	advertising_agencies
SELECT agency_id , agency_details FROM agency_details ORDER BY agency_id DESC LIMIT 10;	advertising_agencies
SELECT agency_id , agency_details FROM agency_details;	advertising_agencies
SELECT count(*) FROM clients;	advertising_agencies
SELECT count(*) FROM clients;	advertising_agencies
SELECT client_id , client_details FROM clients ORDER BY client_id ;	advertising_agencies
SELECT client_id , * FROM client_details;	advertising_agencies
SELECT agency_id , count(*) FROM clients GROUP BY agency_id ;	advertising_agencies
SELECT agency , count(*) FROM clients GROUP BY agency;	advertising_agencies
SELECT agency_id , count(*) FROM clients GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT agency_id , COUNT(*) FROM agencies GROUP BY agency_id ORDER BY COUNT(*) DESC LIMIT 1;	advertising_agencies
SELECT agency_id , COUNT(*) FROM clients GROUP BY agency_id HAVING COUNT(*) >= 2;	advertising_agencies
SELECT agency_id , count(*) FROM clients GROUP BY agency_id HAVING count(*) >= 2;	advertising_agencies
SELECT * FROM agency WHERE client_detail = 'Mac' LIMIT 1;	advertising_agencies
SELECT agency FROM clients WHERE detail = "Mac" LIMIT 10;	advertising_agencies
SELECT T1.ClientID , T1.ClientName , T1.AgentID , T1.AgentName , T2.AgentID , T2.AgentName FROM Clients AS T1 JOIN Agents AS T2 ON T1.AgentID = T2.AgentID ;	advertising_agencies
SELECT T1.ClientID , T1.ClientName , T1.AgentID , T1.AgentName , T1.AgentAddress , T1.AgentCity , T1.AgentState , T1.AgentZip , T1.AgentCountry , T1.AgentPhone , T1.AgentMobile , T1.AgentFax , T1.AgentEmail , T1.AgentWebsite , T2.AgentID , T2.AgentName , T2.AgentAddress , T2.AgentCity , T2.AgentState , T2.AgentZip , T2.AgentCountry , T2.AgentPhone , T2.AgentMobile , T2.AgentFax , T2.AgentEmail , T3.AgentID , T3.AgentName , T3.AgentAddress , T3.AgentCity , T3.AgentState , T3.AgentZip , T3.AgentCountry , T3.AgentPhone , T	advertising_agencies
SELECT code , count(*) FROM clients GROUP BY code ;	advertising_agencies
SELECT sic_code , count(*) FROM clients GROUP BY sic_code ;	advertising_agencies
SELECT client_id , * FROM clients WHERE sic_code = "Bad" ;	advertising_agencies
SELECT T1.client_id , T1.client_name , T1.client_code , T1.client_type , T1.client_description , T2.client_id , T2.client_name , T2.client_code , T2.client_type , T2.client_description , T3.client_id , T3.client_name , T3.client_code , T3.client_type , T3.client_description , T4.client_id , T4.client_name , T4.client_code , T4.client_type , T4.client_description , T5.client_id , T5.client_name , T5.client_code , T5.client_type , T5.client_description , T6.client_id , T6.client_name , T6.client_code , T6.client_type , T6.client_description , T7.client_id , T7.client_name , T7.client_code , T	advertising_agencies
SELECT agency_id , agency_name FROM agencies WHERE client_id IS NOT NULL ORDER BY agency_id ASC;	advertising_agencies
SELECT agency_id , agency_details FROM agencies WHERE client_id IS NOT NULL ORDER BY agency_id ;	advertising_agencies
SELECT agency_id FROM agencies WHERE client_id IS NULL;	advertising_agencies
SELECT agency_id FROM clients GROUP BY agency_id HAVING count(*) = 0;	advertising_agencies
SELECT count(*) FROM invoices;	advertising_agencies
SELECT count(*) FROM invoices;	advertising_agencies
SELECT id , status_code , details FROM invoices ORDER BY id ;	advertising_agencies
SELECT id , status , details FROM invoices;	advertising_agencies
SELECT client_id , count(*) FROM invoices GROUP BY client_id ;	advertising_agencies
SELECT client_id , count(*) FROM invoices GROUP BY client_id ;	advertising_agencies
SELECT client_id , count(*) FROM invoices GROUP BY client_id ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT client_id , details FROM invoices ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2;	advertising_agencies
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2;	advertising_agencies
SELECT status_code , count(*) FROM invoices GROUP BY status_code ;	advertising_agencies
SELECT status_code , count(*) FROM invoices GROUP BY status_code ;	advertising_agencies
SELECT status_code FROM invoices GROUP BY status_code ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT status FROM invoices GROUP BY status ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT T1.InvoiceStatusCode , T1.ClientId , T1.InvoiceStatus , T1.AgentId , T1.AgentName , T2.InvoiceStatus , T2.ClientId , T2.InvoiceStatus , T2.AgentId , T2.AgentName , T3.InvoiceStatus , T3.ClientId , T3.InvoiceStatus , T3.AgentId , T3.AgentName , T4.InvoiceStatus , T4.ClientId , T4.InvoiceStatus , T4.AgentId , T4.AgentName , T5.InvoiceStatus , T5.ClientId , T5.InvoiceStatus , T5.AgentId , T5.AgentName , T6.InvoiceStatus , T6.ClientId , T6.InvoiceStatus , T6.AgentId , T6.AgentName , T7.InvoiceStatus ,	advertising_agencies
SELECT T1.Invoice_Status , T1.Invoice_Details , T1.Client_ID , T1.Agent_ID , T2.Agent_Name , T2.Agent_Address , T2.Agent_City , T2.Agent_State , T2.Agent_Zip , T2.Agent_Phone , T2.Agent_Fax , T2.Agent_Email , T1.Agent_Name , T1.Agent_Address , T1.Agent_City , T1.Agent_State , T1.Agent_Zip , T1.Agent_Phone , T1.Agent_Fax , T1.Agent_Email , T1.Agent_Name , T1.Agent_Address , T1.Agent_City , T1.Agent_State , T1.Agent_Zip , T1.Agent_Phone , T1.Agent_Fax , T1.Agent_Email , T1.Agent_Name , T1.Agent_Address , T1.Agent_City	advertising_agencies
SELECT type_code , type_name FROM meeting_type ORDER BY type_code ASC;	advertising_agencies
SELECT * FROM meeting_details;	advertising_agencies
SELECT Outcome , Purpose FROM Meetings;	advertising_agencies
SELECT Outcome , Purpose FROM Meetings;	advertising_agencies
SELECT payment_id , * FROM invoices WHERE status = 'Working' ;	advertising_agencies
SELECT payment_id , payment_details FROM invoices WHERE status = "Working" ;	advertising_agencies
SELECT T1.invoice_id , T1.status FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.status = "Not Paid" GROUP BY T1.invoice_id ;	advertising_agencies
SELECT T1.invoice_id , T1.status FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.payment_status = "Not Paid" ;	advertising_agencies
SELECT count(*) FROM payments;	advertising_agencies
SELECT count(*) FROM payments;	advertising_agencies
SELECT payment_id , invoice_id , details FROM payment_details ORDER BY payment_id ASC;	advertising_agencies
SELECT payment_id , invoice_id , payment_details FROM payments;	advertising_agencies
SELECT DISTINCT invoice_id , status FROM payments GROUP BY invoice_id , status ;	advertising_agencies
SELECT DISTINCT T1.invoice_id , T1.status FROM payments AS T1 JOIN invoices AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id , T1.status ORDER BY T1.invoice_id ;	advertising_agencies
SELECT invoice_id , count(*) FROM invoices GROUP BY invoice_id ;	advertising_agencies
SELECT invoice_id , count(*) FROM payments GROUP BY invoice_id ;	advertising_agencies
SELECT T1.invoice_id , T1.status_code , T1.details FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT T1.invoice_id , T1.status , T1.details FROM invoices AS T1 JOIN payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT count(*) FROM staff;	advertising_agencies
SELECT COUNT(*) FROM staff;	advertising_agencies
SELECT agency_id , count(*) FROM agents GROUP BY agency_id ;	advertising_agencies
SELECT agency_id , count(*) FROM staff GROUP BY agency_id ;	advertising_agencies
SELECT agent_id , details FROM agency ORDER BY staff_count DESC LIMIT 1;	advertising_agencies
SELECT id , detail FROM agency ORDER BY staff_count DESC LIMIT 1;	advertising_agencies
SELECT outcome_code , count(*) FROM meetings GROUP BY outcome_code ;	advertising_agencies
SELECT Outcome , COUNT(*) FROM Meetings GROUP BY Outcome;	advertising_agencies
SELECT client_id , count(*) FROM meetings GROUP BY client_id ;	advertising_agencies
SELECT client_id , count(*) FROM meetings GROUP BY client_id ;	advertising_agencies
SELECT type_code , count(*) FROM meetings GROUP BY type_code ;	advertising_agencies
SELECT type , count(*) FROM meetings GROUP BY type;	advertising_agencies
SELECT T1.meeting_id , T1.meeting_outcome , T1.meeting_type , T1.client_attending FROM meeting AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id;	advertising_agencies
SELECT T1.meeting_id , T1.meeting_outcomes , T1.meeting_types , T1.client_details FROM meetings AS T1 JOIN client_details AS T2 ON T1.client_id = T2.client_id ORDER BY T1.meeting_id ;	advertising_agencies
SELECT meeting_id , count(*) FROM meetings GROUP BY meeting_id ;	advertising_agencies
SELECT T1.meeting_id , count(*) FROM staff AS T1 JOIN meeting AS T2 ON T1.meeting_id = T2.meeting_id GROUP BY T1.meeting_id ;	advertising_agencies
SELECT Staff_ID , COUNT(*) FROM Meetings GROUP BY Staff_ID HAVING COUNT(*) = ( SELECT COUNT(*) FROM Meetings WHERE Staff_ID = ( SELECT Staff_ID FROM Meetings GROUP BY Staff_ID ORDER BY COUNT(*) DESC LIMIT 1 ) ) ;	advertising_agencies
SELECT staff_id FROM staff WHERE staff_id IN (SELECT staff_id FROM attendance GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1) INTERSECT SELECT staff_id FROM staff WHERE staff_id IN (SELECT staff_id FROM attendance GROUP BY staff_id ORDER BY count(*) DESC LIMIT 1)	advertising_agencies
SELECT COUNT(*) FROM staff AS T1 JOIN staff_attendance AS T2 ON T1.staff_id = T2.staff_id WHERE T2.meeting_id = (SELECT meeting_id FROM staff_attendance GROUP BY meeting_id ORDER BY count(*) DESC LIMIT 1) ;	advertising_agencies
SELECT COUNT(DISTINCT T1.StaffID) FROM Staff AS T1 JOIN StaffAttendance AS T2 ON T1.StaffID = T2.StaffID JOIN Meeting AS T3 ON T2.MeetingID = T3.MeetingID GROUP BY T1.StaffID ORDER BY COUNT(*) DESC LIMIT 10;	advertising_agencies
SELECT COUNT(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM meetings)	advertising_agencies
SELECT COUNT(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM meetings) ;	advertising_agencies
SELECT T1.ClientID , T1.ClientName , T1.ClientEmail , T1.ClientPhone , T1.ClientAddress , T1.ClientCity , T1.ClientState , T1.ClientZip , T1.ClientCountry , T1.ClientPhone , T1.ClientEmail , T1.ClientAddress , T1.ClientCity , T1.ClientState , T1.ClientZip , T1.ClientCountry , T1.ClientPhone , T1.ClientEmail , T1.ClientAddress , T1.ClientCity , T1.ClientState , T1.ClientZip , T1.ClientCountry , T1.ClientPhone , T1.ClientEmail , T1.ClientAddress , T1.ClientCity , T1.ClientState , T1.ClientZip , T1.ClientCountry , T1.ClientPhone , T1.ClientEmail , T1.ClientAddress , T	advertising_agencies
SELECT client_id , client_name FROM clients WHERE client_id IN (SELECT client_id FROM meetings WHERE client_id IN (SELECT client_id FROM invoices)) INTERSECT SELECT client_id , client_name FROM clients WHERE client_id IN (SELECT client_id FROM invoices WHERE client_id IN (SELECT client_id FROM meetings))	advertising_agencies
SELECT staff_id , detail , count(*) FROM attendance WHERE detail = 's' GROUP BY staff_id HAVING count(*) >= 1;	advertising_agencies
SELECT staff_id , staff_details FROM staff WHERE staff_id IN (SELECT staff_id FROM attendance GROUP BY staff_id HAVING count(*) >= 1) AND staff_details LIKE '%s%' ;	advertising_agencies
SELECT T1.client_id , T1.sic_code , T1.agency_id FROM client AS T1 JOIN meeting AS T2 ON T1.client_id = T2.client_id JOIN invoice AS T3 ON T2.meeting_id = T3.meeting_id WHERE T3.invoice_id = 1 GROUP BY T1.client_id HAVING count(*) = 1;	advertising_agencies
SELECT id , sic_code , agency_id FROM clients WHERE meeting_id = 1 AND invoice_id = 1;	advertising_agencies
SELECT start_time , end_time , client_detail , staff_detail FROM meetings ORDER BY start_time ;	advertising_agencies
SELECT start_time , end_time , client , staff FROM meetings ORDER BY start_time , end_time ;	advertising_agencies
