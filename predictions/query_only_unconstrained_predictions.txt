SELECT count(*) FROM clubs ;	soccer_3
SELECT count(*) FROM clubs ;	soccer_3
SELECT name FROM clubs ORDER BY name ASC;	soccer_3
SELECT club FROM clubs ORDER BY club ASC;	soccer_3
SELECT DISTINCT manager , captain FROM clubs ;	soccer_3
SELECT manager , captain FROM clubs ;	soccer_3
SELECT name FROM clubs WHERE manufacturer != "Nike" ;	soccer_3
SELECT name FROM clubs WHERE manufacturer != 'Nike' ;	soccer_3
SELECT name FROM player ORDER BY wins ASC;	soccer_3
SELECT T1.Name FROM Players AS T1 JOIN Matches AS T2 ON T1.PlayerID = T2.PlayerID GROUP BY T1.Name ORDER BY count(*) ASC;	soccer_3
SELECT name FROM players ORDER BY earnings DESC LIMIT 1;	soccer_3
SELECT name FROM player ORDER BY salary DESC LIMIT 1;	soccer_3
SELECT DISTINCT Country FROM Players WHERE Earnings > 1200000 ;	soccer_3
SELECT T1.Country FROM Players AS T1 JOIN Matches AS T2 ON T1.PlayerID = T2.PlayerID GROUP BY T1.Country HAVING SUM(T2.Points) > 1200000 ORDER BY SUM(T2.Points) DESC;	soccer_3
SELECT T1.Country FROM Players AS T1 JOIN Matches AS T2 ON T1.PlayerID = T2.PlayerID GROUP BY T1.Country ORDER BY SUM(T2.Wins) DESC LIMIT 1;	soccer_3
SELECT Country FROM player WHERE Wins > 2 ORDER BY Wins DESC LIMIT 1;	soccer_3
SELECT T1.Name , T2.Name FROM Players AS T1 JOIN Clubs AS T2 ON T1.ClubID = T2.ClubID	soccer_3
SELECT T1.Name , T2.Club FROM Players AS T1 JOIN Clubs AS T2 ON T1.ClubID = T2.ClubID;	soccer_3
SELECT distinct club FROM player WHERE win_count > 2 ;	soccer_3
SELECT DISTINCT T1.Club FROM Club AS T1 JOIN Player AS T2 ON T1.ClubID = T2.ClubID GROUP BY T1.Club ORDER BY count(*) DESC LIMIT 10;	soccer_3
SELECT T1.Name FROM Players AS T1 JOIN Clubs AS T2 ON T1.ClubID = T2.ClubID WHERE T2.Manager = "Sam Allardyce"	soccer_3
SELECT DISTINCT T1.Name FROM Players AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID JOIN Managers AS T3 ON T2.ManagerID = T3.ManagerID WHERE T3.Name = "Sam Allardyce"	soccer_3
SELECT name FROM club ORDER BY avg_earnings DESC;	soccer_3
SELECT club , avg(earnings) FROM players GROUP BY club ORDER BY avg(earnings) DESC ;	soccer_3
SELECT manufacturer , count(*) FROM clubs GROUP BY manufacturer ;	soccer_3
SELECT manufacturer , count(*) FROM clubs GROUP BY manufacturer ;	soccer_3
SELECT manufacturer FROM clubs GROUP BY manufacturer ORDER BY count(*) DESC LIMIT 1;	soccer_3
SELECT manufacturer , count(*) FROM clubs GROUP BY manufacturer ORDER BY count(*) DESC LIMIT 1 ;	soccer_3
SELECT manufacturer FROM clubs GROUP BY manufacturer HAVING count(*) > 1 ;	soccer_3
SELECT manufacturer FROM clubs GROUP BY manufacturer HAVING count(*) > 1 ;	soccer_3
SELECT country FROM players GROUP BY country HAVING count(*) > 1 ;	soccer_3
SELECT country FROM players GROUP BY country HAVING count(*) > 1 ;	soccer_3
SELECT club_name FROM clubs WHERE club_id NOT IN (SELECT club_id FROM players) ;	soccer_3
SELECT distinct club FROM player GROUP BY club HAVING count(*) = 0 ;	soccer_3
SELECT country FROM players WHERE earnings > 1400000 UNION SELECT country FROM players WHERE earnings < 1100000 ;	soccer_3
SELECT Country FROM Players WHERE Earnings > 1400000 INTERSECT SELECT Country FROM Players WHERE Earnings < 1100000 ;	soccer_3
SELECT count(DISTINCT country) FROM players;	soccer_3
SELECT count(DISTINCT country) FROM players;	soccer_3
SELECT Earnings FROM Players WHERE Country = "Australia" OR Country = "Zimbabwe" ;	soccer_3
SELECT SUM(Earnings) FROM Players WHERE Country IN ('Australia', 'Zimbabwe')	soccer_3
SELECT customer_id , first_name , last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) > 2 ) INTERSECT SELECT customer_id , first_name , last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) > 3 )	e_commerce
SELECT customer_id , first_name , last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) > 2 ) INTERSECT SELECT customer_id , first_name , last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) >= 3 )	e_commerce
SELECT order_id , status , count(*) FROM orders GROUP BY order_id , status ;	e_commerce
SELECT count(*) , order_status , order_id FROM orders GROUP BY order_status , order_id ;	e_commerce
SELECT order_date FROM orders ORDER BY order_date ASC LIMIT 1 UNION SELECT order_date FROM orders GROUP BY order_date HAVING count(*) > 1 ;	e_commerce
SELECT min(o.order_date) , max(o.order_date) FROM orders AS o JOIN order_items AS oi ON o.order_id = oi.order_id GROUP BY oi.order_id HAVING count(*) > 1 ;	e_commerce
SELECT first_name , middle_init , last_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM orders ) ;	e_commerce
SELECT first_name , middle_name , last_name FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM orders ) ;	e_commerce
SELECT T1.id , T1.name , T1.price , T1.color FROM products AS T1 JOIN orders AS T2 ON T1.id = T2.product_id GROUP BY T1.id HAVING count(*) < 2 ;	e_commerce
SELECT id , name , price , color FROM products WHERE id IN ( SELECT product_id FROM orders GROUP BY product_id HAVING count(*) < 2 ) ;	e_commerce
SELECT order_id , order_date FROM Orders WHERE order_id IN ( SELECT order_id FROM Products GROUP BY order_id HAVING count(*) >= 2 ) ;	e_commerce
SELECT order_id , order_date FROM orders GROUP BY order_id HAVING count(*) >= 2 ;	e_commerce
SELECT product_id , product_name , price FROM Products WHERE product_id IN ( SELECT product_id FROM Orders GROUP BY product_id ORDER BY count(*) DESC LIMIT 1 ) ;	e_commerce
SELECT ProductID , ProductName , Price FROM Products ORDER BY Quantity DESC LIMIT 10;	e_commerce
SELECT order_id , sum(product_price) FROM orders GROUP BY order_id ORDER BY sum(product_price) ASC LIMIT 1 ;	e_commerce
SELECT order_id , sum(total_cost) FROM orders GROUP BY order_id ORDER BY sum(total_cost) ASC LIMIT 1 ;	e_commerce
SELECT payment_method , count(*) FROM transactions GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1 ;	e_commerce
SELECT payment_method , count(*) FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1 ;	e_commerce
SELECT gender , count(*) FROM products GROUP BY gender ;	e_commerce
SELECT gender , count(*) FROM products GROUP BY gender ;	e_commerce
SELECT gender , count(*) FROM orders GROUP BY gender ;	e_commerce
SELECT gender , count(*) FROM orders GROUP BY gender ;	e_commerce
SELECT first_name , middle_name , last_name , payment_method FROM customers ;	e_commerce
SELECT first_name , middle_name , last_name , payment_method FROM customers ;	e_commerce
SELECT Invoice_Status , Invoice_Date , Shipment_Date FROM Invoices ;	e_commerce
SELECT Status , Date , ShipmentDate FROM Invoices ;	e_commerce
SELECT ProductName , ShipmentDate FROM Products ;	e_commerce
SELECT Product_Name , Shipped_Dt FROM Products ;	e_commerce
SELECT status_code , shipment_tracking_number FROM orders ;	e_commerce
SELECT status_code , shipment_tracking_number FROM items ORDER BY status_code ASC , shipment_tracking_number ASC ;	e_commerce
SELECT T1.product_name , T2.color FROM order_items AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.status = 'Shipped' ;	e_commerce
SELECT product_name , product_color FROM products WHERE product_shipped = 1 ;	e_commerce
SELECT DISTINCT T1.product_name , T1.price , T1.description FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T1.gender = 'F'	e_commerce
SELECT DISTINCT T1.Name , T1.Price , T1.Description FROM Products AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Gender = 'F' ;	e_commerce
SELECT invoice_status FROM orders WHERE order_status != 'Shipped' ;	e_commerce
SELECT invoice_status FROM orders WHERE order_status != 'Shipped' ;	e_commerce
SELECT OrderID , OrderDate , TotalCost FROM Orders ;	e_commerce
SELECT order_id , order_date , total_amount FROM orders ;	e_commerce
SELECT count(*) FROM customers;	e_commerce
SELECT count(DISTINCT customer_id) FROM orders;	e_commerce
SELECT count(*) FROM item_state;	e_commerce
SELECT count(DISTINCT item_status_code) FROM ordered_items;	e_commerce
SELECT count(DISTINCT payment_method) FROM customers;	e_commerce
SELECT count(DISTINCT payment_method) FROM customers;	e_commerce
SELECT login_name , password FROM customers WHERE phone_number LIKE '+12%' ;	e_commerce
SELECT username , password FROM customers WHERE phone_number LIKE '+12%' ;	e_commerce
SELECT product_size FROM products WHERE product_name LIKE '%Dell%' ;	e_commerce
SELECT size FROM products WHERE name LIKE '%Dell%' ;	e_commerce
SELECT product_price , product_size FROM products WHERE product_price > ( SELECT avg(product_price) FROM products ) ;	e_commerce
SELECT price , size FROM products WHERE price > ( SELECT avg(price) FROM products ) ;	e_commerce
SELECT count(*) FROM products WHERE sold = 0 ;	e_commerce
SELECT count(*) FROM Products WHERE ProductID NOT IN (SELECT ProductID FROM Orders) ;	e_commerce
SELECT count(*) FROM customers WHERE payment_method_id is null ;	e_commerce
SELECT count(*) FROM customers WHERE payment_method_id is null ;	e_commerce
SELECT DISTINCT order_status , order_date FROM orders ;	e_commerce
SELECT status_code , order_date FROM orders ;	e_commerce
SELECT address , town , county FROM customers WHERE country = "USA" ;	e_commerce
SELECT address , town , county FROM customers WHERE country = "United States" ;	e_commerce
SELECT T1.first_name , T2.product_name FROM buyers AS T1 JOIN products AS T2 ON T1.buyer_id = T2.buyer_id ;	e_commerce
SELECT T1.first_name , T2.product_name FROM buyers AS T1 JOIN orders AS T2 ON T1.buyer_id = T2.buyer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id ORDER BY T1.first_name , T2.product_name;	e_commerce
SELECT count(*) FROM items ;	e_commerce
SELECT count(*) FROM products;	e_commerce
SELECT avg(price) FROM products;	e_commerce
SELECT avg(price) FROM products;	e_commerce
SELECT avg(price) FROM products;	e_commerce
SELECT avg(price) FROM products;	e_commerce
SELECT email , town , county FROM customers GROUP BY email , town , county ORDER BY count(*) DESC LIMIT 10;	e_commerce
SELECT email , city , county FROM customers WHERE gender = ( SELECT gender FROM orders GROUP BY gender ORDER BY count(*) LIMIT 1 ) ;	e_commerce
SELECT order_date FROM orders WHERE customer_id IN (SELECT customer_id FROM payments GROUP BY customer_id HAVING count(*) >= 2) GROUP BY order_date;	e_commerce
SELECT order_date FROM orders GROUP BY order_date HAVING count(*) >= 2 ;	e_commerce
SELECT order_status FROM orders GROUP BY order_status ORDER BY count(*) DESC LIMIT 1;	e_commerce
SELECT DISTINCT order_status FROM orders GROUP BY order_status ORDER BY count(*) LIMIT 1;	e_commerce
SELECT id , description FROM products WHERE price > 3 GROUP BY id , description HAVING count(*) > 1 ;	e_commerce
SELECT ProductID , Description FROM Products WHERE ProductID IN ( SELECT ProductID FROM Sales WHERE Quantity > 3 GROUP BY ProductID HAVING COUNT(*) > 3 ) ;	e_commerce
SELECT InvoiceDate , InvoiceID FROM Invoices WHERE InvoiceID IN ( SELECT InvoiceID FROM Shipments GROUP BY InvoiceID HAVING COUNT(*) >= 2 ) ;	e_commerce
SELECT InvoiceID , InvoiceDate FROM Invoices WHERE InvoiceID IN ( SELECT InvoiceID FROM Shipments GROUP BY InvoiceID HAVING COUNT(*) >= 2 ) ;	e_commerce
SELECT Shipment_Tracking_Number , Shipment_Date FROM Shipment ;	e_commerce
SELECT T1.tracking_number , T1.shipment_date FROM shipments AS T1 JOIN shipments_details AS T2 ON T1.shipment_id = T2.shipment_id ORDER BY T1.shipment_date ASC ;	e_commerce
SELECT color , description , size FROM products WHERE price < ( SELECT max(price) FROM products ) ;	e_commerce
SELECT Color , Description , Size FROM Products WHERE Price < ( SELECT MAX( Price ) FROM Products ) ;	e_commerce
SELECT name FROM directors WHERE age > (SELECT avg(age) FROM directors)	bbc_channels
SELECT name FROM directors ORDER BY age DESC LIMIT 1;	bbc_channels
SELECT count(*) FROM channels WHERE internet_link LIKE '%bbc%' ;	bbc_channels
SELECT count(DISTINCT channel_id) FROM channels ;	bbc_channels
SELECT program_title FROM programs ORDER BY start_year DESC LIMIT 1;	bbc_channels
SELECT director , count(*) FROM programs GROUP BY director ORDER BY count(*) DESC LIMIT 1 ;	bbc_channels
SELECT T1.name , T1.age FROM directors AS T1 JOIN programs AS T2 ON T1.id = T2.director_id GROUP BY T2.director_id ORDER BY count(*) DESC LIMIT 1;	bbc_channels
SELECT title FROM programs ORDER BY start_date DESC LIMIT 1;	bbc_channels
SELECT T1.Name , T1.Website FROM Channel AS T1 JOIN Program AS T2 ON T1.ChannelID = T2.ChannelID GROUP BY T1.ChannelID HAVING count(*) > 1 ;	bbc_channels
SELECT channel , count(*) FROM programs GROUP BY channel ;	bbc_channels
SELECT count(*) FROM channels;	bbc_channels
SELECT name FROM directors WHERE id IN (SELECT director_id FROM programs WHERE title = "Dracula")	bbc_channels
SELECT T1.name , T1.web FROM channel AS T1 JOIN director AS T2 ON T1.id = T2.channel_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;	bbc_channels
SELECT name FROM directors WHERE age BETWEEN 30 AND 60;	bbc_channels
SELECT channel FROM directors WHERE director_age < 40 INTERSECT SELECT channel FROM directors WHERE director_age > 60	bbc_channels
SELECT id , name FROM channel WHERE director != 'Hank Baskett' ;	bbc_channels
SELECT count(*) FROM radios ;	tv_shows
SELECT transmitter FROM radios ORDER BY erp_kw ASC ;	tv_shows
SELECT Name , Original_Air_Date FROM TV_Shows ;	tv_shows
SELECT DISTINCT T1.StationName FROM Channel AS T1 JOIN CityChannel AS T2 ON T1.ChannelID = T2.ChannelID WHERE T2.Affiliation != "ABC"	tv_shows
SELECT Transmitter FROM radios WHERE ERP > 150 OR ERP < 30 ;	tv_shows
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1;	tv_shows
SELECT avg(erp) FROM radios;	tv_shows
SELECT affiliation , count(*) FROM city_channels GROUP BY affiliation ;	tv_shows
SELECT affiliation FROM city_channels GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1;	tv_shows
SELECT affiliation FROM city_channels GROUP BY affiliation HAVING count(*) > 3 ;	tv_shows
SELECT city , station FROM city_channels ORDER BY station ASC ;	tv_shows
SELECT Transmitter , City FROM Radio , Channel WHERE Radio.ChannelID = Channel.ChannelID ;	tv_shows
SELECT Transmitter , Station_Name FROM Radio , Channel WHERE Radio.Channel_ID = Channel.Channel_ID ORDER BY Radio.ERP DESC ;	tv_shows
SELECT transmitters , count(*) FROM radios GROUP BY transmitters ;	tv_shows
SELECT DISTINCT T1.Transmitter FROM Radio AS T1 JOIN Channel AS T2 ON T1.ChannelID = T2.ChannelID WHERE T2.CityChannelID IS NULL;	tv_shows
SELECT model FROM vehicles WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1;	vehicle_driver
SELECT model FROM vehicles WHERE power > 6000 ORDER BY top_speed DESC LIMIT 1;	vehicle_driver
SELECT name FROM driver WHERE citizenship = 'United States' ;	vehicle_driver
SELECT name FROM drivers WHERE citizenship = "United States"	vehicle_driver
SELECT count(*) , driver_id FROM drivers GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1 ;	vehicle_driver
SELECT driver_id , count(*) FROM vehicles GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1 ;	vehicle_driver
SELECT max(power), avg(power) FROM vehicles WHERE manufacturer = 'Zhuzhou' ;	vehicle_driver
SELECT max(power), avg(power) FROM vehicles WHERE manufacturer = "Zhuzhou" ;	vehicle_driver
SELECT vehicle_id FROM vehicle_driven GROUP BY vehicle_id ORDER BY count(*) LIMIT 1;	vehicle_driver
SELECT id FROM vehicles GROUP BY id ORDER BY count(*) LIMIT 1;	vehicle_driver
SELECT max(speed), max(power) FROM vehicle WHERE year = 1996 ;	vehicle_driver
SELECT top_speed , power FROM vehicles WHERE year_built = 1996 ORDER BY top_speed DESC LIMIT 1;	vehicle_driver
SELECT build_year , model_name , builder FROM vehicles ;	vehicle_driver
SELECT build_year , model , builder FROM vehicles ;	vehicle_driver
SELECT count(*) FROM driver JOIN vehicle ON driver.driver_id = vehicle.driver_id WHERE YEAR(vehicle.year) = 2012 ;	vehicle_driver
SELECT count(DISTINCT DriverID) FROM Vehicles WHERE YearBuilt = 2012 ;	vehicle_driver
SELECT count(*) FROM Driver WHERE Team = "NASCAR" ;	vehicle_driver
SELECT count(*) FROM Driver WHERE RaceTeam = "NASCAR" ;	vehicle_driver
SELECT AVG(TopSpeed) FROM Vehicles;	vehicle_driver
SELECT avg(TopSpeed) FROM Vehicles;	vehicle_driver
SELECT DISTINCT T1.DriverName FROM Driver AS T1 JOIN Vehicle AS T2 ON T1.DriverID = T2.DriverID WHERE T2.Power > 5000 ;	vehicle_driver
SELECT name FROM drivers WHERE vehicle_power > 5000;	vehicle_driver
SELECT model FROM cars WHERE total_production > 100 OR top_speed > 150 ;	vehicle_driver
SELECT DISTINCT model FROM cars WHERE total_production > 100 OR top_speed > 150 ;	vehicle_driver
SELECT Model_Name , Build_Year FROM Cars WHERE Model_Name LIKE '%DJ%' ;	vehicle_driver
SELECT Model , Build_Year FROM Cars WHERE Model LIKE "%DJ%" ;	vehicle_driver
SELECT model FROM cars WHERE model NOT IN (SELECT model FROM drivers) ;	vehicle_driver
SELECT DISTINCT model FROM VEHICLES WHERE model NOT IN (SELECT model FROM DRIVES) ;	vehicle_driver
SELECT VehicleID , Model FROM Vehicle WHERE DriverID IN ( SELECT DriverID FROM Driver GROUP BY DriverID HAVING COUNT(*) > 2 ) INTERSECT SELECT VehicleID , Model FROM Vehicle WHERE Manufacturer = 'Ziyang'	vehicle_driver
SELECT T1.id , T1.model FROM vehicles AS T1 JOIN drivers AS T2 ON T1.id = T2.vehicle_id WHERE T1.driver_id = T2.driver_id GROUP BY T1.id HAVING count(*) = 2 INTERSECT SELECT T1.id , T1.model FROM vehicles AS T1 JOIN manufacturers AS T2 ON T1.manufacturer_id = T2.id WHERE T2.name = "Ziyang" GROUP BY T1.id;	vehicle_driver
SELECT VehicleID , Model FROM Vehicles WHERE DriverID IN ( SELECT DriverID FROM Drivers WHERE DriverName = 'Jeff Gordon' ) OR DriverID > 2 GROUP BY VehicleID , Model HAVING COUNT(*) > 2 ;	vehicle_driver
SELECT id , model FROM vehicles WHERE id IN ( SELECT vehicle_id FROM drivers GROUP BY vehicle_id HAVING count(*) > 2 ) INTERSECT SELECT id , model FROM vehicles WHERE driver_id = "Jeff Gordon"	vehicle_driver
SELECT count(*) FROM vehicles ;	vehicle_driver
SELECT count(*) FROM vehicles WHERE top_speed = ( SELECT max(top_speed) FROM vehicles ) ;	vehicle_driver
SELECT name FROM drivers ORDER BY name ASC;	vehicle_driver
SELECT name FROM Drivers ORDER BY name ASC;	vehicle_driver
SELECT race_series , count(*) FROM drivers GROUP BY race_series ;	vehicle_driver
SELECT series , count(*) FROM driver_race GROUP BY series ;	vehicle_driver
SELECT T1.Name , T1.Citizenship FROM Driver AS T1 JOIN Vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Model = 'DJ1' ;	vehicle_driver
SELECT name , citizenship FROM driver WHERE vehicle_model = 'DJ1' ;	vehicle_driver
SELECT count(*) FROM drivers WHERE driver_id NOT IN (SELECT driver_id FROM cars) ;	vehicle_driver
SELECT count(*) FROM drivers WHERE driver_id NOT IN (SELECT driver_id FROM vehicles) ;	vehicle_driver
SELECT count(*) FROM exams ;	online_exams
SELECT count(*) FROM exams ;	online_exams
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC ;	online_exams
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC ;	online_exams
SELECT name , date FROM exam WHERE subject_code != 'Database' ;	online_exams
SELECT exam_date , exam_name FROM exam WHERE subject_code != 'Database' ;	online_exams
SELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC;	online_exams
SELECT exam_date FROM exams WHERE subject_code LIKE "%data%" ORDER BY exam_date DESC;	online_exams
SELECT question_type , count(*) FROM questions GROUP BY question_type ;	online_exams
SELECT type_code , count(*) FROM questions GROUP BY type_code ;	online_exams
SELECT DISTINCT StudentAnswer FROM Comments WHERE CommentText = "Normal" ;	online_exams
SELECT DISTINCT StudentAnswer FROM Comments WHERE CommentText = "Normal" ;	online_exams
SELECT count(DISTINCT comment_id) FROM answer_comments;	online_exams
SELECT count(DISTINCT comment) FROM answers;	online_exams
SELECT text FROM student_answers ORDER BY count DESC;	online_exams
SELECT text FROM student_answers GROUP BY text ORDER BY count(*) DESC;	online_exams
SELECT first_name , answer_date FROM student_answers ORDER BY answer_date ASC ;	online_exams
SELECT first_name , answer_date FROM student_answer ;	online_exams
SELECT email , answer_date FROM answers ORDER BY answer_date DESC ;	online_exams
SELECT email , answer_date FROM student_answers ORDER BY answer_date DESC ;	online_exams
SELECT DISTINCT assessment FROM students GROUP BY assessment ORDER BY count(*) LIMIT 1;	online_exams
SELECT * FROM assessment GROUP BY assessment_id ORDER BY count(*) LIMIT 1;	online_exams
SELECT first_name FROM student WHERE student_id IN (SELECT student_id FROM answer GROUP BY student_id HAVING count(*) >= 2) ;	online_exams
SELECT first_name FROM students WHERE student_id IN ( SELECT student_id FROM answer_records GROUP BY student_id HAVING count(*) >= 2 ) ;	online_exams
SELECT answer_text FROM answers GROUP BY answer_text ORDER BY count(*) DESC LIMIT 1;	online_exams
SELECT answer FROM answers GROUP BY answer ORDER BY count(*) DESC LIMIT 1;	online_exams
SELECT last_name FROM students WHERE gender != 'M' ;	online_exams
SELECT last_name FROM students WHERE gender != 'M' ORDER BY last_name DESC;	online_exams
SELECT gender , count(*) FROM students GROUP BY gender ;	online_exams
SELECT GENDER_CODE , COUNT(*) FROM STUDENT GROUP BY GENDER_CODE ;	online_exams
SELECT last_name FROM students WHERE gender = "F" OR gender = "M" ;	online_exams
SELECT last_name FROM students WHERE gender = "F" OR gender = "M" ;	online_exams
SELECT first_name FROM student WHERE id NOT IN (SELECT student_id FROM answer) ;	online_exams
SELECT first_name FROM students WHERE id NOT IN (SELECT student_id FROM answers) ;	online_exams
SELECT StudentAnswerText FROM StudentAnswer WHERE Comment IN ("Normal", "Absent") GROUP BY StudentAnswerText HAVING COUNT(*) = 2;	online_exams
SELECT T1.text FROM answer AS T1 JOIN comment AS T2 ON T1.student_id = T2.student_id WHERE T2.comment = "Normal" INTERSECT SELECT T1.text FROM answer AS T1 JOIN comment AS T2 ON T1.student_id = T2.student_id WHERE T2.comment = "Absent"	online_exams
SELECT question_type FROM questions GROUP BY question_type HAVING count(*) >= 3 ;	online_exams
SELECT question_type FROM questions GROUP BY question_type HAVING count(*) >= 3 ;	online_exams
SELECT * FROM students ;	online_exams
SELECT * FROM student ;	online_exams
SELECT count(*) FROM address;	customers_and_orders
SELECT count(*) FROM addresses;	customers_and_orders
SELECT address_id , address , city , state , zip FROM addresses ;	customers_and_orders
SELECT address_id , address , city , state , zip FROM addresses ;	customers_and_orders
SELECT count(*) FROM products ;	customers_and_orders
SELECT count(*) FROM products;	customers_and_orders
SELECT product_id , product_type_code , product_name FROM products ;	customers_and_orders
SELECT id , type_code , name FROM products ;	customers_and_orders
SELECT price FROM products WHERE name = "Monitor" ;	customers_and_orders
SELECT Price FROM Products WHERE ProductName = "Monitor" ;	customers_and_orders
SELECT min(price) , avg(price) , max(price) FROM products ;	customers_and_orders
SELECT min(price) , avg(price) , max(price) FROM products ;	customers_and_orders
SELECT avg(price) FROM products WHERE type = "Clothes" ;	customers_and_orders
SELECT avg(price) FROM Clothes;	customers_and_orders
SELECT count(*) FROM hardware_type_product;	customers_and_orders
SELECT count(*) FROM products WHERE type = 'Hardware' ;	customers_and_orders
SELECT product_name FROM products WHERE price > (SELECT avg(price) FROM products) ;	customers_and_orders
SELECT name FROM products WHERE price > (SELECT avg(price) FROM products) ;	customers_and_orders
SELECT ProductName FROM Hardware WHERE Price > (SELECT avg(Price) FROM HardwareType) GROUP BY ProductName;	customers_and_orders
SELECT ProductName FROM Hardware WHERE Price > (SELECT avg(Price) FROM Hardware)	customers_and_orders
SELECT name FROM products WHERE type = "Clothes" ORDER BY price DESC LIMIT 1;	customers_and_orders
SELECT name FROM Clothes ORDER BY price DESC LIMIT 1;	customers_and_orders
SELECT product_id , product_name FROM products WHERE product_type = 'Hardware' ORDER BY price ASC LIMIT 1;	customers_and_orders
SELECT id , name FROM hardware ORDER BY price ASC LIMIT 1;	customers_and_orders
SELECT product_name FROM products ORDER BY price DESC;	customers_and_orders
SELECT product_name FROM products ORDER BY price DESC;	customers_and_orders
SELECT Hardware_Type FROM Products ORDER BY Price ASC;	customers_and_orders
SELECT ProductName FROM Hardware ORDER BY Price ASC;	customers_and_orders
SELECT product_type_code , count(*) FROM products GROUP BY product_type_code ;	customers_and_orders
SELECT product_type , count(*) FROM products GROUP BY product_type ;	customers_and_orders
SELECT product_type_code , avg(price) FROM products GROUP BY product_type_code ;	customers_and_orders
SELECT product_type , avg(price) FROM products GROUP BY product_type ;	customers_and_orders
SELECT DISTINCT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2 ;	customers_and_orders
SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*) >= 2 ;	customers_and_orders
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT count(*) FROM customers;	customers_and_orders
SELECT count(*) FROM customers;	customers_and_orders
SELECT customer_id , customer_name FROM customers ;	customers_and_orders
SELECT id , name FROM customers ;	customers_and_orders
SELECT customer_address , customer_phone , customer_email FROM customers WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT address , phone , email FROM customers WHERE first_name = "Jeromy" ;	customers_and_orders
SELECT payment_method_code , count(*) FROM customers GROUP BY payment_method_code ;	customers_and_orders
SELECT payment_method , count(*) FROM customers GROUP BY payment_method ;	customers_and_orders
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT code FROM payment_method GROUP BY code ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT customer_name FROM payment_method GROUP BY customer_name ORDER BY count(*) LIMIT 1;	customers_and_orders
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM payments GROUP BY customer_id ORDER BY count(*) LIMIT 1)	customers_and_orders
SELECT payment_method , customer_number FROM customers WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT PaymentMethodCode , CustomerNumber FROM Customers WHERE CustomerName = "Jeromy" ;	customers_and_orders
SELECT DISTINCT payment_method FROM customers;	customers_and_orders
SELECT DISTINCT payment_method_code FROM customers;	customers_and_orders
SELECT id , product_type FROM products ORDER BY product_name;	customers_and_orders
SELECT id , product_type FROM products ORDER BY product_name ASC ;	customers_and_orders
SELECT product_type FROM products GROUP BY product_type ORDER BY count(*) LIMIT 1;	customers_and_orders
SELECT code FROM product_type GROUP BY code ORDER BY count(*) LIMIT 1;	customers_and_orders
SELECT count(*) FROM orders ;	customers_and_orders
SELECT count(*) FROM orders;	customers_and_orders
SELECT order_id , order_date , order_status_code FROM orders WHERE customer_id = ( SELECT customer_id FROM customers WHERE customer_name = 'Jeromy' ) ;	customers_and_orders
SELECT order_id , order_date , status_code FROM orders WHERE customer_name = "Jeromy" ;	customers_and_orders
SELECT customer_name , customer_id , count(*) FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name , customer_id	customers_and_orders
SELECT T1.name , T1.id , count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.id = T2.customer_id GROUP BY T1.id , T1.name ;	customers_and_orders
SELECT customer_id , name , phone , email FROM customers WHERE customer_id = ( SELECT customer_id FROM orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 )	customers_and_orders
SELECT T1.id , T1.name , T1.phone , T1.email FROM customers AS T1 JOIN orders AS T2 ON T1.id = T2.customer_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT status , count(*) FROM orders GROUP BY status ;	customers_and_orders
SELECT order_status_code , count(*) FROM orders GROUP BY order_status_code ;	customers_and_orders
SELECT status FROM orders GROUP BY status ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT status FROM orders GROUP BY status ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT ProductName FROM Products WHERE ProductID NOT IN (SELECT ProductID FROM Orders) ;	customers_and_orders
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM orders) ;	customers_and_orders
SELECT count(*) FROM orders WHERE product_name = "Monitor" ;	customers_and_orders
SELECT count(*) FROM monitor ORDER BY count(*) DESC LIMIT 1;	customers_and_orders
SELECT count(*) FROM orders WHERE product_name = "Monitor" ;	customers_and_orders
SELECT count(DISTINCT customer_id) FROM products WHERE product_type = "Monitor" ;	customers_and_orders
SELECT count(*) FROM customers;	customers_and_orders
SELECT count(DISTINCT customer_id) FROM orders;	customers_and_orders
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	customers_and_orders
SELECT order_date , order_id FROM orders WHERE order_quantity > 6 OR order_quantity > 3 GROUP BY order_date , order_id HAVING count(*) > 1 ;	customers_and_orders
SELECT OrderID , OrderDate FROM Orders WHERE Quantity > 6 OR ProductCount > 3 ;	customers_and_orders
SELECT count(*) FROM buildings ;	region_building
SELECT count(*) FROM buildings ;	region_building
SELECT name FROM buildings ORDER BY stories ASC;	region_building
SELECT building_name FROM buildings ORDER BY stories ASC;	region_building
SELECT address FROM buildings ORDER BY completion_year DESC;	region_building
SELECT building_address FROM buildings ORDER BY building_completion_year DESC;	region_building
SELECT max(stories) FROM buildings WHERE yearcompleted != 1980 ;	region_building
SELECT max(stories) FROM buildings WHERE yearcompleted != 1980 ;	region_building
SELECT avg(population) FROM regions;	region_building
SELECT avg(population) FROM regions;	region_building
SELECT name FROM regions ORDER BY name ASC;	region_building
SELECT name FROM regions ORDER BY name ASC;	region_building
SELECT T1.capital FROM Region AS T1 JOIN Country AS T2 ON T1.regionid = T2.regionid WHERE T2.area > 10000;	region_building
SELECT capital FROM regions WHERE area > 10000 ;	region_building
SELECT region , capital FROM regions ORDER BY population DESC LIMIT 1 ;	region_building
SELECT T1.Region , T1.Capital FROM Region AS T1 JOIN Population AS T2 ON T1.RegionCode = T2.RegionCode ORDER BY T2.Population DESC LIMIT 1 ;	region_building
SELECT name FROM regions ORDER BY area DESC LIMIT 5;	region_building
SELECT name FROM regions ORDER BY area DESC LIMIT 5;	region_building
SELECT BuildingName , RegionName FROM BuildingRegion;	region_building
SELECT building_name , region_name FROM buildings ;	region_building
SELECT region FROM buildings GROUP BY region HAVING count(*) > 1 ;	region_building
SELECT region FROM buildings GROUP BY region HAVING count(*) > 1 ;	region_building
SELECT T1.capital FROM region AS T1 JOIN buildings AS T2 ON T1.regionid = T2.regionid GROUP BY T1.capital ORDER BY count(*) DESC LIMIT 1;	region_building
SELECT region , count(*) FROM buildings GROUP BY region ORDER BY count(*) DESC LIMIT 1 ; SELECT capital FROM regions WHERE region = ( SELECT region FROM buildings GROUP BY region ORDER BY count(*) DESC LIMIT 1 ) ;	region_building
SELECT T1.address , T2.capital FROM building AS T1 JOIN region AS T2 ON T1.regionid = T2.regionid ;	region_building
SELECT address , region FROM building ;	region_building
SELECT count(*) FROM buildings WHERE region = "Abruzzo" ;	region_building
SELECT building , count(*) FROM stories WHERE region = "Abruzzo" GROUP BY building ;	region_building
SELECT year , count(*) FROM buildings GROUP BY year ;	region_building
SELECT year , count(*) FROM buildings GROUP BY year ;	region_building
SELECT year FROM buildings GROUP BY year ORDER BY count(*) DESC LIMIT 1;	region_building
SELECT year , count(*) FROM buildings GROUP BY year ORDER BY count(*) DESC LIMIT 1 ;	region_building
SELECT region FROM buildings GROUP BY region HAVING count(*) = 0 ;	region_building
SELECT region FROM buildings GROUP BY region HAVING count(*) = 0 ;	region_building
SELECT DISTINCT T1.Year FROM Buildings AS T1 JOIN Stories AS T2 ON T1.BuildingID = T2.BuildingID GROUP BY T1.Year HAVING count(*) > 20 OR count(*) < 15 ;	region_building
SELECT DISTINCT year FROM buildings WHERE stories > 20 INTERSECT SELECT DISTINCT year FROM buildings WHERE stories < 15 ;	region_building
SELECT DISTINCT address FROM buildings ;	region_building
SELECT DISTINCT address FROM buildings ORDER BY address;	region_building
SELECT year FROM buildings ORDER BY stories DESC;	region_building
SELECT completion_year FROM buildings ORDER BY num_stories DESC;	region_building
SELECT * FROM channel ORDER BY channel_name ASC ;	government_shift
SELECT * FROM channel ORDER BY channel_name ASC ;	government_shift
SELECT count(*) FROM services ;	government_shift
SELECT count(*) FROM services;	government_shift
SELECT count(*) , layer_type_code FROM layers GROUP BY layer_type_code ORDER BY count(*) DESC LIMIT 1 ;	government_shift
SELECT Analytical_Layer_Type_Code FROM Analytical_Layers GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;	government_shift
SELECT * FROM services WHERE customer_name = "Hardy Kutch" ;	government_shift
SELECT service_details FROM customers WHERE customer_details = "Hardy Kutch" ;	government_shift
SELECT * FROM services WHERE service_id IN ( SELECT service_id FROM usage GROUP BY service_id HAVING count(*) > 3 ) ;	government_shift
SELECT service FROM customers GROUP BY service HAVING count(*) > 3 ;	government_shift
SELECT * FROM customers ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT * FROM customers ORDER BY count_services DESC LIMIT 1;	government_shift
SELECT T1.Name FROM Customer AS T1 JOIN Service AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1;	government_shift
SELECT T1.CustomerID , T1.CustomerName FROM Customer AS T1 JOIN Service AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY count(*) DESC LIMIT 1 ;	government_shift
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM services) ;	government_shift
SELECT * FROM CUSTOMER WHERE CUSTOMER_ID NOT IN (SELECT CUSTOMER_ID FROM SERVICE) ;	government_shift
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM services GROUP BY customer_id ORDER BY count(*) LIMIT 1) ;	government_shift
SELECT DISTINCT T1.* FROM CUSTOMER AS T1 JOIN SERVICE AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T1.CUSTOMER_ID ORDER BY count(*) LIMIT 1 ;	government_shift
SELECT count(DISTINCT CustomerID) , count(DISTINCT ServiceID) FROM Services ;	government_shift
SELECT count(*) FROM customers; SELECT count(*) FROM services_details;	government_shift
SELECT * FROM customers WHERE name LIKE '%Kutch%' ;	government_shift
SELECT * FROM customers WHERE customer_details LIKE '%Kutch%' ;	government_shift
SELECT service_name FROM service WHERE customer_name = "Hardy Kutch" INTERSECT SELECT service_name FROM customer_interaction WHERE rating = "good"	government_shift
SELECT service FROM customer_interaction WHERE customer_name = "Hardy Kutch" OR rating = "good" GROUP BY service;	government_shift
SELECT T1.service FROM customer_interaction AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.name = "Hardy Kutch" AND T1.rating = "bad" GROUP BY T1.service;	government_shift
SELECT T1.service FROM customer_interaction AS T1 JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_name = "Hardy Kutch" AND T1.rating = "bad" GROUP BY T1.service;	government_shift
SELECT * FROM services WHERE channel_id = '15 ij' ;	government_shift
SELECT * FROM services WHERE channel_detail = '15 ij' ;	government_shift
SELECT * FROM customers WHERE interaction_status = 'Stuck' AND service_channel_detail = 'bad' ;	government_shift
SELECT T1.CustomerID , T1.CustomerName FROM Customer AS T1 JOIN Interaction AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Status = 'Stuck' AND T2.Service = 'Bad' AND T2.ChannelDetail = 'Bad' GROUP BY T1.CustomerID , T1.CustomerName;	government_shift
SELECT count(*) FROM integration_platforms WHERE is_successful = 1 ;	government_shift
SELECT count(*) FROM Integration_Platform WHERE Details = "Success" ;	government_shift
SELECT * FROM customers WHERE integration_platform = 'failed' ;	government_shift
SELECT * FROM Customers WHERE Integration_Platform_Details = "Fail" ;	government_shift
SELECT service FROM customer_service WHERE service NOT IN ( SELECT service FROM customer_service GROUP BY service HAVING count(*) > 0 ) ;	government_shift
SELECT * FROM services WHERE service_id NOT IN (SELECT service_id FROM customer_services) ;	government_shift
SELECT layer_type_code , count(*) FROM layers GROUP BY layer_type_code ;	government_shift
SELECT analytical_layer_type_code , count(*) FROM analytical_layers GROUP BY analytical_layer_type_code ;	government_shift
SELECT * FROM services_details WHERE service_id IN (SELECT service_id FROM customer_services WHERE status = 'unsatisfied')	government_shift
SELECT T1.service_details FROM service_details AS T1 JOIN customer_service AS T2 ON T1.service_id = T2.service_id WHERE T2.rating = "unsatisfied"	government_shift
SELECT count(*) FROM vehicles ;	vehicle_rent
SELECT count(*) FROM vehicles ;	vehicle_rent
SELECT name FROM vehicles ORDER BY model_year DESC;	vehicle_rent
SELECT name FROM vehicles ORDER BY model_year DESC;	vehicle_rent
SELECT DISTINCT powertrain FROM vehicles ;	vehicle_rent
SELECT DISTINCT powertrain FROM vehicles GROUP BY powertrain ORDER BY powertrain;	vehicle_rent
SELECT name , type_of_powertrain , annual_fuel_cost FROM vehicles WHERE model_year = 2013 OR model_year = 2014 ;	vehicle_rent
SELECT model_year , name , powertrain , fuel_cost FROM vehicles WHERE model_year IN ( 2013 , 2014 ) ;	vehicle_rent
SELECT DISTINCT powertrain FROM vehicles WHERE YEAR = 2014 INTERSECT SELECT DISTINCT powertrain FROM vehicles WHERE YEAR = 2013;	vehicle_rent
SELECT DISTINCT powertrain FROM vehicles WHERE YEAR = 2013 INTERSECT SELECT DISTINCT powertrain FROM vehicles WHERE YEAR = 2014;	vehicle_rent
SELECT powertrain , count(*) FROM vehicles GROUP BY powertrain ;	vehicle_rent
SELECT powertrain , count(*) FROM vehicles GROUP BY powertrain ;	vehicle_rent
SELECT powertrain FROM vehicles GROUP BY powertrain ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT type FROM powertrain GROUP BY type ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT min(annual_fuel_cost), max(annual_fuel_cost), avg(annual_fuel_cost) FROM vehicles;	vehicle_rent
SELECT min(annual_fuel_cost), max(annual_fuel_cost), avg(annual_fuel_cost) FROM vehicles;	vehicle_rent
SELECT name , model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ;	vehicle_rent
SELECT name , model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate ;	vehicle_rent
SELECT powertrain , avg(annual_fuel_cost) FROM vehicles GROUP BY powertrain HAVING count(*) >= 2 ;	vehicle_rent
SELECT powertrain , avg(fuel_cost) FROM vehicles GROUP BY powertrain HAVING count(*) > 1 ;	vehicle_rent
SELECT name , age , membership_credit FROM customers ;	vehicle_rent
SELECT name , age , membership_credits FROM customers ;	vehicle_rent
SELECT name , age FROM customers ORDER BY membership_credit DESC LIMIT 1;	vehicle_rent
SELECT name , age FROM customers ORDER BY membership_credit DESC LIMIT 1;	vehicle_rent
SELECT avg(age) FROM customers WHERE membership_credit > (SELECT avg(membership_credit) FROM customers)	vehicle_rent
SELECT avg(age) FROM customers WHERE membership > (SELECT avg(membership) FROM customers) ;	vehicle_rent
SELECT * FROM Discounts ;	vehicle_rent
SELECT * FROM Discounts ;	vehicle_rent
SELECT name , sum(hours) FROM rental GROUP BY name ;	vehicle_rent
SELECT Vehicle_Name , SUM(Total_Hours) FROM Rental_Hours GROUP BY Vehicle_Name ;	vehicle_rent
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicle_id FROM renting) ;	vehicle_rent
SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicle_id FROM rentals) ;	vehicle_rent
SELECT name FROM customers WHERE id IN (SELECT customer_id FROM rentals GROUP BY customer_id HAVING count(*) >= 2) ;	vehicle_rent
SELECT customer_name FROM customer WHERE customer_id IN (SELECT customer_id FROM rental GROUP BY customer_id HAVING count(*) >= 2) ;	vehicle_rent
SELECT name , model_year FROM renting_history GROUP BY name , model_year ORDER BY count(*) DESC LIMIT 1 ;	vehicle_rent
SELECT T1.name , T1.model_year FROM rental AS T1 JOIN vehicle AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT T1.vehicle_name FROM vehicle AS T1 JOIN rental AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_name ORDER BY T2.total_hours DESC;	vehicle_rent
SELECT name FROM vehicles ORDER BY total_hours DESC;	vehicle_rent
SELECT discount_name FROM renting_history GROUP BY discount_name ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT discount FROM rental GROUP BY discount ORDER BY count(*) DESC LIMIT 1;	vehicle_rent
SELECT name , powertrain FROM cars WHERE total_hours_rented > 30 ;	vehicle_rent
SELECT name , powertrain FROM cars WHERE total_rental_hours > 30 ;	vehicle_rent
SELECT avg(city_fuel), avg(highway_fuel) FROM cars GROUP BY powertrain_type;	vehicle_rent
SELECT avg(City_Fuel_Economy_Rate), avg(Highway_Fuel_Economy_Rate) FROM vehicles GROUP BY Powertrain_Type;	vehicle_rent
SELECT avg(amount) FROM studentloans;	cre_Students_Information_Systems
SELECT avg(amount) FROM student_loans;	cre_Students_Information_Systems
SELECT biographical_data , student_id FROM students WHERE student_id IN ( SELECT student_id FROM classes GROUP BY student_id HAVING count(*) >= 2 ) INTERSECT SELECT student_id FROM students WHERE student_id IN ( SELECT student_id FROM detentions GROUP BY student_id HAVING count(*) < 2 )	cre_Students_Information_Systems
SELECT * FROM student WHERE class_taken >= 2 OR detentions < 2 ;	cre_Students_Information_Systems
SELECT * FROM teachers WHERE class_detail LIKE '%data%' AND class_detail NOT LIKE '%net%' ;	cre_Students_Information_Systems
SELECT T2.TEACHER_ID , T2.TEACHER_NAME FROM TEACHER AS T1 JOIN CLASS AS T2 ON T1.TEACHER_ID = T2.TEACHER_ID WHERE T2.CLASS_DETAIL LIKE '%data%' AND T2.CLASS_DETAIL NOT LIKE '%net%' ;	cre_Students_Information_Systems
SELECT * FROM Student WHERE Detention = 0 AND StudentLoan = 0 ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE DETENTION = 0 AND STUDENTLOAN = 0 ;	cre_Students_Information_Systems
SELECT loan_amount , loan_date FROM student_loan WHERE achievement_count >= 2 ;	cre_Students_Information_Systems
SELECT amount , date FROM loans WHERE student_id IN ( SELECT student_id FROM achievements GROUP BY student_id HAVING count(*) >= 2 ) ;	cre_Students_Information_Systems
SELECT detail , id FROM teacher GROUP BY detail ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT detail , id FROM teacher GROUP BY detail ORDER BY count(*) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT DISTINCT description FROM detentions ;	cre_Students_Information_Systems
SELECT DISTINCT description FROM detentions ;	cre_Students_Information_Systems
SELECT personal_details , address_type_description FROM students ;	cre_Students_Information_Systems
SELECT personal_details , address_type_description FROM student_details ;	cre_Students_Information_Systems
SELECT address_details , biographical_information FROM students ;	cre_Students_Information_Systems
SELECT address , bio FROM student ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE STUDENT_ID IN (SELECT STUDENT_ID FROM TRANSCRIPT) ;	cre_Students_Information_Systems
SELECT * FROM student WHERE transcript_issuance_date IS NOT NULL;	cre_Students_Information_Systems
SELECT result FROM behavioral_monitoring_details GROUP BY result ORDER BY count(*) DESC LIMIT 1 ; SELECT result FROM behavioral_monitoring_details GROUP BY result ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT result , count(*) FROM behavioral_monitoring_details GROUP BY result ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE STUDENT_ID IN ( SELECT STUDENT_ID FROM RESULT GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1 ) AND STUDENT_ID NOT IN ( SELECT STUDENT_ID FROM RESULT GROUP BY RESULT HAVING COUNT(*) = 3 ) ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE RESULT IN (SELECT RESULT FROM STUDENT GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1) AND RESULT IN (SELECT RESULT FROM STUDENT GROUP BY RESULT HAVING COUNT(*) = 3) ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE STUDENT_ID IN (SELECT STUDENT_ID FROM ALL_BEHAVIOR_MONITORING_DETAILS GROUP BY STUDENT_ID HAVING count(*) = (SELECT max(count) FROM ALL_BEHAVIOR_MONITORING_DETAILS GROUP BY STUDENT_ID)) ;	cre_Students_Information_Systems
SELECT * FROM STUDENT WHERE STUDENT_ID IN (SELECT STUDENT_ID FROM STUDENT_BEHAVIOR_MONITORING GROUP BY STUDENT_ID ORDER BY COUNT(*) DESC LIMIT 1) ;	cre_Students_Information_Systems
SELECT T1.*, T2.event_date FROM students AS T1 JOIN events AS T2 ON T1.student_id = T2.student_id WHERE T2.event_date IS NOT NULL;	cre_Students_Information_Systems
SELECT * FROM Student WHERE StudentID IN (SELECT StudentID FROM Event) ;	cre_Students_Information_Systems
SELECT count(*) , event_type , event_description FROM events GROUP BY event_type ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT event_type_code , event_type_description , count(*) FROM student_events GROUP BY event_type_code , event_type_description ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT achievement_detail , achievement_type_description FROM achievements ;	cre_Students_Information_Systems
SELECT achievement_detail , type_description FROM achievements ;	cre_Students_Information_Systems
SELECT count(*) FROM teachers AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id HAVING count(*) != (SELECT count(*) FROM achievements AS T3 WHERE T3.student_id = T2.student_id)	cre_Students_Information_Systems
SELECT count(*) FROM teacher WHERE id IN (SELECT teacher_id FROM student WHERE id NOT IN (SELECT student_id FROM achievement)) ;	cre_Students_Information_Systems
SELECT date , transcript_details FROM transcripts ;	cre_Students_Information_Systems
SELECT Date , Detail FROM Transcript ;	cre_Students_Information_Systems
SELECT achievement_type_code , achievement_details , achievement_date FROM achievements ;	cre_Students_Information_Systems
SELECT type_code , details , date FROM achievements ;	cre_Students_Information_Systems
SELECT Detention_Start_Time , Detention_End_Time FROM Detentions ;	cre_Students_Information_Systems
SELECT start_time , end_time FROM detentions ;	cre_Students_Information_Systems
SELECT * FROM students WHERE biog_info LIKE '%Suite%' ;	cre_Students_Information_Systems
SELECT * FROM students WHERE details LIKE '%Suite%' ;	cre_Students_Information_Systems
SELECT T1.Name , T2.Name FROM Class AS T1 JOIN Teacher AS T2 ON T1.TeacherID = T2.TeacherID JOIN Student AS T3 ON T1.StudentID = T3.StudentID WHERE T1.TeacherID = T2.TeacherID OR T1.StudentID = T3.StudentID;	cre_Students_Information_Systems
SELECT T1.Name , T2.Name FROM Class AS T1 JOIN Teacher AS T2 ON T1.TeacherID = T2.TeacherID JOIN Student AS T3 ON T1.StudentID = T3.StudentID WHERE T1.TeacherID = T2.TeacherID OR T1.TeacherID = T3.StudentID OR T1.StudentID = T2.TeacherID OR T1.StudentID = T3.StudentID ;	cre_Students_Information_Systems
SELECT count(*) , teacher_id FROM courses GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1 ; SELECT teacher_id FROM courses GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT teacher_id , count(*) FROM courses GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT count(*) , student_id FROM Courses GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT student_id , count(*) FROM Courses GROUP BY student_id ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT student_id , details FROM students WHERE student_id IN ( SELECT student_id FROM courses GROUP BY student_id HAVING count(*) = 2 ) ;	cre_Students_Information_Systems
SELECT T1.id , T1.details FROM student AS T1 JOIN course AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING count(*) = 2 ;	cre_Students_Information_Systems
SELECT Detention_Type_Code , Detention_Type_Description FROM Detention_Type ORDER BY Detention_Type_Code LIMIT 1 ;	cre_Students_Information_Systems
SELECT type_code , description FROM detentions GROUP BY type_code ORDER BY count(*) ASC LIMIT 1 ;	cre_Students_Information_Systems
SELECT * FROM students WHERE student_loan > (SELECT avg(student_loan) FROM students) ORDER BY student_loan DESC;	cre_Students_Information_Systems
SELECT * FROM student WHERE student_loan > (SELECT avg(student_loan) FROM student) ;	cre_Students_Information_Systems
select min(date) from loan ;	cre_Students_Information_Systems
SELECT min(loan_date) FROM loans ;	cre_Students_Information_Systems
SELECT * FROM student WHERE loan = ( SELECT loan FROM student GROUP BY loan ORDER BY loan LIMIT 1 ) ;	cre_Students_Information_Systems
SELECT * FROM student WHERE student_id = ( SELECT student_id FROM student_loan ORDER BY student_loan_amount LIMIT 1 ) ;	cre_Students_Information_Systems
SELECT T2.transcript_date FROM student_loan AS T1 JOIN transcript AS T2 ON T1.student_id = T2.student_id ORDER BY T1.max_loan DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T1.transcript_issuance_date FROM transcript AS T1 JOIN loan AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY sum(T2.amount) DESC LIMIT 1;	cre_Students_Information_Systems
SELECT T2.Teacher FROM Student AS T1 JOIN Teacher AS T2 ON T1.TeacherID = T2.TeacherID WHERE T1.StudentID = (SELECT StudentID FROM Student WHERE TranscriptIssuedDate = (SELECT MIN(TranscriptIssuedDate) FROM Student)) ORDER BY T2.Teacher;	cre_Students_Information_Systems
SELECT * FROM teacher WHERE id IN (SELECT teacher_id FROM student WHERE transcript_issuance_date = (SELECT min(transcript_issuance_date) FROM student))	cre_Students_Information_Systems
SELECT student_id , sum(amount) FROM loan GROUP BY student_id ;	cre_Students_Information_Systems
SELECT student_id , sum(amount) FROM loan GROUP BY student_id ;	cre_Students_Information_Systems
SELECT T1.SID , T1.SNAME , T1.SAGE , T1.SSEX , T2.CID , T2.CNAME , COUNT(*) FROM STUDENT AS T1 JOIN COURSE AS T2 ON T1.SID = T2.SID GROUP BY T1.SID ;	cre_Students_Information_Systems
SELECT student_id , student_bio , count(*) FROM student GROUP BY student_id , student_bio ;	cre_Students_Information_Systems
SELECT count(*) FROM student ;	cre_Students_Information_Systems
SELECT count(*) FROM Student WHERE Detention_Record = 1;	cre_Students_Information_Systems
SELECT Code , Description FROM Student_Address_Type GROUP BY Code , Description ORDER BY count(*) DESC LIMIT 1 ;	cre_Students_Information_Systems
SELECT address_type_code , address_type_description FROM address_types WHERE address_type_code = ( SELECT address_type_code FROM address_types GROUP BY address_type_code ORDER BY count(*) DESC LIMIT 1 ) ;	cre_Students_Information_Systems
SELECT T1.* FROM Student AS T1 JOIN Event AS T2 ON T1.EventID = T2.EventID WHERE T1.StudentLoan = 0 GROUP BY T1.StudentID HAVING COUNT(*) = (SELECT COUNT(*) FROM Student AS T3 JOIN Event AS T4 ON T3.EventID = T4.EventID WHERE T3.StudentLoan = 0)	cre_Students_Information_Systems
SELECT * FROM students WHERE student_id NOT IN (SELECT student_id FROM events) ;	cre_Students_Information_Systems
SELECT start_time , end_time FROM student_address WHERE student_id IN ( SELECT student_id FROM student_transcript GROUP BY student_id HAVING count(*) = 2 ) ;	cre_Students_Information_Systems
SELECT start_time , end_time FROM address WHERE student_id IN ( SELECT student_id FROM transcript GROUP BY student_id HAVING count(*) = 2 ) ;	cre_Students_Information_Systems
SELECT DetentionDate FROM Detentions ORDER BY DetentionDate ASC LIMIT 1;	cre_Students_Information_Systems
SELECT DetentionStart FROM Detention;	cre_Students_Information_Systems
SELECT name FROM authors;	book_1
SELECT name FROM authors;	book_1
SELECT ClientName , Address FROM Clients ;	book_1
SELECT name , address FROM clients ;	book_1
SELECT Title , ISBN , SalePrice FROM Books ;	book_1
SELECT Title , ISBN , SalePrice FROM Books ;	book_1
SELECT count(*) FROM books ;	book_1
SELECT count(*) FROM books ;	book_1
SELECT count(*) FROM authors ;	book_1
SELECT count(*) FROM authors ;	book_1
SELECT count(*) FROM clients ;	book_1
SELECT count(*) FROM clients;	book_1
SELECT name , address FROM clients ORDER BY name ASC ;	book_1
SELECT name , address FROM clients ORDER BY name ASC ;	book_1
SELECT title , author FROM books ;	book_1
SELECT title , author FROM books ;	book_1
SELECT order_id , client_name FROM orders ;	book_1
SELECT order_id , client_name FROM orders ;	book_1
SELECT author_name , count(*) FROM books GROUP BY author_name ;	book_1
SELECT author , count(*) FROM books GROUP BY author ;	book_1
SELECT book_isbn , count(*) FROM orders GROUP BY book_isbn ;	book_1
SELECT isbn , count(*) FROM orders GROUP BY isbn ;	book_1
SELECT book_isbn , sum(order_quantity) FROM orders GROUP BY book_isbn ;	book_1
SELECT isbn , sum(amount) FROM orders GROUP BY isbn ;	book_1
SELECT T1.title FROM orders AS T1 JOIN books AS T2 ON T1.bookid = T2.bookid GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT title FROM books ORDER BY quantity DESC LIMIT 1;	book_1
SELECT book_title , purchase_price FROM books ORDER BY order_count DESC LIMIT 1;	book_1
SELECT T1.title , T1.purchase_price FROM books AS T1 JOIN orders AS T2 ON T1.book_id = T2.book_id GROUP BY T2.book_id ORDER BY SUM(T2.order_amount) DESC LIMIT 1;	book_1
SELECT title FROM books ORDER BY title ASC;	book_1
SELECT DISTINCT title FROM books ORDER BY title;	book_1
SELECT client_name FROM orders GROUP BY client_name HAVING count(*) >= 1 ;	book_1
SELECT DISTINCT client FROM orders ;	book_1
SELECT client_name , count(*) FROM orders GROUP BY client_name ;	book_1
SELECT client , count(*) FROM orders GROUP BY client ;	book_1
SELECT client FROM orders GROUP BY client ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT client FROM orders GROUP BY client ORDER BY count(*) DESC LIMIT 1;	book_1
SELECT client_name , sum(amount) FROM orders GROUP BY client_name ;	book_1
SELECT Client , sum(Quantity) FROM Orders GROUP BY Client ;	book_1
SELECT ClientName FROM Orders GROUP BY ClientName ORDER BY SUM(Quantity) DESC LIMIT 1;	book_1
SELECT ClientName FROM Orders GROUP BY ClientName ORDER BY SUM(Quantity) DESC LIMIT 1;	book_1
SELECT Title FROM Books WHERE BookID NOT IN (SELECT BookID FROM Orders) ;	book_1
SELECT title FROM books WHERE bookid NOT IN (SELECT bookid FROM orders)	book_1
SELECT client_name FROM clients WHERE client_id NOT IN (SELECT client_id FROM orders) ;	book_1
SELECT client_name FROM clients WHERE client_id NOT IN (SELECT client_id FROM orders) ;	book_1
SELECT max(sale_price) , min(sale_price) FROM sales ;	book_1
SELECT max(sale_price) , min(sale_price) FROM books ;	book_1
SELECT avg(purchase_price) , avg(sale_price) FROM transactions ;	book_1
SELECT avg(purchase_price) , avg(sale_price) FROM books ;	book_1
SELECT max(sale_price) - min(purchase_price) FROM sales;	book_1
SELECT max(sale_price) - min(purchase_price) FROM sales;	book_1
SELECT title FROM books WHERE sale_price > (SELECT avg(sale_price) FROM books) ;	book_1
SELECT title FROM books WHERE sale_price > (SELECT avg(sale_price) FROM books) ;	book_1
SELECT title FROM books ORDER BY price ASC LIMIT 1;	book_1
SELECT title FROM books WHERE sale_price = ( SELECT min(sale_price) FROM books ) ;	book_1
SELECT title FROM books ORDER BY price DESC LIMIT 1;	book_1
SELECT title FROM books ORDER BY price DESC LIMIT 1;	book_1
SELECT avg(price) FROM books WHERE author = "George Orwell" ;	book_1
SELECT avg(price) FROM books WHERE author = "George Orwell" ;	book_1
SELECT price FROM books WHERE author = "Plato" ;	book_1
SELECT price FROM books WHERE author = "Plato" ;	book_1
SELECT title FROM books WHERE author = "George Orwell" ORDER BY price LIMIT 1;	book_1
SELECT title FROM books WHERE author = "George Orwell" ORDER BY saleprice LIMIT 1;	book_1
SELECT title FROM books WHERE author = "Plato" AND price < (SELECT avg(price) FROM books) ORDER BY price DESC LIMIT 1;	book_1
SELECT T1.title FROM books AS T1 JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "Plato" AND T1.sale_price < (SELECT avg(sale_price) FROM books) GROUP BY T1.title;	book_1
SELECT author FROM books WHERE title = "Pride and Prejudice" ;	book_1
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.Title = "Pride and Prejudice" ;	book_1
SELECT title FROM books WHERE author LIKE '%Plato%' ;	book_1
SELECT title FROM books WHERE author LIKE '%Plato%' ;	book_1
SELECT count(*) FROM orders WHERE title = "Pride and Prejudice" ;	book_1
SELECT count(*) FROM orders WHERE title = "Pride and Prejudice" ;	book_1
SELECT id FROM orders WHERE title = "Pride and Prejudice" INTERSECT SELECT id FROM orders WHERE title = "The Little Prince"	book_1
SELECT order_id FROM orders WHERE title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY order_id HAVING count(*) > 1;	book_1
SELECT book_isbn FROM orders WHERE client_name = "Peter Doe" INTERSECT SELECT book_isbn FROM orders WHERE client_name = "James Smith" ;	book_1
SELECT T1.isbn FROM orders AS T1 JOIN customers AS T2 ON T1.custid = T2.custid WHERE T2.name = "Peter Doe" INTERSECT SELECT T1.isbn FROM orders AS T1 JOIN customers AS T2 ON T1.custid = T2.custid WHERE T2.name = "James Smith"	book_1
SELECT T1.title FROM books AS T1 JOIN orders AS T2 ON T1.book_id = T2.book_id JOIN clients AS T3 ON T2.client_id = T3.client_id WHERE T3.client_name = "Peter Doe" AND T3.client_name != "James Smith" GROUP BY T1.title;	book_1
SELECT Title FROM Books WHERE ClientName = "Peter Doe" INTERSECT SELECT Title FROM Books WHERE ClientName = "James Smith" EXCEPT SELECT Title FROM Books WHERE ClientName = "Peter Doe" INTERSECT SELECT Title FROM Books WHERE ClientName = "James Smith"	book_1
SELECT ClientName FROM Clients WHERE ClientID IN (SELECT ClientID FROM Orders WHERE BookTitle = 'Pride and Prejudice')	book_1
SELECT ClientName FROM Orders WHERE BookName = "Pride and Prejudice"	book_1
SELECT count(*) FROM books ;	book_review
SELECT title FROM books ORDER BY title ASC;	book_review
SELECT title FROM books ORDER BY pages DESC;	book_review
SELECT type , release_date FROM books ;	book_review
SELECT max(chapters), min(chapters) FROM books;	book_review
SELECT title FROM books WHERE title != "Poet" ;	book_review
SELECT avg(rating) FROM reviews;	book_review
SELECT title , rating FROM books ;	book_review
SELECT rating FROM books ORDER BY chapters DESC LIMIT 1;	book_review
SELECT rank FROM books ORDER BY pages ASC LIMIT 1;	book_review
SELECT title FROM books ORDER BY rank DESC LIMIT 1;	book_review
SELECT count(*) FROM books WHERE type = "Novel" GROUP BY type HAVING count(*) > 0 ORDER BY count(*) DESC LIMIT 1;	book_review
SELECT book_type , count(*) FROM books GROUP BY book_type ;	book_review
SELECT book_type FROM books GROUP BY book_type ORDER BY count(*) DESC LIMIT 1;	book_review
SELECT book_type FROM books GROUP BY book_type HAVING count(*) >= 3 ;	book_review
SELECT title FROM books ORDER BY rating ASC;	book_review
SELECT title , length FROM books ORDER BY readers DESC ;	book_review
SELECT count(*) FROM books WHERE id NOT IN (SELECT book_id FROM reviews) ;	book_review
SELECT type FROM books WHERE chapters > 75 INTERSECT SELECT type FROM books WHERE chapters < 50 ;	book_review
SELECT count(DISTINCT book_type) FROM books;	book_review
SELECT type , title FROM books WHERE rated = 0 ;	book_review
SELECT count(*) FROM customers ;	restaurant_bills
SELECT count(*) FROM customers;	restaurant_bills
SELECT name FROM customers ORDER BY level ASC;	restaurant_bills
SELECT customer_name FROM customers ORDER BY membership_level ASC;	restaurant_bills
SELECT nationalities , card_credits FROM customers ;	restaurant_bills
SELECT nationality , card_credit FROM customers ;	restaurant_bills
SELECT name FROM customers WHERE nationality = "England" OR nationality = "Australia" ;	restaurant_bills
SELECT name FROM customers WHERE nationality = "England" OR nationality = "Australia" ;	restaurant_bills
SELECT avg(card_credit) FROM customers WHERE membership_level > 1 ;	restaurant_bills
SELECT avg(card_credit) FROM customers WHERE membership_level > 1 ;	restaurant_bills
SELECT max(card_credit) FROM customers ORDER BY membership_level DESC LIMIT 1;	restaurant_bills
SELECT CustomerID , CardCredit FROM Customers ORDER BY MembershipLevel DESC LIMIT 1 ;	restaurant_bills
SELECT nationality , count(*) FROM customers GROUP BY nationality ;	restaurant_bills
SELECT nationality , count(*) FROM customers GROUP BY nationality ;	restaurant_bills
SELECT nationality FROM customers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;	restaurant_bills
SELECT nationality FROM customers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;	restaurant_bills
SELECT Nation FROM CUSTOMER WHERE Card_Credit < 50 INTERSECT SELECT Nation FROM CUSTOMER WHERE Card_Credit > 75 ;	restaurant_bills
SELECT Nation FROM Customers WHERE Card_Credit > 50 INTERSECT SELECT Nation FROM Customers WHERE Card_Credit < 75 ;	restaurant_bills
SELECT T1.cust_name , T2.dish_name FROM customers AS T1 JOIN orders AS T2 ON T1.cust_id = T2.cust_id ;	restaurant_bills
SELECT T1.cust_name , T2.dish_name FROM customers AS T1 JOIN orders AS T2 ON T1.cust_id = T2.cust_id;	restaurant_bills
SELECT T1.cust_name , T2.dish_name FROM customer AS T1 JOIN order_item AS T2 ON T1.cust_id = T2.cust_id ORDER BY T2.quantity DESC ;	restaurant_bills
SELECT T1.cust_name , T2.dish_name FROM orders AS T1 JOIN dishes AS T2 ON T1.dish_id = T2.dish_id ORDER BY T1.quantity DESC ;	restaurant_bills
SELECT T1.cust_name , SUM(T2.dish_quantity) FROM customer AS T1 JOIN orders AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ;	restaurant_bills
SELECT customer_name , sum(quantity) FROM orders GROUP BY customer_name ;	restaurant_bills
SELECT customer_id FROM orders GROUP BY customer_id HAVING SUM(order_quantity) > 1 ;	restaurant_bills
SELECT customer_name FROM customers WHERE total_order_quantity > 1 ;	restaurant_bills
SELECT DISTINCT manager FROM branches;	restaurant_bills
SELECT DISTINCT Manager FROM Branches;	restaurant_bills
SELECT name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	restaurant_bills
SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders) ;	restaurant_bills
SELECT count(*) FROM members ;	club_leader
SELECT name FROM members ORDER BY age ASC;	club_leader
SELECT name , nationality FROM members ;	club_leader
SELECT name FROM members WHERE nationality != 'England' ;	club_leader
SELECT name FROM members WHERE age = 19 OR age = 20 ;	club_leader
SELECT name FROM members ORDER BY age DESC LIMIT 1;	club_leader
SELECT nationality , count(*) FROM members GROUP BY nationality ;	club_leader
SELECT nationality FROM members GROUP BY nationality ORDER BY count(*) DESC LIMIT 1;	club_leader
SELECT nation FROM customers GROUP BY nation HAVING count(*) >= 2 ;	club_leader
SELECT T1.Name , T2.Name FROM ClubLeader AS T1 JOIN Club AS T2 ON T1.ClubID = T2.ClubID ;	club_leader
SELECT T1.name FROM club AS T1 JOIN club_leader AS T2 ON T1.club_id = T2.club_id WHERE T1.overall_ranking > 100;	club_leader
SELECT name FROM club_leader WHERE year_joined < 2018 ;	club_leader
SELECT leader FROM club WHERE name = "Houston" ;	club_leader
SELECT name FROM members WHERE id NOT IN (SELECT member_id FROM club_leaders)	club_leader
SELECT nation FROM members WHERE age > 22 INTERSECT SELECT nation FROM members WHERE age < 19 ;	club_leader
SELECT avg(age) FROM club_leader;	club_leader
SELECT club_name FROM clubs WHERE club_name LIKE '%state%' ;	club_leader
SELECT collection FROM collections GROUP BY collection HAVING count(*) > 1 ;	cre_Doc_and_collections
SELECT DISTINCT collection_subsets_name FROM collection_subsets;	cre_Doc_and_collections
SELECT * FROM collection WHERE name = 'Top collection' ;	cre_Doc_and_collections
SELECT * FROM Collection WHERE CollectionName = 'Top collection' ;	cre_Doc_and_collections
SELECT SUBSET_NAME FROM DOCUMENTS;	cre_Doc_and_collections
SELECT DISTINCT document_subset_name FROM documents ;	cre_Doc_and_collections
SELECT * FROM documents WHERE name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT * FROM DOCUMENT_SUBSET WHERE NAME = 'Best for 2000' ;	cre_Doc_and_collections
SELECT document_id FROM documents;	cre_Doc_and_collections
select objectid from documentobjects;	cre_Doc_and_collections
SELECT parent FROM documents WHERE owner = 'Marlin' ;	cre_Doc_and_collections
SELECT DOID FROM Documents WHERE Owner = "Marlin" ;	cre_Doc_and_collections
SELECT owner FROM Documents WHERE Description = 'Braeden Collection' ;	cre_Doc_and_collections
SELECT T1.Owner FROM Document AS T1 JOIN Collection AS T2 ON T1.CollectionID = T2.CollectionID WHERE T2.Name = 'Braeden Collection'	cre_Doc_and_collections
SELECT T1.owner FROM document AS T1 JOIN parent_document AS T2 ON T1.document_id = T2.document_id WHERE T1.owner = 'Marlin' ;	cre_Doc_and_collections
SELECT T1.Owner FROM Documents AS T1 JOIN Documents AS T2 ON T1.ParentDocumentID = T2.DocumentID WHERE T2.Owner = 'Marlin' GROUP BY T1.Owner;	cre_Doc_and_collections
SELECT DISTINCT description FROM parent_documents ORDER BY description;	cre_Doc_and_collections
SELECT DISTINCT description FROM documents ;	cre_Doc_and_collections
SELECT count(*) FROM documents WHERE owner = "Marlin" ;	cre_Doc_and_collections
SELECT count(*) FROM documents WHERE owner = "Marlin" ;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE document_id NOT IN ( SELECT document_id FROM documents WHERE parent_document_id IS NOT NULL ) ;	cre_Doc_and_collections
SELECT id FROM document WHERE parent_id IS NULL;	cre_Doc_and_collections
SELECT T1.id , count(*) FROM documents AS T1 JOIN documents AS T2 ON T1.parent_id = T2.id GROUP BY T1.id ;	cre_Doc_and_collections
SELECT count(*) , parent_id FROM documents GROUP BY parent_id ;	cre_Doc_and_collections
SELECT collection_name FROM collections;	cre_Doc_and_collections
SELECT collection_name FROM collections;	cre_Doc_and_collections
SELECT description FROM collection WHERE name = "Best" ;	cre_Doc_and_collections
SELECT Collection_Description FROM Collection WHERE Collection_Name = 'Best'	cre_Doc_and_collections
SELECT parent FROM collections WHERE name = "Nice" ;	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE parent_collection_name = "Nice" ;	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections) ORDER BY collection_name;	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE collection_id NOT IN ( SELECT collection_id FROM collections WHERE collection_id IN ( SELECT collection_id FROM collections ) ) ;	cre_Doc_and_collections
SELECT document_id FROM documents GROUP BY document_id HAVING count(*) > 1 ;	cre_Doc_and_collections
SELECT id FROM documents GROUP BY id HAVING count(*) > 1 ;	cre_Doc_and_collections
SELECT count(*) FROM collection AS T1 JOIN child_collection AS T2 ON T1.collection_id = T2.collection_id WHERE T1.collection_name = "Best" ;	cre_Doc_and_collections
SELECT count(*) FROM Collection AS T1 JOIN ChildCollection AS T2 ON T1.CollectionID = T2.CollectionID WHERE T1.Name = "Best" ;	cre_Doc_and_collections
SELECT document_id FROM document WHERE owner_id = ( SELECT owner_id FROM document WHERE document_name = "Ransom" ) ;	cre_Doc_and_collections
SELECT DocumentObjectId FROM Document WHERE DocumentOwner = 'Ransom' ;	cre_Doc_and_collections
SELECT subset_id , name , count(*) FROM collections GROUP BY subset_id , name ;	cre_Doc_and_collections
SELECT collection_subset_id , collection_subset_name , count(*) FROM collections GROUP BY collection_subset_id , collection_subset_name ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id ORDER BY count(*) DESC LIMIT 1 ;	cre_Doc_and_collections
SELECT document_object_id , count(*) FROM documents GROUP BY document_object_id ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id ORDER BY count(*) LIMIT 1 ;	cre_Doc_and_collections
SELECT doc_id FROM documents GROUP BY doc_id ORDER BY count(*) LIMIT 1 ;	cre_Doc_and_collections
SELECT document_id , count(*) FROM documents GROUP BY document_id HAVING count(*) BETWEEN 2 AND 4 ;	cre_Doc_and_collections
SELECT id , count(*) FROM document GROUP BY id HAVING count(*) BETWEEN 2 AND 4 ;	cre_Doc_and_collections
SELECT DISTINCT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner = 'Braeden') ;	cre_Doc_and_collections
SELECT DISTINCT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN (SELECT Owner FROM Documents WHERE Owner IN	cre_Doc_and_collections
SELECT DISTINCT SUBSET_NAME FROM DOCUMENTS WHERE OWNER = 'Braeden' ;	cre_Doc_and_collections
SELECT DISTINCT SUBSET_NAME FROM DOCUMENTS WHERE OWNER_NAME = "Braeden"	cre_Doc_and_collections
SELECT subset_id , name , count(*) FROM documents GROUP BY subset_id , name ;	cre_Doc_and_collections
SELECT subset_id , name , count(*) FROM subsets GROUP BY subset_id , name ;	cre_Doc_and_collections
SELECT SUBSET_ID , NAME , COUNT(*) FROM DOCUMENT_SUBSET GROUP BY SUBSET_ID , NAME ORDER BY COUNT(*) DESC LIMIT 1 ;	cre_Doc_and_collections
SELECT id , name , count(*) FROM documents GROUP BY id ORDER BY count(*) DESC LIMIT 1 ;	cre_Doc_and_collections
SELECT DISTINCT document_id FROM documents WHERE document_subset_name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT document_id FROM documents WHERE document_name = 'Best for 2000' ;	cre_Doc_and_collections
SELECT document_id , name FROM document_subsets WHERE document_id IN ( SELECT document_id FROM documents ) GROUP BY document_id , name ;	cre_Doc_and_collections
SELECT DISTINCT T1.document_id , T2.subset_name FROM documents AS T1 JOIN document_subsets AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id , T2.subset_name ;	cre_Doc_and_collections
SELECT CollectionName FROM Documents WHERE DocumentOwner = 'Ransom' ;	cre_Doc_and_collections
SELECT Collection FROM Documents WHERE Owner = 'Ransom' ;	cre_Doc_and_collections
SELECT count(*) , document_id FROM documents GROUP BY document_id ;	cre_Doc_and_collections
SELECT document_object_id , count(*) FROM documents GROUP BY document_object_id ;	cre_Doc_and_collections
SELECT count(*) FROM documents WHERE collection_name = 'Best' ;	cre_Doc_and_collections
SELECT count(*) FROM best;	cre_Doc_and_collections
SELECT document_id FROM best;	cre_Doc_and_collections
SELECT count(*) FROM Best;	cre_Doc_and_collections
SELECT collection_name , collection_id , count(*) FROM documents GROUP BY collection_name ORDER BY count(*) DESC LIMIT 1 ;	cre_Doc_and_collections
SELECT collection_name , collection_id , count(*) FROM collections GROUP BY collection_name ORDER BY count(*) DESC LIMIT 1 ;	cre_Doc_and_collections
SELECT DISTINCT T1.id FROM document AS T1 JOIN document_subset AS T2 ON T1.id = T2.document_id WHERE T2.collection_name = 'Best' AND T2.year = 2000;	cre_Doc_and_collections
SELECT DISTINCT DocumentObjectId FROM Collection WHERE CollectionName = 'Best for 2000' AND CollectionName = 'Best' ;	cre_Doc_and_collections
SELECT id FROM documents WHERE collection = 'Best' AND id NOT IN (SELECT document_id FROM document_subset WHERE year = 2000) ;	cre_Doc_and_collections
SELECT DISTINCT documentObjectId FROM Best EXCEPT SELECT DISTINCT documentObjectId FROM Best AS T1 INNER JOIN Best AS T2 ON T1.documentObjectId = T2.documentObjectId WHERE T2.year = 2000;	cre_Doc_and_collections
SELECT DISTINCT T1.id FROM Document AS T1 JOIN DocumentSubset AS T2 ON T1.id = T2.id WHERE T2.name = 'Best for 2000' UNION SELECT DISTINCT T1.id FROM Document AS T1 JOIN Collection AS T2 ON T1.id = T2.id WHERE T2.name = 'Best'	cre_Doc_and_collections
SELECT DISTINCT DocumentID FROM Collection WHERE CollectionName = 'Best for 2000' INTERSECT SELECT DISTINCT DocumentID FROM Collection WHERE CollectionName = 'Best'	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE collection_name LIKE "%Best%" OR collection_name LIKE "%best%" ;	cre_Doc_and_collections
SELECT collection_name FROM collections WHERE collection_name = "Best" OR collection_name LIKE "%Best%" OR collection_name LIKE "%best%" OR collection_name LIKE "%best %";	cre_Doc_and_collections
SELECT count(*) FROM collection WHERE name = "Best" ;	cre_Doc_and_collections
SELECT count(DISTINCT CollectionName) FROM Collection WHERE CollectionName = 'Best' ;	cre_Doc_and_collections
SELECT CollectionSubsetName FROM Collection WHERE CollectionName = "Best" ;	cre_Doc_and_collections
SELECT CollectionSubset FROM Collection WHERE CollectionName = 'Best' ;	cre_Doc_and_collections
SELECT count(*) FROM songs WHERE name LIKE '%Love%' ;	sing_contest
SELECT name FROM songs ORDER BY name ASC;	sing_contest
SELECT name , language FROM songs ;	sing_contest
SELECT max(Voice_Sound_Quality) , min(Voice_Sound_Quality) FROM Performances ;	sing_contest
SELECT Voice_Sound_Quality_Score , Rhythm_Tempo_Score , Stage_Presence_Score FROM Participants WHERE Participant_Name = 'Freeway' ;	sing_contest
SELECT id , language , original_artist FROM songs WHERE name != 'Love' ;	sing_contest
SELECT name , original_artist FROM song WHERE english_translation = 'All the streets of love' ;	sing_contest
SELECT DISTINCT stage_presence FROM songs WHERE language = 'English' ;	sing_contest
SELECT T1.id , T1.name FROM Participants AS T1 JOIN Performances AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING count(*) >= 2 ;	sing_contest
SELECT id , name , popularity FROM participants ORDER BY count(*) DESC ;	sing_contest
SELECT id , name FROM participants WHERE sound_quality = 5 OR rhythm_tempo = 5 ;	sing_contest
SELECT Voice_Sound_Quality FROM Songs WHERE Song_Name = ' The Balkan Girls ' AND Language = ' English ' ;	sing_contest
SELECT T1.id , T1.name FROM song AS T1 JOIN participant AS T2 ON T1.id = T2.song_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1;	sing_contest
SELECT count(*) FROM performances WHERE stage_presence_score < 7 OR stage_presence_score > 9 ;	sing_contest
SELECT count(*) FROM songs WHERE performed = 0 ;	sing_contest
SELECT language , avg(rhythm) FROM songs GROUP BY language ;	sing_contest
SELECT DISTINCT T1.Name FROM Participants AS T1 JOIN Songs AS T2 ON T1.SongID = T2.SongID WHERE T2.Language = 'English'	sing_contest
SELECT Name , Popularity FROM Participants WHERE Language = 'Croatian' INTERSECT SELECT Name , Popularity FROM Participants WHERE Language = 'English'	sing_contest
SELECT song_name FROM songs WHERE song_name LIKE "%Is%" ;	sing_contest
SELECT T1.artist_name , T2.voice_sound_quality FROM artist AS T1 JOIN song AS T2 ON T1.artist_id = T2.artist_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC ;	sing_contest
SELECT count(*) FROM cities;	address_1
SELECT count(*) FROM cities;	address_1
SELECT DISTINCT state FROM states ;	address_1
SELECT DISTINCT state FROM states;	address_1
SELECT count(*) FROM countries;	address_1
SELECT count(*) FROM countries;	address_1
SELECT name , code , state , country FROM city ;	address_1
SELECT name , code , state , country FROM city ;	address_1
SELECT latitude , longitude FROM city WHERE name = "Baltimore" ;	address_1
SELECT latitude , longitude FROM city WHERE name = "Baltimore" ;	address_1
SELECT name FROM cities WHERE state = 'PA' ;	address_1
SELECT city FROM cities WHERE state = "PA"	address_1
SELECT count(*) FROM city WHERE country = "Canada" ;	address_1
SELECT count(*) FROM city WHERE country = "Canada" ;	address_1
SELECT city FROM cities WHERE country = "USA" ORDER BY latitude DESC;	address_1
SELECT city FROM cities WHERE country = "USA" ORDER BY latitude;	address_1
SELECT state , count(*) FROM cities GROUP BY state ;	address_1
SELECT state , count(*) FROM cities GROUP BY state ;	address_1
SELECT country , count(*) FROM cities GROUP BY country ;	address_1
SELECT count(*) , country FROM cities GROUP BY country ;	address_1
SELECT state FROM cities GROUP BY state HAVING count(*) >= 2 ;	address_1
SELECT state FROM cities GROUP BY state HAVING count(*) >= 2 ;	address_1
SELECT state , count(*) FROM cities GROUP BY state ORDER BY count(*) DESC LIMIT 1 ;	address_1
SELECT state FROM cities GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT country FROM cities GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT country FROM cities GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT first_name , last_name FROM students WHERE state = 'MD' ;	address_1
SELECT full_name FROM students WHERE state = 'MD' ;	address_1
SELECT count(*) FROM student WHERE country = "China" ;	address_1
SELECT count(*) FROM student WHERE country = "China" ;	address_1
SELECT first_name , major FROM students WHERE city = "Baltimore" ;	address_1
SELECT first_name , major FROM students WHERE city = "Baltimore" ;	address_1
SELECT count(*) , country FROM students GROUP BY country ;	address_1
SELECT count(*) , country FROM students GROUP BY country ;	address_1
SELECT city , count(*) FROM students GROUP BY city ;	address_1
SELECT city , count(*) FROM students GROUP BY city ;	address_1
SELECT state , count(*) FROM students GROUP BY state ORDER BY count(*) DESC LIMIT 1 ;	address_1
SELECT state FROM students GROUP BY state ORDER BY count(*) DESC LIMIT 1;	address_1
SELECT country FROM students GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT country FROM students GROUP BY country ORDER BY count(*) LIMIT 1;	address_1
SELECT city FROM students GROUP BY city HAVING count(*) >= 3 ;	address_1
SELECT city FROM students GROUP BY city HAVING count(*) >= 3 ;	address_1
SELECT state FROM students GROUP BY state HAVING count(*) > 5 ;	address_1
SELECT state FROM students GROUP BY state HAVING count(*) > 5 ;	address_1
SELECT id FROM student WHERE country != 'USA' ;	address_1
SELECT student_id FROM students WHERE country != 'USA' ;	address_1
SELECT id FROM students WHERE sex = 'F' AND state = 'PA' ;	address_1
SELECT student_id FROM students WHERE gender = 'F' AND state = 'PA' ;	address_1
SELECT id FROM students WHERE sex = "M" AND country != "USA" ;	address_1
SELECT id FROM students WHERE sex = 'M' AND country != 'USA' ;	address_1
SELECT distance FROM airports WHERE city = 'BAL' INTERSECT SELECT distance FROM airports WHERE city = 'CHI' ;	address_1
SELECT ST_Distance_Sphere(geom, 'SRID=4326;POINT(-87.6929 41.8916)'::geography) FROM airports WHERE name IN ('BAL', 'CHI') ;	address_1
SELECT distance FROM airports WHERE city = "Boston" INTERSECT SELECT distance FROM airports WHERE city = "Newark" ;	address_1
SELECT distance FROM airports WHERE city = "Boston" INTERSECT SELECT distance FROM airports WHERE city = "Newark" ;	address_1
SELECT avg(distance), min(distance), max(distance) FROM cities;	address_1
SELECT avg(distance), min(distance), max(distance) FROM cities;	address_1
SELECT city_code FROM cities ORDER BY distance DESC LIMIT 2;	address_1
SELECT city_code FROM cities ORDER BY distance DESC LIMIT 1;	address_1
SELECT city_code FROM cities WHERE distance > (SELECT avg(distance) FROM cities) LIMIT 2;	address_1
SELECT city_code FROM cities WHERE distance > (SELECT avg(distance) FROM cities) ;	address_1
SELECT city_code FROM cities WHERE distance < 1000 ;	address_1
SELECT city_code FROM cities WHERE distance < 1000 ;	address_1
SELECT sum(distance) FROM cities WHERE city != 'BAL' ;	address_1
SELECT sum(distance) FROM cities WHERE city != 'BAL' GROUP BY city ORDER BY sum(distance) DESC LIMIT 1;	address_1
SELECT avg(distance) FROM cities WHERE city != 'Boston';	address_1
SELECT avg(distance) FROM cities WHERE city != 'Boston';	address_1
SELECT T1.City FROM City AS T1 JOIN State AS T2 ON T1.StateID = T2.StateID WHERE T2.StateName = "Illinois" ORDER BY T1.Distance FROM City ORDER BY T1.Distance LIMIT 1;	address_1
SELECT name FROM city ORDER BY distance FROM chicago LIMIT 1;	address_1
SELECT T1.City FROM Cities AS T1 JOIN Cities AS T2 ON T1.State = T2.State WHERE T1.City != 'Boston' ORDER BY LENGTH(T1.City) DESC LIMIT 1;	address_1
SELECT city FROM cities ORDER BY distance FROM cities WHERE city != 'Boston' ORDER BY distance DESC LIMIT 1;	address_1
SELECT city_code , sum(distance) FROM cities GROUP BY city_code ;	address_1
SELECT city_code , sum( distance ) FROM cities GROUP BY city_code ;	address_1
SELECT city , avg(distance) FROM cities GROUP BY city ;	address_1
SELECT city , avg(distance) FROM cities GROUP BY city ;	address_1
SELECT distance FROM address WHERE first_name = "Linda" AND last_name = "Smith" UNION SELECT distance FROM address WHERE first_name = "Tracy" AND last_name = "Kim"	address_1
SELECT ST_Distance_Sphere( ST_SetSRID( ( SELECT ST_GeometryFromText( 'POINT( -122.4194 -37.8136 )' ) ), 4326 ), ST_SetSRID( ( SELECT ST_GeometryFromText( 'POINT( -122.4194 -37.8136 )' ) ), 4326 ) ) FROM City WHERE Name = "Linda Smith" INTERSECT SELECT ST_Distance_Sphere( ST_SetSRID( ( SELECT ST_GeometryFromText( 'POINT( -122.4194 -37.8136 )' ) ), 4326 ), ST_SetSRID( ( SELECT ST_GeometryFromText( 'POINT( -122.4194 -3	address_1
SELECT T1.Fname , T1.Lname FROM Student AS T1 JOIN Address AS T2 ON T1.StuID = T2.StuID WHERE T2.StuAddr = "Linda Smith" ORDER BY T2.StuAddr DESC LIMIT 1;	address_1
SELECT T1.Fname , T1.Lname FROM Student AS T1 JOIN Address AS T2 ON T1.StuID = T2.StuID WHERE T2.City = "Linda Smith" ORDER BY T2.Distance DESC LIMIT 1;	address_1
SELECT state FROM students WHERE first_name = "Linda" ;	address_1
SELECT state FROM students WHERE first_name = "Linda" ;	address_1
SELECT * FROM sailors WHERE age > 30 ;	boat_1
SELECT * FROM sailors WHERE age > 30 ;	boat_1
SELECT name , age FROM sailors WHERE age < 30 ;	boat_1
SELECT name , age FROM sailor WHERE age < 30 ;	boat_1
SELECT Boat FROM Reservations WHERE SailorId = 1;	boat_1
SELECT DISTINCT boat_id FROM reserved_boats WHERE sailor_id = 1 ;	boat_1
SELECT T1.Name FROM Boat AS T1 JOIN Reservation AS T2 ON T1.BoatID = T2.BoatID WHERE T2.BoatID = 102;	boat_1
SELECT T1.Name FROM Sailor AS T1 JOIN Boat AS T2 ON T1.BoatID = T2.BoatID WHERE T2.BoatID = 102;	boat_1
SELECT DISTINCT bid FROM reserved_boats;	boat_1
SELECT BoatID FROM Reservations GROUP BY BoatID HAVING COUNT(*) > 1;	boat_1
SELECT name FROM sailors WHERE name LIKE '%e%' ;	boat_1
SELECT name FROM sailors WHERE name LIKE '%e%' ;	boat_1
SELECT id FROM sailors WHERE age > ( SELECT max(age) FROM sailors ) GROUP BY id;	boat_1
SELECT id FROM sailor WHERE id NOT IN (SELECT id FROM sailor ORDER BY age LIMIT 1)	boat_1
SELECT DISTINCT sailor_name FROM sailors WHERE sailor_age > ( SELECT MAX(sailor_age) FROM sailors WHERE sailor_rating > 7 ) ;	boat_1
SELECT DISTINCT name FROM sailors WHERE age > (SELECT age FROM sailors WHERE rating > 7) ;	boat_1
SELECT name , id FROM sailors WHERE id IN ( SELECT sailor_id FROM reserved_boats GROUP BY sailor_id HAVING COUNT(*) >= 1 ) ;	boat_1
SELECT name , id FROM sailor WHERE id IN ( SELECT sailor_id FROM boat_reservation GROUP BY sailor_id HAVING count(*) > 1 ) ;	boat_1
SELECT id , name FROM sailors WHERE id IN ( SELECT sailor_id FROM reserved_boats GROUP BY sailor_id HAVING count(*) > 1 ) ;	boat_1
SELECT DISTINCT sailor_name FROM reserved_boats GROUP BY sailor_name HAVING count(*) >= 2 ;	boat_1
SELECT sid FROM reserved_boats WHERE color = "red" OR color = "blue" ;	boat_1
SELECT sid FROM reserved_boats WHERE boat_color = "red" OR boat_color = "blue"	boat_1
SELECT sid , name FROM Sailors WHERE boatcolor = "red" OR boatcolor = "blue" ;	boat_1
SELECT name , id FROM sailors WHERE boat_color = "red" INTERSECT SELECT name , id FROM sailors WHERE boat_color = "blue"	boat_1
SELECT sid FROM reserved_boats WHERE color = "red" INTERSECT SELECT sid FROM reserved_boats WHERE color = "blue"	boat_1
SELECT id FROM sailor WHERE boat_color = "red" INTERSECT SELECT id FROM sailor WHERE boat_color = "blue"	boat_1
SELECT T1.name , T1.sid FROM Sailors AS T1 JOIN Boats AS T2 ON T1.sid = T2.sid WHERE T2.color = "red" INTERSECT SELECT T1.name , T1.sid FROM Sailors AS T1 JOIN Boats AS T2 ON T1.sid = T2.sid WHERE T2.color = "blue"	boat_1
SELECT name , id FROM sailors WHERE boat_color = "red" INTERSECT SELECT name , id FROM sailors WHERE boat_color = "blue"	boat_1
SELECT id FROM sailors WHERE id NOT IN (SELECT sailor_id FROM reserved_boats)	boat_1
SELECT id FROM sailor WHERE id NOT IN (SELECT sailor_id FROM reservation)	boat_1
SELECT name , id FROM sailors WHERE id NOT IN ( SELECT sailor_id FROM boat_reservations ) ;	boat_1
SELECT name , id FROM sailor WHERE id NOT IN ( SELECT sailor_id FROM boatreservation ) ;	boat_1
SELECT id FROM sailor WHERE id NOT IN (SELECT sailor_id FROM reservation)	boat_1
SELECT T1.id FROM sailors AS T1 JOIN boat_reservations AS T2 ON T1.id = T2.sailor_id WHERE T2.sailor_id IS NULL;	boat_1
SELECT name FROM sailors WHERE boat_id = 103 ;	boat_1
SELECT name FROM sailors WHERE boat_id = 103 ;	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis")	boat_1
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = "Luis")	boat_1
SELECT name FROM sailors WHERE rating > (SELECT MAX(rating) FROM sailors WHERE name = "Luis")	boat_1
SELECT name FROM sailors WHERE rating > ( SELECT max(rating) FROM sailors WHERE name = 'Luis' ) ;	boat_1
SELECT name , id FROM sailor WHERE rating > 2 INTERSECT SELECT name , id FROM sailor WHERE reserved = 1 ;	boat_1
SELECT name , id FROM sailors WHERE rating >= 3 INTERSECT SELECT name , id FROM boats WHERE reserved = 1	boat_1
SELECT name , age FROM sailor ORDER BY age DESC LIMIT 1;	boat_1
SELECT name , age FROM sailor ORDER BY age DESC LIMIT 1;	boat_1
SELECT count(*) FROM sailors ;	boat_1
SELECT count(*) FROM sailors ;	boat_1
SELECT avg(age) FROM sailors WHERE rating = 7;	boat_1
SELECT avg(age) FROM sailors WHERE rating = 7;	boat_1
SELECT count(*) FROM sailors WHERE name LIKE 'D%' ;	boat_1
SELECT count(*) FROM sailors WHERE name LIKE 'D%' ;	boat_1
SELECT avg(rating) , max(age) FROM sailors ;	boat_1
SELECT avg(rating) , max(age) FROM sailors ;	boat_1
SELECT Boat , count(*) FROM Reservations GROUP BY Boat ;	boat_1
SELECT Boat , count(*) FROM Reservations GROUP BY Boat ;	boat_1
SELECT count(*) , boat_id FROM Reservations WHERE boat_id > 50 GROUP BY boat_id ;	boat_1
SELECT count(*) , boat_id FROM Reservations WHERE boat_id > 50 GROUP BY boat_id ;	boat_1
SELECT boat , count(*) FROM Reservations GROUP BY boat HAVING count(*) > 1 ;	boat_1
SELECT Boat , count(*) FROM Reservations GROUP BY Boat HAVING count(*) > 1 ;	boat_1
SELECT Boat , count(*) FROM Reservations WHERE SailorId > 1 GROUP BY Boat ;	boat_1
SELECT boat , count(*) FROM Reservations WHERE sailor_id > 1 GROUP BY boat ;	boat_1
SELECT rating , avg(age) FROM sailors WHERE boat = "red" GROUP BY rating ;	boat_1
SELECT rating , avg( age ) FROM sailors WHERE boat_color = "red" GROUP BY rating ;	boat_1
SELECT name , rating , age FROM sailors ORDER BY rating , age ;	boat_1
SELECT name , rating , age FROM sailors ORDER BY rating ASC , age ASC ;	boat_1
SELECT count(*) FROM boats ;	boat_1
SELECT count(*) FROM boats ;	boat_1
SELECT count(*) FROM boats WHERE color = "red" ;	boat_1
SELECT count(*) FROM boats WHERE color = "red" ;	boat_1
SELECT T1.Name FROM Boat AS T1 JOIN Sailor AS T2 ON T1.SailorID = T2.SailorID WHERE T2.Age BETWEEN 20 AND 30 ;	boat_1
SELECT BoatName FROM Bookings WHERE Age BETWEEN 20 AND 30 GROUP BY BoatName;	boat_1
SELECT name FROM sailors WHERE rating > ( SELECT max(rating) FROM boats WHERE color = "red" ) ;	boat_1
SELECT T1.Name FROM Sailor AS T1 JOIN Boat AS T2 ON T1.SailorID = T2.SailorID WHERE T2.Color = "Red" EXCEPT SELECT T1.Name FROM Sailor AS T1 JOIN Boat AS T2 ON T1.SailorID = T2.SailorID WHERE T2.Color = "Red" AND T1.Rating <= ( SELECT MAX(Rating) FROM Boat WHERE Color = "Red" ) ;	boat_1
SELECT max(rating) FROM sailors ;	boat_1
SELECT max(rating) FROM sailors;	boat_1
SELECT T1.Name FROM Sailors AS T1 JOIN Reservations AS T2 ON T1.SailorID = T2.SailorID WHERE T2.BoatName = "Melon" ;	boat_1
SELECT T1.Name FROM Sailor AS T1 JOIN Boat AS T2 ON T1.SailorID = T2.SailorID WHERE T2.Name = "Melon"	boat_1
SELECT name , age FROM sailors ORDER BY rating DESC ;	boat_1
SELECT name , age FROM sailors ORDER BY rating DESC ;	boat_1
SELECT model FROM headphones ORDER BY price DESC LIMIT 1;	headphone_store
SELECT model FROM headphones ORDER BY price DESC LIMIT 1;	headphone_store
SELECT DISTINCT model FROM headphones ORDER BY model ASC;	headphone_store
SELECT DISTINCT model FROM headphones ORDER BY model ASC;	headphone_store
SELECT class FROM headphones GROUP BY class ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT class FROM headphones GROUP BY class ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT class FROM headphones GROUP BY class HAVING count(*) > 2 ;	headphone_store
SELECT class FROM headphones GROUP BY class HAVING count(*) <= 2 ;	headphone_store
SELECT class , count(*) FROM headphones WHERE price > 200 GROUP BY class ;	headphone_store
SELECT count(*) FROM headphones WHERE price > 200 GROUP BY class;	headphone_store
SELECT count(DISTINCT earpad) FROM table_name;	headphone_store
SELECT count(DISTINCT earpad) FROM table_name;	headphone_store
SELECT earpad , count(*) FROM table GROUP BY earpad ORDER BY count(*) DESC LIMIT 2 ;	headphone_store
SELECT earpad , count(*) FROM headphones GROUP BY earpad ORDER BY count(*) DESC LIMIT 2 ;	headphone_store
SELECT model , class , construction FROM headphones ORDER BY price ASC LIMIT 1 ;	headphone_store
SELECT Model , Class , Construction FROM Headphones ORDER BY Price ASC LIMIT 1 ;	headphone_store
SELECT AVG(Price) , Construction FROM Headphones GROUP BY Construction ;	headphone_store
SELECT AVG(price) FROM headphones GROUP BY construction;	headphone_store
SELECT class FROM headphones WHERE earpads = "Bowls" INTERSECT SELECT class FROM headphones WHERE earpads = "Comfort Pads"	headphone_store
SELECT CLASS FROM HEADPHONES WHERE EARPAD = "Bowls" INTERSECT SELECT CLASS FROM HEADPHONES WHERE EARPAD = "Comfort Pads"	headphone_store
SELECT earpad FROM earpads WHERE plasticconstruction = 0 GROUP BY earpad HAVING count(*) = ( SELECT count(*) FROM earpads GROUP BY earpad ORDER BY count(*) DESC LIMIT 1 ) ;	headphone_store
SELECT * FROM earpads WHERE earpad_construction != 'plastic' ;	headphone_store
SELECT model FROM headphones WHERE price < (SELECT avg(price) FROM headphones) ;	headphone_store
SELECT Model FROM Headphones WHERE Price < (SELECT avg(Price) FROM Headphones) ;	headphone_store
SELECT store_name FROM stores ORDER BY store_open_date ASC;	headphone_store
SELECT store_name FROM stores ORDER BY store_open_date ASC ;	headphone_store
SELECT name , parking_info FROM stores WHERE neighborhood = "Tarzana" ;	headphone_store
SELECT store_name , parking_information FROM stores WHERE neighborhood = "Tarzana" ;	headphone_store
SELECT count(DISTINCT neighborhood) FROM stores;	headphone_store
SELECT count(DISTINCT neighborhood) FROM stores;	headphone_store
SELECT neighborhood , count(*) FROM stores GROUP BY neighborhood ;	headphone_store
SELECT Neighborhood , count(*) FROM Stores GROUP BY Neighborhood ;	headphone_store
SELECT store_name , count(*) FROM headphones GROUP BY store_name ORDER BY count(*) DESC LIMIT 1 ;	headphone_store
SELECT store_name , sum(qty) FROM headphones GROUP BY store_name ORDER BY sum(qty) DESC LIMIT 1 ;	headphone_store
SELECT name FROM store WHERE headphone = 0 ;	headphone_store
SELECT store_name FROM headphones WHERE store_id NOT IN (SELECT store_id FROM headphones) ;	headphone_store
SELECT DISTINCT model FROM headphones WHERE store_id IS NULL ;	headphone_store
SELECT DISTINCT model FROM headphones WHERE store_id NOT IN (SELECT store_id FROM headphones) ;	headphone_store
SELECT model FROM headphones GROUP BY model ORDER BY count(*) DESC LIMIT 1;	headphone_store
SELECT model FROM headphones GROUP BY model ORDER BY SUM(quantity) DESC LIMIT 1;	headphone_store
SELECT count(*) FROM headphones WHERE store = 'Woodman' ;	headphone_store
SELECT sum(Quantity) FROM Store WHERE StoreName = "Woodman" ;	headphone_store
SELECT T1.neighborhood FROM headphones AS T1 JOIN neighborhoods AS T2 ON T1.neighborhood_id = T2.neighborhood_id GROUP BY T1.neighborhood_id HAVING count(*) = 0;	headphone_store
SELECT T1.neighborhood FROM headphones AS T1 JOIN store AS T2 ON T1.store_id = T2.store_id GROUP BY T1.neighborhood HAVING count(*) = 0 ;	headphone_store
SELECT count(*) FROM authors ;	aan_1
SELECT count(*) FROM authors ;	aan_1
SELECT count(*) FROM papers ;	aan_1
SELECT count(*) FROM papers ;	aan_1
SELECT count(*) FROM affiliation ;	aan_1
SELECT count(*) FROM affiliation ;	aan_1
SELECT count(*) FROM papers WHERE conference = "NAACL 2000" ;	aan_1
SELECT count(*) FROM papers WHERE conference = "NAACL 2000" ;	aan_1
SELECT count(*) FROM papers WHERE university = "Columbia University" AND year = 2009 ;	aan_1
SELECT count(*) FROM papers WHERE university = "Columbia University" AND year = 2009 ;	aan_1
SELECT name , address FROM affiliation ;	aan_1
SELECT name , address FROM affiliation ;	aan_1
SELECT venue , year FROM papers ORDER BY year , venue ;	aan_1
SELECT DISTINCT venue FROM papers ORDER BY year DESC;	aan_1
SELECT T1.Title , T2.PaperID FROM Papers AS T1 JOIN Authors AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.Institution = "Harvard University" ;	aan_1
SELECT T1.title , T2.paperid FROM papers AS T1 JOIN authors AS T2 ON T1.authorid = T2.authorid WHERE T2.institution = "Harvard University"	aan_1
SELECT T1.title , T1.paperid FROM papers AS T1 JOIN authors AS T2 ON T1.paperid = T2.paperid WHERE T2.name = "McKeown"	aan_1
SELECT T1.title , T2.paperid FROM papers AS T1 JOIN authors AS T2 ON T1.authorid = T2.authorid WHERE T2.name = "McKeown"	aan_1
SELECT T1.title , T1.paperid FROM papers AS T1 JOIN collaborators AS T2 ON T1.paperid = T2.paperid WHERE T2.university = "Stanford University" INTERSECT SELECT T1.title , T1.paperid FROM papers AS T1 JOIN collaborators AS T2 ON T1.paperid = T2.paperid WHERE T2.university = "Columbia University" ;	aan_1
SELECT T2.title , T2.paperid FROM affiliation AS T1 JOIN paper AS T2 ON T1.paperid = T2.paperid WHERE T1.university = "Stanford" INTERSECT SELECT T2.title , T2.paperid FROM affiliation AS T1 JOIN paper AS T2 ON T1.paperid = T2.paperid WHERE T1.university = "Columbia"	aan_1
SELECT T1.Title , T1.PaperID FROM Papers AS T1 JOIN Coauthors AS T2 ON T1.PaperID = T2.PaperID JOIN Authors AS T3 ON T2.AuthorID = T3.AuthorID WHERE T3.FirstName = "McKeown" AND T3.LastName = "Kathleen" OR T3.FirstName = "Rambow" AND T3.LastName = "Owen" GROUP BY T1.Title , T1.PaperID;	aan_1
SELECT T1.Title , T2.PaperID FROM Paper AS T1 JOIN AuthorPaper AS T2 ON T1.PaperID = T2.PaperID JOIN Author AS T3 ON T2.AuthorID = T3.AuthorID WHERE T3.Name = "McKeown, Kathleen" INTERSECT SELECT T1.Title , T2.PaperID FROM Paper AS T1 JOIN AuthorPaper AS T2 ON T1.PaperID = T2.PaperID JOIN Author AS T3 ON T2.AuthorID = T3.AuthorID WHERE T3.Name = "Rambow, Owen"	aan_1
SELECT T1.Title , T2.PaperID FROM Paper AS T1 JOIN Author AS T2 ON T1.PaperID = T2.PaperID WHERE T2.AuthorName = 'Mckeown' AND T2.AuthorName != 'Rambow' ;	aan_1
SELECT T1.title , T2.paper_id FROM authorship AS T1 JOIN paper AS T2 ON T1.paper_id = T2.paper_id WHERE T1.author_name = "Mckeown" AND T1.author_name != "Rambow" ;	aan_1
SELECT T1.Title , T2.PaperID FROM Papers AS T1 JOIN Authors AS T2 ON T1.PaperID = T2.PaperID WHERE T2.Author = "Mckeown, Kathleen" OR T2.Author = "Rambow, Owen"	aan_1
SELECT T1.Title , T2.PaperID FROM Papers AS T1 JOIN Authors AS T2 ON T1.PaperID = T2.PaperID WHERE T2.Author = "Mckeown, Kathleen" OR T2.Author = "Rambow, Owen"	aan_1
SELECT name , count(*) FROM authors GROUP BY name ORDER BY count(*) DESC ;	aan_1
SELECT count(*) , author FROM papers GROUP BY author ORDER BY count(*) DESC ;	aan_1
SELECT * FROM affiliations ORDER BY papers ASC;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ORDER BY count(*) DESC ;	aan_1
SELECT name FROM authors WHERE paper_count > 50 ;	aan_1
SELECT name FROM authors WHERE id IN (SELECT author_id FROM papers GROUP BY author_id HAVING count(*) > 50)	aan_1
SELECT T1.name FROM authors AS T1 JOIN papers AS T2 ON T1.authorid = T2.authorid GROUP BY T1.name HAVING count(*) = 1 ;	aan_1
SELECT name FROM authors WHERE id IN (SELECT author_id FROM papers GROUP BY author_id HAVING count(*) = 1) ;	aan_1
SELECT venue , year FROM publications GROUP BY venue , year ORDER BY count(*) DESC LIMIT 1 ;	aan_1
SELECT venue , year FROM publications GROUP BY venue , year ORDER BY count(*) DESC LIMIT 1 ;	aan_1
SELECT venue FROM publications GROUP BY venue ORDER BY count(*) LIMIT 1;	aan_1
SELECT venue FROM publications GROUP BY venue ORDER BY count(*) LIMIT 1;	aan_1
SELECT count(*) FROM papers WHERE id = 'A00-1002' ;	aan_1
SELECT count(*) FROM papers WHERE citedby = "A00-1002" ;	aan_1
SELECT count(*) FROM paper WHERE id = 'D12-1027' ;	aan_1
SELECT count(*) FROM papers AS T1 JOIN references AS T2 ON T1.id = T2.paper_id WHERE T1.id = "D12-1027" ;	aan_1
SELECT id , count(*) FROM papers GROUP BY id ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT id , count(*) FROM papers GROUP BY id ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT T1.title FROM papers AS T1 JOIN citations AS T2 ON T1.paperid = T2.paperid GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT T1.title FROM Papers AS T1 JOIN Citations AS T2 ON T1.paperid = T2.paperid GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT T1.title , T2.citation FROM citation AS T1 JOIN paper AS T2 ON T1.paperid = T2.paperid ORDER BY T2.citation DESC LIMIT 10;	aan_1
SELECT T1.title , T2.citations FROM citations AS T1 JOIN papers AS T2 ON T1.paperid = T2.paperid ORDER BY T2.citations DESC LIMIT 10 ;	aan_1
SELECT count(*) FROM citation WHERE author = "Mckeown , Kathleen" ;	aan_1
SELECT count(*) FROM citations AS T1 JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T2.name = "McKeown, Kathleen" ;	aan_1
SELECT count(*) FROM Papers AS T1 JOIN Authors AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.AuthorName = "McKeown, Kathleen" ;	aan_1
SELECT count(*) FROM papers AS T1 JOIN authors AS T2 ON T1.authorid = T2.authorid WHERE T2.firstname = "McKeown" AND T2.lastname = "Kathleen" ;	aan_1
SELECT name , count(*) FROM author GROUP BY name ORDER BY count(*) DESC LIMIT 1 ;	aan_1
SELECT T1.name , T2.citation FROM author AS T1 JOIN citation AS T2 ON T1.id = T2.author_id ORDER BY T2.citation DESC LIMIT 1	aan_1
SELECT venue , year FROM papers WHERE author = "Mckeown , Kathleen" GROUP BY venue , year ;	aan_1
SELECT venue , year FROM papers WHERE author = "Mckeown , Kathleen" GROUP BY venue , year ;	aan_1
SELECT venue , year FROM papers WHERE institution = "Columbia University" GROUP BY venue , year ;	aan_1
SELECT venue , year FROM papers WHERE institution = "Columbia University" GROUP BY venue , year ORDER BY venue , year ;	aan_1
SELECT author FROM papers WHERE year = 2009 GROUP BY author ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT author FROM papers WHERE year = 2009 GROUP BY author ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT affiliation , count(*) FROM papers WHERE year = 2009 GROUP BY affiliation ORDER BY count(*) DESC LIMIT 3 ;	aan_1
SELECT affiliation , count(*) FROM papers WHERE year = 2009 GROUP BY affiliation ORDER BY count(*) DESC LIMIT 3 ;	aan_1
SELECT count(*) FROM papers WHERE university = "Columbia University" AND year <= 2009 ;	aan_1
SELECT count(*) FROM papers WHERE university = "Columbia University" AND year < 2009 ;	aan_1
SELECT count(*) FROM papers WHERE year BETWEEN 2000 AND 2009 ;	aan_1
SELECT count(*) FROM papers WHERE university = "Stanford" AND year BETWEEN 2000 AND 2009 ;	aan_1
SELECT count(*) , title FROM papers GROUP BY title ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT title FROM papers ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT count(*) FROM collaborators AS T1 JOIN people AS T2 ON T1.person_id = T2.person_id WHERE T2.name = "McKeown, Kathleen" ;	aan_1
SELECT count(*) FROM collaborator AS T1 JOIN person AS T2 ON T1.personid = T2.personid WHERE T2.name = "McKeown, Kathleen" ;	aan_1
SELECT count(*) , author FROM papers GROUP BY author ORDER BY count(*) DESC LIMIT 1 ;	aan_1
SELECT T1.Author FROM author AS T1 JOIN paper_author AS T2 ON T1.AuthorID = T2.AuthorID JOIN paper AS T3 ON T2.PaperID = T3.PaperID GROUP BY T1.Author ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT id FROM papers WHERE title LIKE '%translation%' ;	aan_1
SELECT id FROM papers WHERE title LIKE '%translation%' ;	aan_1
SELECT id , title FROM papers WHERE id NOT IN ( SELECT paper_id FROM citations ) ;	aan_1
SELECT paper_id , title FROM papers WHERE paper_id NOT IN ( SELECT paper_id FROM citations ) ;	aan_1
SELECT T1.name FROM affiliation AS T1 JOIN publication AS T2 ON T1.id = T2.affiliation_id GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT T1.name FROM affiliation AS T1 JOIN journal AS T2 ON T1.id = T2.affiliation_id WHERE T2.address LIKE '%China%' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1;	aan_1
SELECT year , count(*) FROM papers GROUP BY year ;	aan_1
SELECT venue , year , count(*) FROM papers GROUP BY venue , year ;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ;	aan_1
SELECT affiliation , count(*) FROM papers GROUP BY affiliation ;	aan_1
SELECT title FROM papers WHERE citations > 50;	aan_1
SELECT title FROM papers WHERE citations > 50;	aan_1
SELECT count(*) FROM authors WHERE id NOT IN (SELECT author_id FROM papers WHERE citation_count > 50) ;	aan_1
SELECT count(*) FROM authors WHERE id NOT IN (SELECT author_id FROM papers WHERE citations > 50) ;	aan_1
SELECT DISTINCT T1.name FROM authors AS T1 JOIN papers AS T2 ON T1.authorid = T2.authorid WHERE T2.year = 2009 AND T2.naacl = 1 AND T2.acl = 1;	aan_1
SELECT DISTINCT T1.name FROM authors AS T1 JOIN publications AS T2 ON T1.authorid = T2.authorid WHERE T2.year = 2009 AND T2.journal = "NAACL" INTERSECT SELECT DISTINCT T1.name FROM authors AS T1 JOIN publications AS T2 ON T1.authorid = T2.authorid WHERE T2.year = 2009 AND T2.journal = "ACL"	aan_1
SELECT name FROM authors WHERE id NOT IN (SELECT author_id FROM papers WHERE conference = 'ACL') ;	aan_1
SELECT DISTINCT T1.name FROM authors AS T1 JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T2.acl_paper_id IS NULL;	aan_1
SELECT count(*) FROM conferences ;	conference
SELECT count(*) FROM conferences ;	conference
SELECT DISTINCT conference FROM conferences;	conference
SELECT DISTINCT conference FROM conferences ;	conference
SELECT conference_name , year , location FROM conferences ;	conference
SELECT name , year , location FROM conferences ;	conference
SELECT conference , count(*) FROM conferences GROUP BY conference ;	conference
SELECT conference , count(*) FROM matches GROUP BY conference ;	conference
SELECT year , count(*) FROM conferences GROUP BY year ;	conference
SELECT count(*) FROM conferences;	conference
SELECT year FROM conferences GROUP BY year ORDER BY count(*) LIMIT 1;	conference
SELECT year FROM conferences GROUP BY year ORDER BY count(*) ASC LIMIT 1;	conference
SELECT location FROM conferences GROUP BY location HAVING count(*) >= 2 ;	conference
SELECT location FROM conferences GROUP BY location HAVING count(*) >= 2 ;	conference
SELECT institution_name , location , founded_year FROM institution ;	conference
SELECT name , location , founding_year FROM institution ;	conference
SELECT count(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900 ;	conference
SELECT count(*) FROM Institution WHERE Founded BETWEEN 1850 AND 1900 ;	conference
SELECT institution_name , institution_location FROM institution ORDER BY institution_founded DESC LIMIT 1 ;	conference
SELECT name , location FROM institution ORDER BY year_founded DESC LIMIT 1;	conference
SELECT institution_name , count(*) FROM institution WHERE founded_year > 1800 GROUP BY institution_name ;	conference
SELECT T1.institution_id , T1.name , count(*) FROM staff AS T1 JOIN institution AS T2 ON T1.institution_id = T2.institution_id WHERE T2.founded_year > 1800 GROUP BY T1.institution_id , T1.name ;	conference
SELECT T1.InstitutionName FROM Institution AS T1 JOIN Staff AS T2 ON T1.InstitutionID = T2.InstitutionID GROUP BY T1.InstitutionName HAVING count(*) = 0 ;	conference
SELECT name FROM institution WHERE staff = 0 ;	conference
SELECT Staff_Name FROM Staff WHERE Staff_Age > (SELECT avg(Staff_Age) FROM Staff) GROUP BY Staff_Name;	conference
SELECT name FROM staff WHERE age > (SELECT avg(age) FROM staff) ;	conference
SELECT max(age) , min(age) FROM staff WHERE country = "United States" ;	conference
SELECT max(age) , min(age) FROM staff ;	conference
SELECT Conference FROM Staff WHERE Country = "Canada" GROUP BY Conference;	conference
SELECT conference FROM staff WHERE country = "Canada" GROUP BY conference HAVING count(*) > 0 ;	conference
SELECT Staff_Name FROM Staff WHERE Staff_ID IN (SELECT Staff_ID FROM Conference_Speaker) INTERSECT SELECT Staff_Name FROM Staff WHERE Staff_ID IN (SELECT Staff_ID FROM Conference_Sponsor) ;	conference
SELECT T1.Name FROM Staff AS T1 JOIN ConferenceSpeakers AS T2 ON T1.StaffID = T2.StaffID JOIN ConferenceSponsors AS T3 ON T1.StaffID = T3.StaffID;	conference
SELECT DISTINCT T1.Name FROM ACL AS T1 JOIN NACCL AS T2 ON T1.Name = T2.Name;	conference
SELECT DISTINCT T1.Name FROM Conference AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T1.ConferenceName = "ACL" INTERSECT SELECT DISTINCT T1.Name FROM Conference AS T1 JOIN Conference AS T2 ON T1.ConferenceID = T2.ConferenceID WHERE T1.ConferenceName = "NACCL"	conference
SELECT T1.Staff_Name FROM Staff AS T1 JOIN Conference AS T2 ON T1.Staff_ID = T2.Staff_ID WHERE T2.Year = 2003 OR T2.Year = 2004;	conference
SELECT Staff_Name FROM Staff WHERE Conference_Year BETWEEN 2003 AND 2004 GROUP BY Staff_Name;	conference
SELECT conference_name , year , count(*) FROM conferences GROUP BY conference_name , year ;	conference
SELECT conference_id , conference_name , year , num_participants FROM conferences ;	conference
SELECT name FROM conferences ORDER BY num_attendants DESC LIMIT 2;	conference
SELECT name FROM conferences ORDER BY num_attending DESC LIMIT 2;	conference
SELECT T1.name , T1.nationality FROM people AS T1 JOIN acl AS T2 ON T1.id = T2.id GROUP BY T1.id HAVING count(*) = 0 ;	conference
SELECT name , nationality FROM person WHERE id NOT IN ( SELECT person_id FROM acl_conference ) ;	conference
SELECT T1.university , T1.location FROM university AS T1 JOIN conference AS T2 ON T1.university = T2.university WHERE T2.year != 2004 GROUP BY T1.university , T1.location HAVING count(*) = 0 ;	conference
SELECT T1.name , T1.location FROM university AS T1 JOIN conference AS T2 ON T1.id = T2.university_id WHERE T2.year != 2004 GROUP BY T1.name , T1.location HAVING count(*) = 0 ;	conference
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;	pilot_1
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;	pilot_1
SELECT name FROM pilots WHERE age < (SELECT avg(age) FROM pilots) ORDER BY age ASC;	pilot_1
SELECT name FROM pilots WHERE age < (SELECT avg(age) FROM pilots) ORDER BY age;	pilot_1
SELECT * FROM pilots WHERE age < 30 ;	pilot_1
SELECT * FROM pilots WHERE age < 30 ;	pilot_1
SELECT T1.Name FROM Pilot AS T1 JOIN Plane AS T2 ON T1.PlaneID = T2.PlaneID WHERE T2.Model = "Piper Cub" AND T1.Age < 35;	pilot_1
SELECT name FROM pilots WHERE age < 35 AND plane = "Piper Cub" ;	pilot_1
SELECT LOCATION FROM PLANE WHERE NAME = "F-14 Fighter" ;	pilot_1
SELECT location FROM hangar WHERE aircraft = "F-14 Fighter" ;	pilot_1
SELECT count(DISTINCT place) FROM planes;	pilot_1
SELECT count(DISTINCT location) FROM hangar;	pilot_1
SELECT plane FROM pilot WHERE age = 32 AND name = "Jones" ;	pilot_1
SELECT T1.Plane FROM Pilot AS T1 JOIN Plane AS T2 ON T1.PlaneID = T2.PlaneID WHERE T1.Age = 32 AND T1.Name = "Jones" ;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 ;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 ;	pilot_1
SELECT count(*) FROM pilot WHERE age < 35 AND plane = 'B-52' ;	pilot_1
SELECT count(*) FROM pilots WHERE age < 35 AND aircraft = "B-52" ;	pilot_1
SELECT name FROM pilots WHERE age = (SELECT min(age) FROM pilots WHERE plane = "Piper Cub") ORDER BY age ASC LIMIT 1;	pilot_1
SELECT T1.Name FROM Pilot AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Model = "Piper Cub" ORDER BY T1.Age LIMIT 1;	pilot_1
SELECT name FROM planes GROUP BY name ORDER BY count(*) DESC LIMIT 1;	pilot_1
SELECT name FROM plane GROUP BY name ORDER BY count(*) DESC LIMIT 1;	pilot_1
SELECT name FROM planes ORDER BY count(*) LIMIT 1;	pilot_1
SELECT name FROM planes ORDER BY count(*) LIMIT 1;	pilot_1
SELECT count(*) FROM pilots WHERE plane_city = "Chicago" ;	pilot_1
SELECT count(*) FROM pilots WHERE plane_city = "Chicago" ;	pilot_1
SELECT Plane FROM Pilot WHERE Pilot_Name = "Smith" AND Age = 41 ;	pilot_1
SELECT T1.Name FROM Pilot AS T1 JOIN Plane AS T2 ON T1.PilotID = T2.PilotID WHERE T1.Name = "Smith" AND T1.Age = 41;	pilot_1
SELECT count(DISTINCT plane_id) FROM pilots;	pilot_1
SELECT count(DISTINCT plane_name) FROM pilots;	pilot_1
SELECT count(*) FROM planes WHERE pilot_name = "Smith" ;	pilot_1
SELECT count(*) FROM planes WHERE owner = "Smith" ;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 ;	pilot_1
SELECT count(*) FROM planes WHERE pilot_age > 40 ;	pilot_1
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;	pilot_1
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;	pilot_1
SELECT name FROM pilot ORDER BY age DESC;	pilot_1
SELECT name FROM pilots ORDER BY age DESC;	pilot_1
SELECT location FROM planes ORDER BY plane_name ASC ;	pilot_1
SELECT location FROM planes ORDER BY plane_name;	pilot_1
SELECT DISTINCT T1.type FROM pilot AS T1 JOIN plane AS T2 ON T1.pilotid = T2.pilotid ORDER BY T1.type ASC ;	pilot_1
SELECT DISTINCT plane_name FROM planes ORDER BY plane_name ASC;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 OR age < 30 ;	pilot_1
SELECT count(*) FROM pilots WHERE age > 40 OR age < 30 ;	pilot_1
SELECT name , age FROM pilots WHERE age > 35 AND plane = "Piper Cub" UNION SELECT name , age FROM pilots WHERE age < 30 AND plane = "F-14 Fighter"	pilot_1
SELECT name , age FROM pilot WHERE age > 35 INTERSECT SELECT name , age FROM pilot WHERE age < 30 INTERSECT SELECT name , age FROM pilot WHERE flight = "Piper Cub" INTERSECT SELECT name , age FROM pilot WHERE flight = "F-14 Fighter"	pilot_1
SELECT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.plane_type = "Piper Cub" AND T2.plane_type != "B-52 Bomber" GROUP BY T1.pilot_name;	pilot_1
SELECT name FROM pilots WHERE aircraft LIKE "%Piper Cub%" INTERSECT SELECT name FROM pilots WHERE aircraft LIKE "%B-52 Bomber%" EXCEPT SELECT name FROM pilots WHERE aircraft LIKE "%Piper Cub%" AND aircraft LIKE "%B-52 Bomber%"	pilot_1
SELECT DISTINCT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.plane_type = "Piper Cub" OR T2.plane_type = "B-52 Bomber" ;	pilot_1
SELECT T1.Name FROM Pilot AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Model = "Piper Cub" INTERSECT SELECT T1.Name FROM Pilot AS T1 JOIN Aircraft AS T2 ON T1.AircraftID = T2.AircraftID WHERE T2.Model = "B-52 Bomber"	pilot_1
SELECT avg(age) , min(age) FROM pilots ;	pilot_1
SELECT avg(age) , min(age) FROM pilots ;	pilot_1
SELECT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.city = "Austin" INTERSECT SELECT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.city = "Boston"	pilot_1
SELECT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.city = "Austin" OR T2.city = "Boston" GROUP BY T1.pilot_name;	pilot_1
SELECT DISTINCT T1.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.pilot_id = T2.pilot_id WHERE T2.plane_type = "Piper Cub" OR T2.plane_type = "F-14 Fighter"	pilot_1
SELECT name FROM pilots WHERE aircraft = "Piper Cub" OR aircraft = "F-14 Fighter"	pilot_1
SELECT AVG(Age) , Type FROM Pilots GROUP BY Type ;	pilot_1
SELECT AVG(T1.age) , T2.plane_name FROM pilots AS T1 JOIN planes AS T2 ON T1.plane_id = T2.plane_id GROUP BY T2.plane_name;	pilot_1
SELECT type , count(*) FROM planes GROUP BY type ;	pilot_1
SELECT count(*) , plane_name FROM planes GROUP BY plane_name ;	pilot_1
SELECT T1.name , T2.type FROM pilots AS T1 JOIN planes AS T2 ON T1.plane_id = T2.id ORDER BY T2.name , T1.age DESC ;	pilot_1
SELECT T1.plane_name , T2.pilot_name FROM pilots AS T1 JOIN planes AS T2 ON T1.plane_id = T2.plane_id ORDER BY T1.plane_name , T2.pilot_name ASC ;	pilot_1
SELECT T1.Name , T2.Plane_Type , MAX(T1.Age) FROM Pilot AS T1 JOIN Plane AS T2 ON T1.Plane_Type = T2.Plane_Type GROUP BY T1.Name , T2.Plane_Type ORDER BY T1.Name , T2.Plane_Type ;	pilot_1
SELECT DISTINCT T1.plane_name , T2.pilot_name FROM plane AS T1 JOIN pilot AS T2 ON T1.pilot_id = T2.pilot_id ORDER BY T1.plane_name , T2.pilot_name ;	pilot_1
SELECT name , max(age) FROM pilots GROUP BY name ;	pilot_1
SELECT DISTINCT T1.pilot_name , MAX(T2.age) FROM pilots AS T1 JOIN pilots_age AS T2 ON T1.pilot_id = T2.pilot_id GROUP BY T1.pilot_name;	pilot_1
SELECT city , count(*) , avg(age) FROM pilots GROUP BY city ;	pilot_1
SELECT hangar_location , count(*) , avg(age) FROM pilots GROUP BY hangar_location ;	pilot_1
SELECT count(*) FROM plane_type AS T1 JOIN pilot AS T2 ON T1.plane_type_id = T2.plane_type_id GROUP BY T1.plane_type_id HAVING avg(T2.age) < 35 ;	pilot_1
SELECT T1.plane_name , count(*) FROM pilots AS T1 JOIN planes AS T2 ON T1.plane_id = T2.plane_id GROUP BY T1.plane_name HAVING avg(T1.age) < 35 ;	pilot_1
SELECT T1.Location FROM Plane AS T1 JOIN Pilot AS T2 ON T1.Plane_ID = T2.Plane_ID WHERE T2.Age = (SELECT MIN(Age) FROM Pilot) ORDER BY T2.Age DESC LIMIT 1;	pilot_1
SELECT LOCATION FROM PLANE JOIN PILOT ON PLANE.PLANE_ID = PILOT.PLANE_ID ORDER BY AGE LIMIT 1;	pilot_1
SELECT T1.Name , T1.Age FROM Pilot AS T1 JOIN Plane AS T2 ON T1.PlaneID = T2.PlaneID WHERE T2.City = "Austin" ;	pilot_1
SELECT T1.Name , T1.Age FROM Pilot AS T1 JOIN Plane AS T2 ON T1.PlaneID = T2.PlaneID WHERE T2.City = "Austin" ;	pilot_1
SELECT name FROM pilots WHERE age > (SELECT age FROM pilots WHERE plane = "Piper Cub") ORDER BY name ASC;	pilot_1
SELECT name FROM pilots WHERE age > (SELECT max(age) FROM pilots WHERE aircraft = "Piper Cub") ORDER BY name ASC;	pilot_1
SELECT count(*) FROM pilot WHERE age < ( SELECT min(age) FROM pilot WHERE plane = 'F-14 Fighter' ) ;	pilot_1
SELECT count(*) FROM pilot WHERE age < ( SELECT max(age) FROM pilot WHERE pilot_type = "F-14 Fighter" ) ;	pilot_1
SELECT DISTINCT name FROM planes WHERE name LIKE '%Bomber%' ;	pilot_1
SELECT distinct name FROM plane WHERE name LIKE '%Bomber%' ;	pilot_1
SELECT count(*) FROM pilot WHERE age > (SELECT age FROM pilot WHERE plane = "Piper Cub") ;	pilot_1
SELECT count(*) FROM pilots WHERE age > ( SELECT min(age) FROM pilots WHERE aircraft = "Piper Cub" ) ;	pilot_1
SELECT name FROM district ORDER BY area DESC LIMIT 1;	district_spokesman
SELECT area , government_website FROM district ORDER BY population LIMIT 1 ;	district_spokesman
SELECT name , population FROM districts WHERE area > (SELECT avg(area) FROM districts) ;	district_spokesman
SELECT max(area) , avg(area) FROM districts ;	district_spokesman
SELECT sum(population) FROM districts ORDER BY area DESC LIMIT 3;	district_spokesman
SELECT id , name , government_website , population FROM districts ORDER BY population DESC ;	district_spokesman
SELECT T1.name FROM district AS T1 JOIN government_link AS T2 ON T1.id = T2.district_id WHERE T2.domain = 'gov' ;	district_spokesman
SELECT id , name FROM districts WHERE population > 4000 OR area > 3000 ;	district_spokesman
SELECT T1.name , T2.title FROM spokesman AS T1 JOIN speech AS T2 ON T1.speech_id = T2.id ;	district_spokesman
SELECT avg(points) , avg(age) FROM spokesmen WHERE rank_position = 1 ;	district_spokesman
SELECT name , points FROM spokesmen WHERE age < 40 ;	district_spokesman
SELECT name FROM spokesman ORDER BY age DESC LIMIT 1;	district_spokesman
SELECT name FROM spokesman ORDER BY points LIMIT 1 OFFSET (SELECT avg(points) FROM spokesman)	district_spokesman
SELECT T1.district , count(*) FROM spokesmen AS T1 JOIN district AS T2 ON T1.district = T2.district GROUP BY T1.district ORDER BY count(*) DESC LIMIT 1 ;	district_spokesman
SELECT T1.Name FROM Spokesman AS T1 JOIN District AS T2 ON T1.DistrictID = T2.DistrictID WHERE T2.Year < 2004 GROUP BY T1.Name HAVING COUNT(*) > 1;	district_spokesman
SELECT district , count(*) FROM show GROUP BY district ;	district_spokesman
SELECT T1.district FROM district AS T1 JOIN spokesman AS T2 ON T1.district = T2.district WHERE T2.rank_position = 1 INTERSECT SELECT T1.district FROM district AS T1 JOIN spokesman AS T2 ON T1.district = T2.district WHERE T2.rank_position = 2 ;	district_spokesman
SELECT district FROM spokesman GROUP BY district HAVING count(*) > 1 ;	district_spokesman
SELECT count(*) FROM district WHERE spokesmen = 0 ;	district_spokesman
SELECT name FROM spokesmen WHERE district_id IS NULL ;	district_spokesman
SELECT sum(population) , avg(population) FROM district WHERE spokesman is not null ;	district_spokesman
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1 ;	art_1
SELECT name FROM Sculpture ORDER BY year DESC LIMIT 1 ;	art_1
SELECT T1.title , T1.location FROM painting AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id ORDER BY T1.year DESC LIMIT 1 ;	art_1
SELECT T1.name , T2.location FROM paintings AS T1 JOIN locations AS T2 ON T1.location_id = T2.id ORDER BY T1.year DESC LIMIT 1 ;	art_1
SELECT name FROM sculptures WHERE gallery_id = 226 ;	art_1
SELECT name FROM Sculptures WHERE gallery_id = 226 ;	art_1
SELECT title , location FROM paintings ;	art_1
SELECT DISTINCT title , location FROM paintings ;	art_1
SELECT Title , Location FROM Sculptures ;	art_1
SELECT Sculpture , Location FROM Sculptures ;	art_1
SELECT medium FROM paintings WHERE id = 80 ;	art_1
SELECT medium FROM paintings WHERE id = 80 ;	art_1
SELECT first_name , last_name FROM artist WHERE birth_year > 1850 ;	art_1
SELECT full_name FROM artist WHERE birth_year > 1850;	art_1
SELECT name , year FROM sculptures WHERE gallery_id != 226 ;	art_1
SELECT name , date_created FROM sculptures WHERE gallery_id != 226 ;	art_1
SELECT DISTINCT artist FROM Sculptures WHERE year < 1900 ORDER BY artist;	art_1
SELECT DISTINCT T1.first_name , T1.last_name FROM artists AS T1 JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id WHERE T2.year < 1900 ORDER BY T1.first_name , T1.last_name;	art_1
SELECT DISTINCT birth FROM artist WHERE id IN (SELECT artist FROM sculpture WHERE year > 1920) ;	art_1
SELECT DISTINCT birth_year , artist_name FROM artists WHERE sculpture_year > 1920 ORDER BY birth_year ASC ;	art_1
SELECT T1.first_name , T1.last_name FROM artist AS T1 JOIN album AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.release_date DESC LIMIT 1;	art_1
SELECT full_name FROM artist ORDER BY years_lived DESC LIMIT 1;	art_1
SELECT Age FROM artist ORDER BY Life DESC LIMIT 1;	art_1
SELECT age FROM artist ORDER BY age DESC LIMIT 1;	art_1
SELECT T1.first_name , T1.age FROM artist AS T1 JOIN album AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.duration DESC LIMIT 1;	art_1
SELECT T1.first_name , T1.age FROM artist AS T1 JOIN artist AS T2 ON T1.died < T2.died ORDER BY T1.died LIMIT 1;	art_1
SELECT count(*) FROM paintings WHERE gallery_id = 240 ;	art_1
SELECT count(*) FROM paintings WHERE gallery_id = 240 ;	art_1
SELECT count(*) FROM artist JOIN painting ON artist.artist_id = painting.artist_id ORDER BY artist.lifespan DESC LIMIT 1;	art_1
SELECT artist , count(*) FROM paintings GROUP BY artist ORDER BY count(*) DESC LIMIT 1 ;	art_1
SELECT DISTINCT artist , year FROM paintings WHERE artist LIKE 'Mary%' ;	art_1
SELECT name , year FROM paintings WHERE artist LIKE 'Mary%' ;	art_1
SELECT width FROM paintings WHERE artist_born < 1850;	art_1
SELECT max(width) FROM paintings WHERE artist_born < 1850;	art_1
SELECT location , medium FROM paintings WHERE artist_first_name = "Pablo" ;	art_1
SELECT location , medium FROM paintings WHERE artist_first_name = "Pablo" ;	art_1
SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN work AS T2 ON T1.artist_id = T2.artist_id JOIN medium AS T3 ON T2.medium_id = T3.medium_id WHERE T3.name = "Painting" INTERSECT SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN work AS T2 ON T1.artist_id = T2.artist_id JOIN medium AS T3 ON T2.medium_id = T3.medium_id WHERE T3.name = "Sculpture"	art_1
SELECT full_name FROM artist WHERE medium = "painting" INTERSECT SELECT full_name FROM artist WHERE medium = "sculpture" ;	art_1
SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id WHERE T2.medium = "oil" INTERSECT SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id WHERE T2.medium = "litho"	art_1
SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id WHERE T2.medium = "oil" INTERSECT SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id WHERE T2.medium = "lithography" ;	art_1
SELECT birth_year FROM artists WHERE id IN (SELECT artist_id FROM paintings WHERE year = 1884 AND medium = 'Canvas') ORDER BY birth_year DESC LIMIT 1;	art_1
SELECT YEAR(birth_date) FROM artist WHERE id = (SELECT artist_id FROM painting WHERE year = 1884) ;	art_1
SELECT DISTINCT T1.first_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id JOIN medium AS T3 ON T2.medium_id = T3.medium_id JOIN gallery AS T4 ON T2.gallery_id = T4.gallery_id WHERE T4.gallery_id = 241 AND T3.name = "oil"	art_1
SELECT T1.first_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id JOIN gallery AS T3 ON T2.gallery_id = T3.gallery_id WHERE T3.gallery_id = 241 AND T2.painting_type = "oil" GROUP BY T1.first_name;	art_1
SELECT medium , count(*) FROM works GROUP BY medium ;	art_1
SELECT medium , count(*) FROM works GROUP BY medium ;	art_1
SELECT medium , avg(height) FROM paintings GROUP BY medium ;	art_1
SELECT medium , avg(height) FROM paintings GROUP BY medium ;	art_1
SELECT place , count(*) FROM paintings WHERE year < 1900 GROUP BY place ;	art_1
SELECT location , count(*) FROM paintings WHERE year < 1900 GROUP BY location ;	art_1
SELECT title FROM paintings WHERE year_created > 1910 AND medium = "oil"	art_1
SELECT name FROM oil_paintings WHERE year > 1910;	art_1
SELECT DISTINCT T1.painter_id FROM Paintings AS T1 JOIN Exhibitions AS T2 ON T1.painter_id = T2.painter_id JOIN Galleries AS T3 ON T2.gallery_id = T3.gallery_id WHERE T3.gallery_id = 240 AND T1.painting_medium = "oil"	art_1
SELECT DISTINCT painter_id FROM paintings WHERE medium = "oil" AND gallery_id = 240 ;	art_1
SELECT DISTINCT title FROM paintings WHERE height > (SELECT height FROM paintings WHERE title = "On Canvas") ;	art_1
SELECT DISTINCT T1.title FROM painting AS T1 JOIN painting AS T2 ON T1.height > T2.height ORDER BY T1.height DESC;	art_1
SELECT DISTINCT T1.id FROM paintings AS T1 JOIN galleries AS T2 ON T1.gallery_id = T2.id WHERE T2.id != 240 AND T1.year < ( SELECT MAX(year) FROM paintings AS T3 JOIN galleries AS T4 ON T3.gallery_id = T4.id WHERE T4.id = 240 ) ;	art_1
SELECT DISTINCT T1.id FROM painting AS T1 JOIN gallery AS T2 ON T1.gallery_id = T2.id WHERE T1.year < T2.year AND T2.id = 240;	art_1
SELECT id FROM painting ORDER BY date DESC LIMIT 1;	art_1
SELECT id FROM painting ORDER BY date DESC LIMIT 1;	art_1
SELECT T1.first_name , T1.last_name FROM artists AS T1 JOIN works AS T2 ON T1.artist_id = T2.artist_id JOIN sculptures AS T3 ON T2.sculpture_id = T3.sculpture_id WHERE T3.title LIKE "%female%" ORDER BY T1.first_name ASC , T1.last_name ASC LIMIT 1 , 1;	art_1
SELECT full_name FROM artists WHERE id IN (SELECT artist_id FROM sculptures WHERE title LIKE '%female%') ;	art_1
SELECT DISTINCT name FROM paintings ORDER BY name ASC;	art_1
SELECT DISTINCT name FROM paintings ORDER BY name ASC;	art_1
SELECT DISTINCT name FROM paintings ORDER BY LENGTH(name) ASC;	art_1
SELECT DISTINCT name FROM paintings ORDER BY height ASC;	art_1
SELECT T1.Name FROM Sculptures AS T1 JOIN Paintings AS T2 ON T1.Artist = T2.Artist WHERE T1.Year BETWEEN 1900 AND 1950 OR T2.Year BETWEEN 1900 AND 1950 ;	art_1
SELECT name FROM paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT name FROM sculptures WHERE year BETWEEN 1900 AND 1950 ;	art_1
SELECT title FROM works_of_art WHERE artist_id = 222;	art_1
SELECT title FROM works WHERE artist_id = 222;	art_1
SELECT artist_id FROM painting WHERE year < 1900 GROUP BY artist_id ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT artist_id FROM paintings WHERE year < 1900 GROUP BY artist_id ORDER BY count(*) DESC LIMIT 1	art_1
SELECT T1.first_name FROM artists AS T1 JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.first_name ORDER BY count(*) DESC LIMIT 1;	art_1
SELECT first_name FROM sculptors ORDER BY works DESC LIMIT 1;	art_1
SELECT name FROM paintings WHERE width < 600 OR height > 800 ;	art_1
SELECT title FROM paintings WHERE width < 600 OR height > 800 ;	art_1
SELECT location FROM paintings WHERE year < 1885 OR year > 1930 ;	art_1
SELECT location FROM works WHERE year < 1885 OR year > 1930 GROUP BY location;	art_1
SELECT id FROM paintings WHERE height > 500 AND height < 2000 ;	art_1
SELECT id FROM paintings WHERE height > 500 AND height < 2000;	art_1
SELECT location FROM paintings WHERE medium = "on panel" INTERSECT SELECT location FROM paintings WHERE medium = "on canvas"	art_1
SELECT location FROM paintings WHERE medium = "on panels" INTERSECT SELECT location FROM paintings WHERE medium = "on canvas"	art_1
SELECT location FROM paintings WHERE year_created < 1885 INTERSECT SELECT location FROM paintings WHERE year_created > 1930	art_1
SELECT location FROM works WHERE year < 1885 INTERSECT SELECT location FROM works WHERE year > 1930 ;	art_1
SELECT AVG(height), AVG(width) FROM paintings WHERE medium = "oil" AND gallery = 241;	art_1
SELECT avg(height), avg(width) FROM paintings WHERE medium = "oil" AND gallery = 241;	art_1
SELECT max(height) , id FROM paintings WHERE year < 1900 GROUP BY id ;	art_1
SELECT height , id FROM paintings WHERE year < 1900 ORDER BY height DESC LIMIT 1;	art_1
SELECT max(height), max(width) FROM paintings GROUP BY year;	art_1
SELECT max(width), max(height), year FROM paintings GROUP BY year;	art_1
SELECT painter , avg(height) , avg(width) FROM paintings GROUP BY painter ORDER BY painter ;	art_1
SELECT painter , avg(height) , avg(width) FROM paintings GROUP BY painter ORDER BY name ;	art_1
SELECT first_name , count(*) FROM artist GROUP BY first_name HAVING count(*) >= 2 ;	art_1
SELECT T1.first_name , count(*) FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.first_name HAVING count(*) >= 2	art_1
SELECT death_year FROM artists WHERE artist_id IN (SELECT artist_id FROM paintings GROUP BY artist_id HAVING count(*) <= 3) ;	art_1
SELECT artist , date_of_death FROM artists WHERE artist_id IN ( SELECT artist_id FROM paintings GROUP BY artist_id HAVING count(*) < 4 ) ORDER BY date_of_death DESC ;	art_1
SELECT death_year FROM artist WHERE id IN (SELECT artist_id FROM sculpture ORDER BY count(*) LIMIT 1) ;	art_1
SELECT artist , date_of_death FROM artist ORDER BY count(*) DESC LIMIT 1 ;	art_1
SELECT T1.id , T1.height FROM painting AS T1 JOIN gallery AS T2 ON T1.gallery_id = T2.id ORDER BY T1.width DESC LIMIT 1;	art_1
SELECT height , id FROM paintings WHERE gallery_id = 240 ORDER BY height DESC LIMIT 1;	art_1
SELECT T1.id FROM paintings AS T1 JOIN gallery AS T2 ON T1.gallery_id = T2.id WHERE T2.id != 240 GROUP BY T1.id HAVING COUNT(*) < (SELECT COUNT(*) FROM paintings AS T3 JOIN gallery AS T4 ON T3.gallery_id = T4.id WHERE T4.id = 240) ORDER BY T1.id ASC;	art_1
SELECT T1.id FROM paintings AS T1 JOIN galleries AS T2 ON T1.gallery_id = T2.id WHERE T2.id < 240 GROUP BY T1.id ORDER BY T1.id ASC;	art_1
SELECT id FROM paintings WHERE height > ( SELECT max(height) FROM paintings WHERE year < 1900 ) ;	art_1
SELECT id FROM paintings WHERE height > ( SELECT max(height) FROM paintings WHERE year > 1900 ) ;	art_1
SELECT artist , count(*) FROM painting WHERE medium = 'oil' GROUP BY artist ORDER BY count(*) DESC LIMIT 3 ;	art_1
SELECT artist , count(*) FROM paintings GROUP BY artist ORDER BY count(*) DESC LIMIT 1 ;	art_1
SELECT T1.painting_id , T1.location , T1.title FROM painting AS T1 JOIN medium AS T2 ON T1.medium_id = T2.medium_id WHERE T2.medium_name = "oil" ORDER BY T1.year;	art_1
SELECT id , location , title FROM oil_paintings ORDER BY date_of_creation ASC ;	art_1
SELECT year , location , title FROM paintings WHERE height > 1000 ORDER BY title ;	art_1
SELECT year , location , name FROM paintings ORDER BY height DESC;	art_1
SELECT DISTINCT T1.first_name , T1.last_name FROM artist AS T1 JOIN painting AS T2 ON T1.artist_id = T2.artist_id JOIN sculpture AS T3 ON T1.artist_id = T3.artist_id WHERE T2.painting_id IS NOT NULL AND T3.painting_id IS NULL;	art_1
SELECT first_name , last_name FROM artist WHERE artist_id NOT IN ( SELECT artist_id FROM sculpture ) INTERSECT SELECT first_name , last_name FROM artist WHERE artist_id IN ( SELECT artist_id FROM painting ) ;	art_1
SELECT location FROM paintings WHERE year < 1885 AND medium != "on canvas" GROUP BY location HAVING count(*) > 1;	art_1
SELECT * FROM paintings WHERE YEARCREATED < 1885 AND MATERIAL != "Canvas" ;	art_1
SELECT count(*) FROM races ;	car_road_race
SELECT count(*) FROM races ;	car_road_race
SELECT WinningTeam , WinningDriver FROM Races ORDER BY WinningTeam ASC , WinningDriver ASC ;	car_road_race
SELECT T1.DriverName , T2.TeamName FROM Races AS T1 JOIN Drivers AS T2 ON T1.DriverID = T2.DriverID ORDER BY T2.TeamName ASC , T1.DriverName ASC	car_road_race
SELECT T1.Driver FROM Drivers AS T1 JOIN Races AS T2 ON T1.RaceID = T2.RaceID WHERE T2.PolePosition != "Junior Strous" GROUP BY T1.Driver;	car_road_race
SELECT T1.Driver FROM Drivers AS T1 JOIN Races AS T2 ON T1.RaceID = T2.RaceID WHERE T2.PolePosition != 'Junior Strous' GROUP BY T1.Driver ORDER BY COUNT(*) DESC LIMIT 10;	car_road_race
SELECT Constructors , Drivers , Age FROM Drivers ORDER BY Age ASC ;	car_road_race
SELECT DISTINCT constructor , driver , age FROM constructors ORDER BY age ASC ;	car_road_race
SELECT DISTINCT entrant_type FROM drivers WHERE age >= 20;	car_road_race
SELECT DISTINCT entrant_type FROM drivers WHERE age >= 20 GROUP BY entrant_type HAVING count(*) >= 20 ;	car_road_race
SELECT max(age) , min(age) FROM driver ;	car_road_race
SELECT max(age) , min(age) FROM drivers ;	car_road_race
SELECT count(DISTINCT engine) FROM driver WHERE age > 20 OR age < 30 ;	car_road_race
SELECT count(DISTINCT engine) FROM driver WHERE age > 30 OR age < 20 ;	car_road_race
SELECT name FROM drivers ORDER BY name DESC;	car_road_race
SELECT name FROM drivers ORDER BY name DESC;	car_road_race
SELECT T1.DriverName , T2.RaceName FROM Driver AS T1 JOIN Race AS T2 ON T1.RaceID = T2.RaceID ;	car_road_race
SELECT T1.DriverName , T2.RaceName FROM Driver AS T1 JOIN Race AS T2 ON T1.RaceID = T2.RaceID;	car_road_race
SELECT name , count(*) FROM driver GROUP BY name ;	car_road_race
SELECT count(*) , Driver FROM races GROUP BY Driver ;	car_road_race
SELECT age FROM driver ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT age FROM driver ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT T1.Name , T1.Age FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID GROUP BY T1.Name , T1.Age HAVING count(*) >= 2 ;	car_road_race
SELECT Name , Age FROM Driver WHERE DriverID IN ( SELECT DriverID FROM Races GROUP BY DriverID HAVING COUNT(*) >= 2 ) ;	car_road_race
SELECT T1.Name FROM Driver AS T1 JOIN Race AS T2 ON T1.RaceID = T2.RaceID WHERE T1.Age > 26;	car_road_race
SELECT DISTINCT T1.race FROM driver AS T1 JOIN race AS T2 ON T1.race_id = T2.race_id WHERE T1.age > 26;	car_road_race
SELECT name FROM drivers WHERE constructor != "Bugatti" ;	car_road_race
SELECT name FROM driver WHERE constructor != 'Bugatti' ;	car_road_race
SELECT Constructor, COUNT(*) FROM Drivers GROUP BY Constructor;	car_road_race
SELECT Constructor , COUNT(*) FROM Drivers GROUP BY Constructor ;	car_road_race
SELECT engine FROM driver GROUP BY engine ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT engine FROM cars GROUP BY engine ORDER BY count(*) DESC LIMIT 1;	car_road_race
SELECT DISTINCT engine FROM drivers GROUP BY engine HAVING count(*) >= 2 ;	car_road_race
SELECT DISTINCT engine_type FROM drivers GROUP BY engine_type HAVING count(*) >= 2 ;	car_road_race
SELECT name FROM driver WHERE id NOT IN (SELECT driver_id FROM race) ;	car_road_race
SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM race) ;	car_road_race
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30 ;	car_road_race
SELECT T1.Constructor FROM Constructors AS T1 JOIN Drivers AS T2 ON T1.ConstructorID = T2.ConstructorID WHERE T2.Age < 20 INTERSECT SELECT T1.Constructor FROM Constructors AS T1 JOIN Drivers AS T2 ON T1.ConstructorID = T2.ConstructorID WHERE T2.Age > 30;	car_road_race
SELECT team FROM teams GROUP BY team HAVING count(*) > 1 ;	car_road_race
SELECT team FROM races GROUP BY team HAVING count(*) > 1 ;	car_road_race
SELECT DISTINCT T1.DriverName FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID JOIN PolePositions AS T3 ON T2.RaceID = T3.RaceID WHERE T3.DriverName = "James Hinchcliffe" INTERSECT SELECT DISTINCT T1.DriverName FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID JOIN PolePositions AS T3 ON T2.RaceID = T3.RaceID WHERE T3.DriverName = "Carl Skerlong"	car_road_race
SELECT DISTINCT T1.DriverName FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID WHERE T1.DriverName = "James Hinchcliffe" INTERSECT SELECT DISTINCT T1.DriverName FROM Drivers AS T1 JOIN Races AS T2 ON T1.DriverID = T2.DriverID WHERE T1.DriverName = "Carl Skerlong"	car_road_race
SELECT T1.DriverName FROM Driver AS T1 JOIN Race AS T2 ON T1.DriverID = T2.DriverID WHERE T2.PolePosition != "James Hinchcliffe" GROUP BY T1.DriverName HAVING COUNT(*) = 0;	car_road_race
SELECT DISTINCT name FROM driver WHERE name != 'James Hinchcliffe' ;	car_road_race
SELECT count(*) FROM languages ;	country_language
SELECT count(*) FROM languages;	country_language
SELECT name FROM languages ORDER BY name ASC;	country_language
SELECT DISTINCT language FROM languages ORDER BY language ASC;	country_language
SELECT language FROM languages WHERE language LIKE "%ish%" ;	country_language
SELECT language FROM languages WHERE language LIKE "%ish%" ;	country_language
SELECT name FROM countries ORDER BY overall DESC;	country_language
SELECT name FROM countries ORDER BY overall DESC;	country_language
SELECT avg(justice) FROM countries;	country_language
SELECT avg(justice) FROM countries;	country_language
SELECT max(health_score) , min(health_score) FROM countries WHERE country_name != 'Norway' ;	country_language
SELECT max(health) , min(health) FROM countries WHERE country != 'Norway' GROUP BY country ;	country_language
SELECT count(DISTINCT language) FROM official_languages;	country_language
SELECT count(DISTINCT official_language) FROM countries;	country_language
SELECT name FROM countries ORDER BY education_score DESC;	country_language
SELECT name FROM countries ORDER BY education DESC;	country_language
SELECT name FROM country ORDER BY politics DESC LIMIT 1;	country_language
SELECT name FROM countries ORDER BY politics DESC LIMIT 1;	country_language
SELECT name , language FROM countries ;	country_language
SELECT country , language FROM countries ;	country_language
SELECT language , count(*) FROM countries GROUP BY language ;	country_language
SELECT language , count(*) FROM languages GROUP BY language ;	country_language
SELECT official_language FROM countries GROUP BY official_language ORDER BY count(*) DESC LIMIT 1;	country_language
SELECT language , count(*) FROM languages GROUP BY language ORDER BY count(*) DESC LIMIT 1 ;	country_language
SELECT language FROM languages GROUP BY language HAVING count(*) >= 2 ;	country_language
SELECT language FROM official_languages GROUP BY language HAVING count(*) > 1 ;	country_language
SELECT avg(overall_score) FROM countries WHERE official_language = "English" GROUP BY official_language;	country_language
SELECT avg(overall) FROM countries WHERE official_language = "English" GROUP BY official_language;	country_language
SELECT count(*) , language FROM languages GROUP BY language ORDER BY count(*) DESC LIMIT 3 ;	country_language
SELECT language , count(*) FROM languages GROUP BY language ORDER BY count(*) DESC LIMIT 3 ;	country_language
SELECT official_language , avg(overall_score) FROM countries GROUP BY official_language ORDER BY avg(overall_score) DESC ;	country_language
SELECT language FROM official_languages ORDER BY avg_score DESC;	country_language
SELECT name FROM country GROUP BY name ORDER BY count(*) DESC LIMIT 1;	country_language
SELECT country , count(*) FROM languages GROUP BY country ORDER BY count(*) DESC LIMIT 1 ;	country_language
SELECT DISTINCT language FROM languages WHERE language NOT IN (SELECT official_language FROM countries) ;	country_language
SELECT DISTINCT language FROM languages WHERE language NOT IN (SELECT official_language FROM countries) ;	country_language
SELECT name FROM countries WHERE official_language IS NULL ;	country_language
SELECT distinct country FROM countries WHERE language is null ;	country_language
SELECT T1.language FROM languages AS T1 JOIN countries AS T2 ON T1.country_id = T2.country_id WHERE T2.overall_score > 95 OR T2.overall_score < 90 GROUP BY T1.language HAVING COUNT(*) = 2;	country_language
SELECT DISTINCT T1.language FROM languages AS T1 JOIN countries AS T2 ON T1.country_code = T2.country_code WHERE T2.overall_score > 95 INTERSECT SELECT DISTINCT T1.language FROM languages AS T1 JOIN countries AS T2 ON T1.country_code = T2.country_code WHERE T2.overall_score < 90;	country_language
SELECT DISTINCT country , city FROM address ;	real_estate_rentals
SELECT country , city FROM address ;	real_estate_rentals
SELECT state , count(*) FROM properties GROUP BY state ;	real_estate_rentals
SELECT state , province FROM properties ;	real_estate_rentals
SELECT description FROM feature WHERE name = "rooftop" ;	real_estate_rentals
SELECT description FROM feature WHERE name = 'rooftop' ;	real_estate_rentals
SELECT feature_name , feature_description FROM properties GROUP BY feature_name ORDER BY count(*) DESC LIMIT 1	real_estate_rentals
SELECT feature_name , feature_description FROM properties GROUP BY feature_name ORDER BY count(*) DESC LIMIT 1 ;	real_estate_rentals
SELECT min(rooms) FROM properties;	real_estate_rentals
SELECT min(room_count) FROM properties;	real_estate_rentals
SELECT count(*) FROM properties WHERE parking_lots = 1 OR garage = 1 ;	real_estate_rentals
SELECT count(*) FROM properties WHERE parking_lots = 1 OR garage = 1 ;	real_estate_rentals
SELECT age FROM users WHERE description LIKE '%Mother%' GROUP BY age;	real_estate_rentals
SELECT age FROM users WHERE description LIKE "%Mother%" GROUP BY age;	real_estate_rentals
SELECT first_name FROM users GROUP BY first_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT first_name FROM users GROUP BY first_name ORDER BY count(*) DESC LIMIT 1;	real_estate_rentals
SELECT avg(room_count) FROM properties WHERE has_garden = 1;	real_estate_rentals
SELECT avg(rooms) FROM properties WHERE garden = 'yes' ;	real_estate_rentals
SELECT city FROM properties WHERE pool = 1 GROUP BY city HAVING count(*) > 0 ;	real_estate_rentals
SELECT city FROM properties WHERE pool = 'yes' GROUP BY city;	real_estate_rentals
SELECT property_id , price FROM properties ORDER BY price ASC LIMIT 1 ;	real_estate_rentals
SELECT min(requested_price) , property_id FROM property GROUP BY property_id ORDER BY min(requested_price) LIMIT 1 ;	real_estate_rentals
SELECT avg(rooms) FROM properties;	real_estate_rentals
SELECT avg(rooms) FROM properties;	real_estate_rentals
SELECT count(DISTINCT room_size) FROM rooms ;	real_estate_rentals
SELECT count(DISTINCT size) FROM rooms;	real_estate_rentals
SELECT user_id FROM searches GROUP BY user_id HAVING count(*) >= 2 ;	real_estate_rentals
SELECT user_id , count(*) FROM searches GROUP BY user_id HAVING count(*) >= 2 ORDER BY user_id ;	real_estate_rentals
SELECT max(T1.time) FROM search AS T1 JOIN user AS T2 ON T1.user_id = T2.user_id GROUP BY T2.user_id ORDER BY T1.time DESC LIMIT 1 ;	real_estate_rentals
SELECT time FROM search ORDER BY time DESC LIMIT 1;	real_estate_rentals
SELECT user_search_time , user_search_content FROM user_search ORDER BY user_search_content DESC ;	real_estate_rentals
SELECT search_string , timestamp FROM user_search ORDER BY search_string DESC ;	real_estate_rentals
SELECT zip FROM properties WHERE user_id NOT IN (SELECT user_id FROM properties GROUP BY user_id HAVING count(*) <= 2) ;	real_estate_rentals
SELECT DISTINCT T1.zipcode FROM properties AS T1 JOIN users AS T2 ON T1.user_id = T2.user_id GROUP BY T1.zipcode HAVING count(*) < 2;	real_estate_rentals
SELECT category , user_id FROM searches GROUP BY category , user_id HAVING count(*) = 1 ;	real_estate_rentals
SELECT user_id , category_code FROM users WHERE user_id IN ( SELECT user_id FROM searches GROUP BY user_id HAVING count(*) = 1 ) ;	real_estate_rentals
SELECT age_range FROM search ORDER BY id ASC LIMIT 1;	real_estate_rentals
SELECT age_category FROM users ORDER BY search_date ASC LIMIT 1;	real_estate_rentals
SELECT Login_Name FROM Senior_Citizen ORDER BY First_Name;	real_estate_rentals
SELECT login_name FROM senior_citizens ORDER BY first_name ASC;	real_estate_rentals
SELECT count(*) FROM searches;	real_estate_rentals
SELECT count(*) FROM searches WHERE buyer_id IS NOT NULL ;	real_estate_rentals
SELECT register_date FROM users WHERE login_name = "ratione" ;	real_estate_rentals
SELECT reg_date FROM users WHERE login_name = "ratione" ;	real_estate_rentals
SELECT first_name , middle_name , last_name , login_name FROM seller WHERE seller_value = 1 ;	real_estate_rentals
SELECT first_name , middle_name , last_name , login_name FROM users WHERE user_type = 'seller' ;	real_estate_rentals
SELECT Building , Street , City FROM Address WHERE SeniorCitizen = 'Yes' ;	real_estate_rentals
SELECT T1.Street , T1.City , T1.Building FROM SeniorCitizen AS T1 JOIN Address AS T2 ON T1.Street = T2.Street AND T1.City = T2.City AND T1.Building = T2.Building WHERE T1.Age > 60;	real_estate_rentals
SELECT count(*) FROM properties_23 WHERE feature_count >= 2 ;	real_estate_rentals
SELECT count(*) FROM properties WHERE feature_count >= 2 ;	real_estate_rentals
SELECT count(*) , property_id FROM photos GROUP BY property_id ;	real_estate_rentals
SELECT property_id , count(*) FROM property_photos GROUP BY property_id ;	real_estate_rentals
SELECT user_id , count(*) FROM photos GROUP BY user_id ;	real_estate_rentals
SELECT user_id , count(*) FROM property_photos GROUP BY user_id HAVING count(*) > 0 ;	real_estate_rentals
SELECT max(price) FROM properties WHERE owner_type = "single mother" OR owner_type = "student" GROUP BY owner_type;	real_estate_rentals
SELECT max(price) FROM properties WHERE owner_type = "Single mother" UNION SELECT max(price) FROM properties WHERE owner_type = "Student"	real_estate_rentals
SELECT DateStamp , PropertyName FROM PropertyHistory ORDER BY DateStamp ASC ;	real_estate_rentals
SELECT datestamp , propertyname FROM propertyhistory ORDER BY datestamp ASC ;	real_estate_rentals
SELECT description , code FROM property_type ORDER BY count(*) DESC LIMIT 1 ;	real_estate_rentals
SELECT PropertyType , Description FROM Properties GROUP BY PropertyType , Description ORDER BY count(*) DESC LIMIT 1 ;	real_estate_rentals
SELECT * FROM age_category WHERE age_category_code = 'Over 60' ;	real_estate_rentals
SELECT category_description FROM category WHERE age_category = 'Over 60' ;	real_estate_rentals
SELECT DISTINCT room_size , count(*) FROM rooms GROUP BY room_size	real_estate_rentals
SELECT size , count(*) FROM rooms GROUP BY size ;	real_estate_rentals
SELECT T1.Country FROM Users AS T1 JOIN Addresses AS T2 ON T1.AddressID = T2.AddressID WHERE T1.FirstName = "Robbie" ;	real_estate_rentals
SELECT T1.Country FROM Users AS T1 JOIN Addresses AS T2 ON T1.AddressID = T2.AddressID WHERE T1.FirstName = "Robbie" ;	real_estate_rentals
SELECT T1.first_name , T1.middle_name , T1.last_name FROM users AS T1 JOIN properties AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id = T2.user_id GROUP BY T1.user_id ;	real_estate_rentals
SELECT T1.fullname FROM users AS T1 JOIN properties AS T2 ON T1.user_id = T2.owner_id WHERE T2.owner_id = T1.user_id GROUP BY T1.fullname HAVING count(*) > 1;	real_estate_rentals
SELECT search_content FROM users WHERE user_id NOT IN (SELECT user_id FROM properties) ;	real_estate_rentals
SELECT search_string FROM search WHERE user_id NOT IN (SELECT user_id FROM property) ;	real_estate_rentals
SELECT T1.last_name , T1.user_id FROM users AS T1 JOIN properties AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING count(*) >= 2 AND count(*) <= 2 ORDER BY count(*) DESC ;	real_estate_rentals
SELECT last_name , id FROM users WHERE property_count >= 2 AND search_count <= 2 GROUP BY last_name , id HAVING count(*) = 2	real_estate_rentals
SELECT count(*) FROM bikes WHERE weight > 780;	bike_racing
SELECT product_name , weight FROM bikes ORDER BY price ASC ;	bike_racing
SELECT heat , name , nation FROM cyclists ;	bike_racing
SELECT max(weight) , min(weight) FROM bikes ;	bike_racing
SELECT avg(price) FROM bikes WHERE material = 'Carbon CC'	bike_racing
SELECT name , result FROM cyclists WHERE country != 'Russia' ;	bike_racing
SELECT DISTINCT T1.id , T1.product_name FROM bikes AS T1 JOIN orders AS T2 ON T1.id = T2.bike_id WHERE T2.year > 2015 ;	bike_racing
SELECT id , name FROM racing_bikes WHERE id IN ( SELECT bike_id FROM purchases GROUP BY bike_id HAVING count(*) >= 4 ) ;	bike_racing
SELECT id , name FROM Cyclist ORDER BY count(*) DESC LIMIT 1;	bike_racing
SELECT DISTINCT T1.product_name FROM Bike AS T1 JOIN Cyclist AS T2 ON T1.cyclist_id = T2.cyclist_id WHERE T2.country = 'Russia' OR T2.country = 'Great Britain'	bike_racing
SELECT count(DISTINCT level) FROM cyclists;	bike_racing
SELECT count(*) FROM Cyclist AS T1 JOIN Purchase AS T2 ON T1.CyclistID = T2.CyclistID WHERE T2.Year < 2015;	bike_racing
SELECT DISTINCT T1.Name FROM Racing_bikes AS T1 JOIN Cyclists AS T2 ON T1.Cyclist_ID = T2.Cyclist_ID WHERE T2.Result > '4:21.558' GROUP BY T1.Name;	bike_racing
SELECT bike_name , bike_price FROM Bike JOIN Cyclist ON Bike.cyclist_id = Cyclist.cyclist_id WHERE cyclist_name = 'Bradley Wiggins' INTERSECT SELECT bike_name , bike_price FROM Bike JOIN Cyclist ON Bike.cyclist_id = Cyclist.cyclist_id WHERE cyclist_name = 'Antonio Tauler'	bike_racing
SELECT T1.name , T1.nation , T1.result FROM cyclists AS T1 JOIN purchases AS T2 ON T1.cyclistid = T2.cyclistid WHERE T2.racingbikeid IS NULL ;	bike_racing
SELECT name FROM bikes WHERE material LIKE '%fiber%' ;	bike_racing
SELECT cyclist_id , count(*) FROM bikes GROUP BY cyclist_id ORDER BY cyclist_id ;	bike_racing
SELECT max(price) , flavor FROM cake ORDER BY price DESC LIMIT 1;	bakery_1
SELECT id , flavor FROM cake ORDER BY price DESC LIMIT 1;	bakery_1
SELECT flavor , price FROM cookies ORDER BY price ASC LIMIT 1 ;	bakery_1
SELECT id , flavor FROM cookies ORDER BY price ASC LIMIT 1;	bakery_1
SELECT id FROM goods WHERE flavor = 'apple' ;	bakery_1
SELECT id FROM flavors WHERE flavor = 'apple' ;	bakery_1
SELECT id FROM goods WHERE cost < 3 ;	bakery_1
SELECT id FROM goods WHERE cost < 3 ;	bakery_1
SELECT DISTINCT customer_id FROM orders WHERE cake_flavor = "lemon" ;	bakery_1
SELECT DISTINCT customer_id FROM orders WHERE product_flavor = "lemon" ;	bakery_1
SELECT type , count(*) FROM orders GROUP BY type ;	bakery_1
SELECT food , count(*) FROM customers GROUP BY food ;	bakery_1
SELECT T1.id FROM customers AS T1 JOIN orders AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING count(*) >= 15;	bakery_1
SELECT customer_id FROM receipts GROUP BY customer_id HAVING count(*) >= 15 ;	bakery_1
SELECT T1.lname FROM customers AS T1 JOIN orders AS T2 ON T1.custid = T2.custid GROUP BY T1.lname HAVING count(*) > 10 ORDER BY T1.lname DESC LIMIT 10;	bakery_1
SELECT last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE bakery_id IN (SELECT bakery_id FROM orders GROUP BY customer_id HAVING count(*) > 10)) ORDER BY last_name DESC;	bakery_1
SELECT count(DISTINCT type) FROM bakery;	bakery_1
SELECT count(DISTINCT type) FROM bakery;	bakery_1
SELECT Flavor FROM Croissant;	bakery_1
SELECT DISTINCT flavor FROM croissant ORDER BY flavor ASC;	bakery_1
SELECT DISTINCT item FROM orders WHERE cust_num = 15;	bakery_1
SELECT DISTINCT item FROM orders WHERE custid = 15;	bakery_1
SELECT type , avg(price) , max(price) , min(price) FROM food GROUP BY type ;	bakery_1
SELECT avg(price) , min(price) , max(price) FROM food GROUP BY food;	bakery_1
SELECT receipt_number FROM orders WHERE product_name = "Cake" INTERSECT SELECT receipt_number FROM orders WHERE product_name = "Cookie" ;	bakery_1
SELECT receipt_number FROM orders WHERE product_name = "cake" INTERSECT SELECT receipt_number FROM orders WHERE product_name = "cookies"	bakery_1
SELECT receipt_number FROM customers WHERE last_name = "LOGAN" INTERSECT SELECT receipt_number FROM products WHERE product_name = "Croissant"	bakery_1
SELECT receipt_number FROM orders WHERE customer_last_name = "Logan" AND product_name = "Croissant" ;	bakery_1
SELECT receipt_number , receipt_date FROM receipts ORDER BY item_price DESC LIMIT 1;	bakery_1
SELECT receipt_number , receipt_date FROM receipts ORDER BY receipt_total DESC LIMIT 1;	bakery_1
SELECT item FROM sales GROUP BY item ORDER BY count(*) LIMIT 1;	bakery_1
SELECT item FROM sales GROUP BY item ORDER BY count(*) DESC LIMIT 1;	bakery_1
SELECT food_type , count(*) FROM goods GROUP BY food_type ;	bakery_1
SELECT food_type , count(*) FROM goods GROUP BY food_type ;	bakery_1
SELECT food_type , avg(price) FROM food GROUP BY food_type ;	bakery_1
SELECT food_type , avg(price) FROM food GROUP BY food_type ;	bakery_1
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;	bakery_1
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5 ;	bakery_1
SELECT Flavor FROM Cakes WHERE Price > 10;	bakery_1
SELECT Flavors FROM Cakes WHERE Price > 10 ;	bakery_1
SELECT DISTINCT id , price FROM goods WHERE price < ( SELECT avg(price) FROM goods ) ;	bakery_1
SELECT DISTINCT id , price FROM goods WHERE price < ( SELECT avg(price) FROM goods ) ;	bakery_1
SELECT DISTINCT T1.id FROM goods AS T1 JOIN goods AS T2 ON T1.type = T2.type WHERE T1.price < T2.price;	bakery_1
SELECT DISTINCT T1.id FROM goods AS T1 JOIN tart AS T2 ON T1.id = T2.id WHERE T1.cost < T2.cost;	bakery_1
SELECT DISTINCT receipt_number FROM sales WHERE cost > 13;	bakery_1
SELECT DISTINCT receipt_number FROM sales WHERE good_cost > 13 ;	bakery_1
SELECT T1.order_date FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.price > 15 GROUP BY T1.order_date HAVING count(*) > 1;	bakery_1
SELECT T1.PURCHASE_DATE FROM CUSTOMER AS T1 JOIN PURCHASE AS T2 ON T1.CUST_ID = T2.CUST_ID JOIN GOODS AS T3 ON T2.GOOD_ID = T3.GOOD_ID WHERE T3.COST > 15;	bakery_1
SELECT id FROM goods WHERE id LIKE 'APP%' ;	bakery_1
SELECT id FROM goods WHERE id LIKE 'APP%' ;	bakery_1
SELECT * FROM good WHERE id = "70" ; SELECT price FROM good WHERE id = "70" ;	bakery_1
SELECT id , price FROM good WHERE id LIKE '70%' ;	bakery_1
SELECT last_name FROM customers ORDER BY last_name ASC;	bakery_1
SELECT last_name FROM customers ORDER BY last_name ASC;	bakery_1
SELECT id FROM good ORDER BY id ASC;	bakery_1
SELECT DISTINCT good_id FROM table_name ORDER BY good_id;	bakery_1
SELECT * FROM receipt WHERE apple_flavor_pie = 1 OR customer_id = 12 ;	bakery_1
SELECT receipt_number FROM pies WHERE flavor = "apple" UNION SELECT receipt_number FROM customers WHERE customer_id = 12;	bakery_1
SELECT receipt_date FROM receipts ORDER BY receipt_date DESC LIMIT 1 ;	bakery_1
SELECT receipt_number , max(date) FROM receipt GROUP BY receipt_number ORDER BY receipt_number DESC LIMIT 1 ;	bakery_1
SELECT * FROM receipts WHERE date_receipt = ( SELECT min(date_receipt) FROM receipts ) OR price_good > 10 ;	bakery_1
SELECT receipt_number FROM receipt WHERE good_price > 10 OR receipt_date = ( SELECT min(receipt_date) FROM receipt ) GROUP BY receipt_number HAVING count(*) > 1;	bakery_1
SELECT id FROM Cookie WHERE cost BETWEEN 3 AND 7 UNION SELECT id FROM Cake WHERE cost BETWEEN 3 AND 7 ;	bakery_1
SELECT id FROM Cookies WHERE price BETWEEN 3 AND 7 UNION SELECT id FROM Cakes WHERE price BETWEEN 3 AND 7 ;	bakery_1
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN visits AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.visit_date LIMIT 1;	bakery_1
SELECT full_name FROM customers ORDER BY visit_date LIMIT 1;	bakery_1
SELECT avg(price) FROM goods WHERE flavor = "blackberry" OR flavor = "blueberry"	bakery_1
SELECT avg(price) FROM goods WHERE flavor = "blackberry" OR flavor = "blueberry" ;	bakery_1
SELECT min(price) FROM goods WHERE flavor = 'cheese' ;	bakery_1
SELECT name FROM products WHERE flavor = "Cheese" ORDER BY price LIMIT 1;	bakery_1
SELECT Flavor , MAX(Price) , MIN(Price) , AVG(Price) FROM Goods GROUP BY Flavor ORDER BY Flavor ASC ;	bakery_1
SELECT flavor , max(price) , min(price) , avg(price) FROM goods GROUP BY flavor ;	bakery_1
SELECT food_type , min(price) , max(price) FROM goods GROUP BY food_type ORDER BY food_type ;	bakery_1
SELECT min(price) , max(price) FROM food_goods ORDER BY food;	bakery_1
SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT customer_id , count(*) FROM orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 ;	bakery_1
SELECT customer_id , count(*) FROM purchases GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1 ;	bakery_1
SELECT date , count(DISTINCT customer_id) FROM customers GROUP BY date ;	bakery_1
SELECT date , count(*) FROM customers GROUP BY date ;	bakery_1
SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_details AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.flavor = "apple" ;	bakery_1
SELECT full_name FROM customers WHERE order_item_id IN (SELECT order_item_id FROM order_items WHERE product_id IN (SELECT product_id FROM products WHERE flavor = 'apple'))	bakery_1
SELECT id FROM Cookies WHERE price < (SELECT price FROM Croissants) ;	bakery_1
SELECT id FROM COOKIES WHERE price < ( SELECT min(price) FROM CROISSANTS ) ;	bakery_1
SELECT id FROM Cakes WHERE price >= (SELECT avg(price) FROM Tarts)	bakery_1
SELECT id FROM Cakes WHERE price >= (SELECT avg(price) FROM Tarts) LIMIT 100;	bakery_1
SELECT id FROM goods WHERE price > (SELECT avg(price) FROM goods) * 2;	bakery_1
SELECT id FROM goods WHERE price > (SELECT avg(price) FROM goods) * 2;	bakery_1
SELECT id , flavor , type FROM food ORDER BY price ASC ;	bakery_1
SELECT id , flavor , food_type FROM goods ORDER BY price DESC ;	bakery_1
SELECT id , flavor FROM Cakes ORDER BY flavor ;	bakery_1
SELECT id , flavor FROM cakes ORDER BY flavor ;	bakery_1
SELECT Item FROM Items WHERE Flavor = 'Chocolate' GROUP BY Item HAVING count(*) < 10 ;	bakery_1
SELECT Item FROM Items WHERE Flavor = "Chocolate" GROUP BY Item HAVING count(*) <= 10 ;	bakery_1
SELECT T1.Flavor FROM Cake AS T1 JOIN Tart AS T2 ON T1.Flavor = T2.Flavor WHERE T2.Flavor IS NULL;	bakery_1
SELECT T1.Flavor FROM Cakes AS T1 JOIN Tart AS T2 ON T1.CakeID = T2.CakeID WHERE T2.CakeID IS NULL;	bakery_1
SELECT goods FROM bakery ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT item FROM purchases GROUP BY item ORDER BY count(*) DESC LIMIT 3;	bakery_1
SELECT customer_id FROM orders GROUP BY customer_id HAVING SUM(amount) > 150 ;	bakery_1
SELECT id FROM customers WHERE total_spent > 150;	bakery_1
SELECT customer_id FROM customers GROUP BY customer_id HAVING avg(spend) > 5;	bakery_1
SELECT customer_id FROM orders GROUP BY customer_id HAVING avg(amount) > 5;	bakery_1
SELECT date FROM sales GROUP BY date HAVING SUM(amount) > 100 ;	bakery_1
SELECT date FROM sales GROUP BY date HAVING SUM(amount) > 100 ;	bakery_1
SELECT count(*) FROM drivers ;	car_racing
SELECT count(*) FROM drivers ;	car_racing
SELECT make , count(*) FROM drivers WHERE points > 150 GROUP BY make ;	car_racing
SELECT make , count(*) FROM drivers WHERE points > 150 GROUP BY make ;	car_racing
SELECT make , avg ( age ) FROM drivers GROUP BY make ;	car_racing
SELECT avg(T1.age), T2.make FROM driver AS T1 JOIN make AS T2 ON T1.makeid = T2.makeid GROUP BY T2.makeid;	car_racing
SELECT avg(laps) FROM races WHERE driver_age < 20 ;	car_racing
SELECT avg(laps) FROM driver WHERE age < 20 ;	car_racing
SELECT T1.Manager , T1.Sponsor FROM Teams AS T1 JOIN CarOwners AS T2 ON T1.CarOwnerID = T2.CarOwnerID ORDER BY T1.CarOwnerID ASC	car_racing
SELECT T1.manager , T1.sponsor , T2.owner FROM Team AS T1 JOIN CarOwner AS T2 ON T1.owner_id = T2.id ORDER BY T1.owner_id;	car_racing
SELECT make FROM teams GROUP BY make HAVING count(*) > 1 ;	car_racing
SELECT make FROM teams GROUP BY make HAVING count(*) > 1 ;	car_racing
SELECT DISTINCT make FROM teams WHERE car_owner = "Buddy Arrington" ;	car_racing
SELECT make FROM teams WHERE car_owner = "Buddy Arrington" ;	car_racing
SELECT max(points) , min(points) FROM drivers ;	car_racing
SELECT max(points) , min(points) FROM drivers ;	car_racing
SELECT count(*) FROM Drivers WHERE Points < 150 ;	car_racing
SELECT count(*) FROM Drivers WHERE Points < 150 ;	car_racing
SELECT name FROM drivers ORDER BY age ASC;	car_racing
SELECT driver_name FROM drivers ORDER BY driver_age ASC;	car_racing
SELECT name FROM drivers ORDER BY points DESC;	car_racing
SELECT * FROM driver ORDER BY points DESC;	car_racing
SELECT name , country FROM driver ;	car_racing
SELECT name , country FROM driver ;	car_racing
SELECT max(points) FROM driver WHERE country = "Dublin" GROUP BY country ORDER BY points DESC LIMIT 1;	car_racing
SELECT max(points) FROM driver WHERE country_capital = "Dublin" ;	car_racing
SELECT avg(T1.age) FROM driver AS T1 JOIN country AS T2 ON T1.country_code = T2.country_code WHERE T2.native_language = "English" GROUP BY T2.country_code;	car_racing
SELECT avg(T1.age) FROM Driver AS T1 JOIN Country AS T2 ON T1.CountryID = T2.CountryID WHERE T2.Language = "English" GROUP BY T2.CountryID;	car_racing
SELECT Country FROM Drivers WHERE Points > 150 GROUP BY Country;	car_racing
SELECT Country FROM Drivers WHERE Points > 150 GROUP BY Country HAVING COUNT(*) > 1;	car_racing
SELECT T1.capital FROM country AS T1 JOIN driver AS T2 ON T1.capitalcode = T2.capitalcode WHERE T2.points = (SELECT MAX(points) FROM driver) GROUP BY T1.capital ORDER BY T2.points DESC LIMIT 1;	car_racing
SELECT T1.Country , T1.Capital FROM driver AS T1 JOIN driver_points AS T2 ON T1.DriverID = T2.DriverID ORDER BY T2.Points DESC LIMIT 1 ;	car_racing
SELECT make , count(*) FROM drivers GROUP BY make ;	car_racing
SELECT make , count(*) FROM drivers GROUP BY make ;	car_racing
SELECT make FROM drivers GROUP BY make ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT make , count(*) FROM driver GROUP BY make ORDER BY count(*) DESC LIMIT 1 ;	car_racing
SELECT driver_make FROM drivers GROUP BY driver_make HAVING count(*) >= 3 ;	car_racing
SELECT make FROM drivers GROUP BY make HAVING count(*) >= 3 ;	car_racing
SELECT T2.Name FROM Drivers AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID GROUP BY T2.Name HAVING count(*) = 0 ;	car_racing
SELECT DISTINCT T1.Team FROM Teams AS T1 JOIN Drivers AS T2 ON T1.TeamID = T2.TeamID GROUP BY T1.Team HAVING count(*) = 1 ;	car_racing
SELECT Country FROM Drivers WHERE Make = "Dodge" INTERSECT SELECT Country FROM Drivers WHERE Make = "Chevrolet"	car_racing
SELECT country FROM drivers WHERE make = "Dodge" INTERSECT SELECT country FROM drivers WHERE make = "Chevrolet"	car_racing
SELECT sum(points) , avg(points) FROM driver ;	car_racing
SELECT sum(points) , avg(points) FROM driver ;	car_racing
SELECT country FROM driver GROUP BY country HAVING count(*) = 0 ;	car_racing
SELECT country FROM drivers GROUP BY country HAVING count(*) = 0 ;	car_racing
SELECT T2.Manager , T2.Sponsor FROM Drivers AS T1 JOIN Teams AS T2 ON T1.TeamID = T2.TeamID ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT T1.Manager , T1.Sponsor FROM Team AS T1 JOIN Driver AS T2 ON T1.TeamID = T2.TeamID GROUP BY T1.TeamID ORDER BY count(*) DESC LIMIT 1;	car_racing
SELECT T1.manager , T1.car_owner FROM team AS T1 JOIN driver AS T2 ON T1.team_id = T2.team_id GROUP BY T1.manager , T1.car_owner HAVING count(*) >= 2	car_racing
SELECT T1.manager , T1.car_owner FROM Team AS T1 JOIN Driver AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id HAVING count(*) >= 2 ;	car_racing
SELECT count(*) FROM institution ;	institution_sports
SELECT count(*) FROM institution ;	institution_sports
SELECT name FROM institution ORDER BY name ASC;	institution_sports
SELECT name FROM institution ORDER BY name ASC;	institution_sports
SELECT name FROM institution ORDER BY founded_year ASC;	institution_sports
SELECT name FROM institution ORDER BY year_founded DESC;	institution_sports
SELECT city , province FROM institution ;	institution_sports
SELECT city , province FROM institution ;	institution_sports
SELECT max(enrollment) , min(enrollment) FROM institution ;	institution_sports
SELECT max(enrollment) , min(enrollment) FROM institution ;	institution_sports
SELECT DISTINCT affiliation FROM institution WHERE city != "Vancouver" ;	institution_sports
SELECT DISTINCT affiliation FROM institutions WHERE city != 'Vancouver' ;	institution_sports
SELECT stadium FROM institution ORDER BY capacity DESC;	institution_sports
SELECT stadium FROM institutions ORDER BY capacity DESC;	institution_sports
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;	institution_sports
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;	institution_sports
SELECT name , nickname FROM institution ;	institution_sports
SELECT name , nickname FROM institution ;	institution_sports
SELECT nickname FROM institution ORDER BY enrollment LIMIT 1;	institution_sports
SELECT nickname FROM institution ORDER BY enrollment LIMIT 1;	institution_sports
SELECT name FROM institution ORDER BY championships DESC;	institution_sports
SELECT name FROM institution ORDER BY championships DESC;	institution_sports
SELECT Institution FROM Championships GROUP BY Institution HAVING COUNT(*) > 0 ;	institution_sports
SELECT Institution FROM Championships GROUP BY Institution HAVING count(*) > 1 ;	institution_sports
SELECT count(*) FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id = T2.institution_id WHERE T1.public_affiliation = 'public' GROUP BY T1.institution_id;	institution_sports
SELECT count(*) FROM institution AS T1 JOIN championships AS T2 ON T1.institution_id = T2.institution_id WHERE T1.public_affiliation = 'Public' GROUP BY T1.institution_id;	institution_sports
SELECT DISTINCT affiliation , count(*) FROM institution GROUP BY affiliation ;	institution_sports
SELECT affiliation , count(*) FROM institution GROUP BY affiliation ;	institution_sports
SELECT type FROM affiliation GROUP BY type ORDER BY count(*) DESC LIMIT 1;	institution_sports
SELECT type FROM affiliation GROUP BY type ORDER BY count(*) DESC LIMIT 1;	institution_sports
SELECT year FROM institutions GROUP BY year HAVING count(*) > 1 ;	institution_sports
SELECT year , count(*) FROM institutions GROUP BY year HAVING count(*) > 1 ;	institution_sports
SELECT nickname FROM institution ORDER BY capacity DESC;	institution_sports
SELECT nickname FROM institution ORDER BY capacity DESC;	institution_sports
SELECT sum(enrollment) FROM institution WHERE city = 'Vancouver' OR city = 'Calgary' ;	institution_sports
SELECT * FROM enrollments WHERE institution_city = "Vancouver" OR institution_city = "Calgary" ;	institution_sports
SELECT province FROM institutions WHERE founded < 1920 INTERSECT SELECT province FROM institutions WHERE founded > 1950 ;	institution_sports
SELECT DISTINCT province FROM institutions WHERE founded < 1920 OR founded > 1950 ;	institution_sports
SELECT count(DISTINCT province) FROM institution ;	institution_sports
SELECT count(DISTINCT province) FROM institution ;	institution_sports
SELECT * FROM warehouses ;	warehouse_1
SELECT * FROM warehouses;	warehouse_1
SELECT DISTINCT content FROM table_name WHERE state = 'New York' ;	warehouse_1
SELECT DISTINCT contents FROM boxes WHERE city = "New York" ;	warehouse_1
SELECT * FROM Boxes WHERE Value > 150;	warehouse_1
SELECT * FROM boxes WHERE value > 150 ;	warehouse_1
SELECT warehouse_code , avg(boxes) FROM warehouse GROUP BY warehouse_code ;	warehouse_1
SELECT AVG(Boxes) , Warehouse FROM Boxes GROUP BY Warehouse ;	warehouse_1
SELECT avg(box_value), sum(box_value) FROM boxes;	warehouse_1
SELECT AVG(Total), SUM(Total) FROM Boxes;	warehouse_1
SELECT avg(capacity), sum(capacity) FROM warehouses;	warehouse_1
SELECT avg(capacity), sum(capacity) FROM warehouses;	warehouse_1
SELECT content , avg(value) , max(value) FROM table GROUP BY content ;	warehouse_1
SELECT type , max ( value ) , avg ( value ) FROM boxes GROUP BY type ;	warehouse_1
SELECT content FROM table_name GROUP BY content ORDER BY SUM(total) DESC LIMIT 1;	warehouse_1
SELECT content FROM boxes ORDER BY value DESC LIMIT 1;	warehouse_1
SELECT avg(box) FROM boxes;	warehouse_1
SELECT avg(boxes) FROM boxes;	warehouse_1
SELECT DISTINCT Contents FROM Boxes;	warehouse_1
SELECT DISTINCT contents FROM boxes ;	warehouse_1
SELECT count(DISTINCT contents) FROM boxes;	warehouse_1
SELECT count(DISTINCT content) FROM boxes;	warehouse_1
SELECT DISTINCT LOCATION FROM WAREHOUSE;	warehouse_1
SELECT location FROM warehouses GROUP BY location;	warehouse_1
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Warehouse FROM Warehouses WHERE City IN ('Chicago', 'New York'))	warehouse_1
SELECT box_code FROM warehouse_boxes WHERE warehouse_code IN (SELECT warehouse_code FROM warehouses WHERE city IN ('Chicago', 'New York')) ;	warehouse_1
SELECT sum(boxes) FROM warehouses WHERE city IN ('Chicago', 'New York') ;	warehouse_1
SELECT sum(value) FROM boxes WHERE city = "Chicago" OR city = "New York"	warehouse_1
SELECT CONTENT FROM WAREHOUSE WHERE LOCATION = 'Chicago' INTERSECT SELECT CONTENT FROM WAREHOUSE WHERE LOCATION = 'New York'	warehouse_1
SELECT content FROM table WHERE city = 'Chicago' INTERSECT SELECT content FROM table WHERE city = 'New York' ;	warehouse_1
SELECT type FROM contents EXCEPT SELECT type FROM warehouses WHERE city = "New York" ;	warehouse_1
SELECT DISTINCT content FROM warehouse WHERE state = 'New York' ;	warehouse_1
SELECT LOCATION FROM WAREHOUSE WHERE CONTENTS = "Rocks" EXCEPT SELECT LOCATION FROM WAREHOUSE WHERE CONTENTS = "Scissors"	warehouse_1
SELECT LOCATION FROM WAREHOUSE AS T1 JOIN BOX AS T2 ON T1.WAREHOUSE_ID = T2.WAREHOUSE_ID JOIN ITEM AS T3 ON T2.ITEM_ID = T3.ITEM_ID WHERE T3.ITEM_NAME = "Rocks" AND T3.ITEM_NAME != "Scissors" GROUP BY LOCATION;	warehouse_1
SELECT warehouse FROM contents WHERE content IN ('Rocks', 'Scissors') GROUP BY warehouse;	warehouse_1
SELECT DISTINCT WAREHOUSE FROM contents WHERE CONTENT IN ( 'ROCKS', 'SCISSORS' ) ;	warehouse_1
SELECT LOCATION FROM WAREHOUSE WHERE CONTENTS = "Rocks" INTERSECT SELECT LOCATION FROM WAREHOUSE WHERE CONTENTS = "Scissors" ;	warehouse_1
SELECT location FROM warehouse WHERE id IN (SELECT warehouse_id FROM box WHERE item_id IN (SELECT id FROM item WHERE name IN ('Rocks', 'Scissors'))) ;	warehouse_1
SELECT code , contents FROM boxes ORDER BY value DESC ;	warehouse_1
SELECT code , content FROM box ORDER BY value DESC ;	warehouse_1
SELECT code , contents FROM box ORDER BY value LIMIT 1 ;	warehouse_1
SELECT code , contents FROM box ORDER BY value LIMIT 1 ;	warehouse_1
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes) ;	warehouse_1
SELECT DISTINCT contents FROM boxes WHERE value > (SELECT avg(value) FROM boxes) ;	warehouse_1
SELECT DISTINCT type FROM contents ORDER BY type ASC ;	warehouse_1
SELECT DISTINCT content FROM boxes ORDER BY content ASC;	warehouse_1
SELECT Code FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Content = 'Rocks' ) ;	warehouse_1
SELECT Code FROM Boxes WHERE Value > ( SELECT MAX( Value ) FROM Boxes WHERE Contains_Rocks = 1 )	warehouse_1
SELECT Code , Content FROM Box WHERE Value > ( SELECT MAX( Value ) FROM Box WHERE Content = 'Scissors' ) ;	warehouse_1
SELECT Code , Contents FROM Box WHERE Value > ( SELECT MAX ( Value ) FROM Box WHERE Contents = "Scissors" ) ;	warehouse_1
SELECT sum(boxes) FROM warehouse WHERE capacity = ( SELECT max(capacity) FROM warehouse ) ;	warehouse_1
SELECT sum(capacity) FROM warehouse WHERE capacity = ( SELECT max(capacity) FROM warehouse ) ;	warehouse_1
SELECT Warehouse_Code , AVG(Box_Value) FROM Boxes GROUP BY Warehouse_Code HAVING AVG(Box_Value) > 150 ;	warehouse_1
SELECT AVG(Boxes) FROM Warehouse GROUP BY WarehouseID HAVING AVG(Boxes) > 150 ;	warehouse_1
SELECT content_type , sum(value) , count(*) FROM content GROUP BY content_type ;	warehouse_1
SELECT content , sum(value) , count(*) FROM content GROUP BY content ;	warehouse_1
SELECT location , sum(capacity) , avg(capacity) , max(capacity) FROM locations GROUP BY location ;	warehouse_1
SELECT location , sum(capacity) , avg(capacity) , max(capacity) FROM warehouses GROUP BY location ;	warehouse_1
SELECT sum(capacity) FROM warehouse;	warehouse_1
SELECT sum(capacity) FROM warehouses;	warehouse_1
SELECT warehouse_location , max(box_value ) FROM boxes GROUP BY warehouse_location ;	warehouse_1
SELECT Location , MAX(Price) FROM Boxes GROUP BY Location ;	warehouse_1
SELECT warehouse_code , count(*) FROM boxes GROUP BY warehouse_code ;	warehouse_1
SELECT warehouse , count(*) FROM boxes GROUP BY warehouse ;	warehouse_1
SELECT count(DISTINCT location) FROM rocks;	warehouse_1
SELECT count(DISTINCT WarehouseID) FROM Rocks;	warehouse_1
SELECT code , city FROM boxes ;	warehouse_1
SELECT box_code , location FROM warehouse_boxes ;	warehouse_1
SELECT code FROM boxes WHERE city = 'Chicago' ;	warehouse_1
SELECT box_code FROM warehouse_boxes WHERE warehouse_city = "Chicago" ;	warehouse_1
SELECT warehouse , count(*) FROM boxes GROUP BY warehouse ;	warehouse_1
SELECT count(*) , warehouse_id FROM boxes GROUP BY warehouse_id ;	warehouse_1
SELECT warehouse_id , count( distinct content_type ) FROM contents GROUP BY warehouse_id ;	warehouse_1
SELECT WarehouseID , COUNT(DISTINCT ContentID) FROM Contents GROUP BY WarehouseID ;	warehouse_1
SELECT warehouse_code FROM warehouse WHERE warehouse_capacity > warehouse_stock;	warehouse_1
SELECT warehouse_code FROM boxes WHERE warehouse_code NOT IN (SELECT warehouse_code FROM boxes GROUP BY warehouse_code HAVING count(*) <= (SELECT max(capacity) FROM warehouses)) ORDER BY count(*) DESC;	warehouse_1
SELECT sum(boxes) FROM warehouse WHERE city != 'Chicago' ;	warehouse_1
SELECT sum(boxes) FROM locations WHERE city != 'Chicago' ;	warehouse_1
SELECT name , city , state FROM university ORDER BY name ASC ;	university_rank
SELECT name , city , state FROM university ORDER BY name;	university_rank
SELECT count(*) FROM university WHERE state = "Illinois" UNION SELECT count(*) FROM university WHERE state = "Ohio"	university_rank
SELECT count(*) FROM university WHERE state = 'Illinois' OR state = 'Ohio' ;	university_rank
SELECT max(enrollment) , avg(enrollment) , min(enrollment) FROM universities ;	university_rank
SELECT max(enrollment) , avg(enrollment) , min(enrollment) FROM universities ;	university_rank
SELECT T2.Team FROM University AS T1 JOIN Team AS T2 ON T1.UniversityID = T2.UniversityID GROUP BY T2.Team HAVING AVG(T1.Enrollment) > (SELECT AVG(Enrollment) FROM University) ORDER BY T2.Team;	university_rank
SELECT T1.Team FROM Teams AS T1 JOIN Universities AS T2 ON T1.UniversityID = T2.UniversityID GROUP BY T1.Team HAVING AVG(T2.PeopleEnrolled) > (SELECT AVG(T2.PeopleEnrolled) FROM Universities) ORDER BY T1.Team;	university_rank
SELECT conference FROM schools GROUP BY conference HAVING conference = "Home" ORDER BY conference ASC;	university_rank
SELECT DISTINCT homeconference FROM university ORDER BY homeconference;	university_rank
SELECT conference , count(*) FROM university GROUP BY conference ;	university_rank
SELECT count(*) FROM home_conference GROUP BY home_conference;	university_rank
SELECT state , count(*) FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1 ;	university_rank
SELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1;	university_rank
SELECT HomeConference FROM Universities WHERE AverageEnrollment > 2000 GROUP BY HomeConference;	university_rank
SELECT T1.Conference FROM University AS T1 JOIN Conference AS T2 ON T1.Conference = T2.Conference GROUP BY T1.Conference HAVING AVG(T1.UniversityEnrollment) > 2000;	university_rank
SELECT conference FROM enrollments GROUP BY conference ORDER BY count(*) LIMIT 1;	university_rank
SELECT conference FROM enrollments GROUP BY conference ORDER BY count(*) LIMIT 1;	university_rank
SELECT major_code , major_name FROM major ORDER BY major_code ASC ;	university_rank
SELECT name , code FROM majors ORDER BY code ASC ;	university_rank
SELECT Major , Rank FROM University_Majors WHERE University_Name = "Augustana College" ;	university_rank
SELECT Rank , Major FROM Majors ORDER BY Rank ;	university_rank
SELECT name , city , state FROM university WHERE rank = 1 AND major = "Accounting" ;	university_rank
SELECT Name , City , State FROM University WHERE Major = "Accounting" AND Rank = 1 ;	university_rank
SELECT T1.university_name FROM University AS T1 JOIN Major AS T2 ON T1.university_id = T2.university_id GROUP BY T1.university_name ORDER BY count(*) DESC LIMIT 1;	university_rank
SELECT T1.university_name FROM University AS T1 JOIN Major AS T2 ON T1.university_id = T2.university_id ORDER BY T2.majors_rank LIMIT 1;	university_rank
SELECT DISTINCT university FROM university_major WHERE rank = 1 ;	university_rank
SELECT DISTINCT T1.University FROM University AS T1 JOIN Major AS T2 ON T1.University = T2.University WHERE T2.Rank != 1;	university_rank
SELECT DISTINCT T1.university_name FROM university AS T1 JOIN major AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = "Accounting" INTERSECT SELECT DISTINCT T1.university_name FROM university AS T1 JOIN major AS T2 ON T1.university_id = T2.university_id WHERE T2.major_name = "Urban Education"	university_rank
SELECT DISTINCT T1.university FROM major AS T1 JOIN major AS T2 ON T1.university = T2.university WHERE T1.major = "Accounting" INTERSECT SELECT DISTINCT T1.university FROM major AS T1 JOIN major AS T2 ON T1.university = T2.university WHERE T1.major = "Urban Education"	university_rank
SELECT name , overall_ranking FROM university ORDER BY overall_ranking DESC ;	university_rank
SELECT name , rank FROM university WHERE state = "Wisconsin" ;	university_rank
SELECT university_name FROM university ORDER BY research_point DESC LIMIT 1;	university_rank
SELECT name FROM university ORDER BY research_points DESC LIMIT 1;	university_rank
SELECT university_name FROM universities ORDER BY reputation_points ASC;	university_rank
SELECT name FROM university ORDER BY reputation_points ASC ;	university_rank
SELECT T1.University FROM University AS T1 JOIN Major AS T2 ON T1.UniversityID = T2.UniversityID WHERE T2.Accounting >= 3 GROUP BY T1.University ORDER BY T2.Accounting DESC LIMIT 1;	university_rank
SELECT T1.university FROM University AS T1 JOIN Major AS T2 ON T1.university_id = T2.university_id WHERE T2.major = "Accounting" AND T2.rank >= 3 GROUP BY T1.university ORDER BY T1.university;	university_rank
SELECT sum(enrollment) FROM university WHERE overall_rank <= 5 ;	university_rank
SELECT count(*) FROM university WHERE rank <= 5 ;	university_rank
SELECT name , citation_point FROM university ORDER BY reputation_points DESC LIMIT 3 ;	university_rank
SELECT name , citation_point FROM university ORDER BY reputation DESC LIMIT 3 ;	university_rank
SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING count(*) > 2 ;	university_rank
SELECT state FROM university WHERE enrollment < 3000 GROUP BY state HAVING count(*) > 2	university_rank
SELECT Title FROM Movies WHERE Rating IS NULL ;	movie_2
SELECT name FROM movies WHERE id NOT IN (SELECT movie_id FROM ratings) ;	movie_2
SELECT name FROM movies WHERE rating = 'G'	movie_2
SELECT name FROM movies WHERE rating = 'G'	movie_2
SELECT T1.title FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id WHERE T2.theater_name = "Odeon" ;	movie_2
SELECT title FROM movies WHERE theater = "Odeon" ;	movie_2
SELECT T1.Name , T2.Name FROM Movies AS T1 JOIN Theaters AS T2 ON T1.TheaterID = T2.TheaterID ;	movie_2
SELECT T1.title , T2.theater_name FROM movie AS T1 JOIN theater AS T2 ON T1.theater_id = T2.theater_id ;	movie_2
SELECT count(*) FROM movie WHERE rating = 'G' ;	movie_2
SELECT count(*) FROM movie WHERE rating = 'G' ;	movie_2
SELECT count(*) FROM movies;	movie_2
SELECT count(*) FROM movie ;	movie_2
SELECT count(DISTINCT movie_id) FROM movies_in_theaters;	movie_2
SELECT count(DISTINCT movie_id) FROM movies_playing;	movie_2
SELECT count(DISTINCT movie_theater_id) FROM movies ;	movie_2
SELECT count(DISTINCT movie_theater_id) FROM movies ;	movie_2
SELECT rating FROM movie WHERE name LIKE '%Citizen%' ;	movie_2
SELECT rating FROM movies WHERE name LIKE '%Citizen%' ;	movie_2
SELECT name FROM cinema WHERE rating = 'G' OR rating = 'PG'	movie_2
SELECT name FROM movie_theaters WHERE rating IN ( 'G', 'PG' ) ;	movie_2
SELECT name FROM movies WHERE name LIKE "%Odeon%" OR name LIKE "%Imperial%" ;	movie_2
SELECT title FROM movies WHERE theater = "Odeon" INTERSECT SELECT title FROM movies WHERE theater = "Imperial"	movie_2
SELECT T1.Name FROM Movies AS T1 JOIN Theaters AS T2 ON T1.TheaterID = T2.TheaterID WHERE T2.TheaterName = "Odeon" INTERSECT SELECT T1.Name FROM Movies AS T1 JOIN Theaters AS T2 ON T1.TheaterID = T2.TheaterID WHERE T2.TheaterName = "Imperial"	movie_2
SELECT T1.title FROM movies AS T1 JOIN theaters AS T2 ON T1.theater_id = T2.theater_id WHERE T2.theater_name = "Odeon" INTERSECT SELECT T1.title FROM movies AS T1 JOIN theaters AS T2 ON T1.theater_id = T2.theater_id WHERE T2.theater_name = "Imperial"	movie_2
SELECT T1.Name FROM Movie AS T1 JOIN Theater AS T2 ON T1.TheaterID = T2.TheaterID WHERE T2.TheaterName != 'Odeon'	movie_2
SELECT name FROM movies WHERE theater != 'Odeon' ;	movie_2
SELECT title FROM movies ORDER BY title ASC;	movie_2
SELECT name FROM movies ORDER BY name ASC;	movie_2
SELECT title FROM movies ORDER BY rating DESC;	movie_2
SELECT movie_name FROM movies ORDER BY rating DESC;	movie_2
SELECT T2.theater_name FROM movies AS T1 JOIN theaters AS T2 ON T1.theater_id = T2.theater_id GROUP BY T2.theater_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT T2.theater_name FROM movies AS T1 JOIN theaters AS T2 ON T1.theater_id = T2.theater_id GROUP BY T2.theater_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT movie_name FROM movies GROUP BY movie_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT film_name FROM film GROUP BY film_name ORDER BY count(*) DESC LIMIT 1;	movie_2
SELECT rating , count(*) FROM movies GROUP BY rating ;	movie_2
SELECT rating , count(*) FROM movies GROUP BY rating ;	movie_2
SELECT count(*) FROM movies;	movie_2
SELECT count(*) FROM movie ;	movie_2
SELECT name FROM theaters WHERE id IN (SELECT theater_id FROM movies) ;	movie_2
SELECT name FROM theaters WHERE id IN (SELECT theater_id FROM movies) GROUP BY name HAVING count(*) >= 1 ;	movie_2
SELECT name FROM movie_theaters WHERE id NOT IN (SELECT theater_id FROM movies) ;	movie_2
SELECT name FROM Cinemas WHERE id NOT IN (SELECT cinema_id FROM Movies)	movie_2
SELECT name FROM movie_theaters WHERE movie_id IN (SELECT movie_id FROM movies WHERE rating = 'G') ;	movie_2
SELECT name FROM theaters WHERE movie LIKE '%G%' ;	movie_2
SELECT title FROM movies;	movie_2
SELECT movie_name FROM movies;	movie_2
SELECT DISTINCT rating FROM table_name;	movie_2
SELECT DISTINCT rating FROM movies ORDER BY rating;	movie_2
SELECT * FROM Movies WHERE Rating = 'U' ;	movie_2
SELECT * FROM Movies WHERE Rating = 'U' ;	movie_2
SELECT title FROM movies WHERE id NOT IN (SELECT movie_id FROM showtimes) ;	movie_2
SELECT movie_name FROM movies WHERE movie_id NOT IN (SELECT movie_id FROM theaters) ;	movie_2
SELECT name FROM packages ORDER BY weight DESC LIMIT 1;	planet_1
SELECT client FROM packages ORDER BY weight DESC LIMIT 1;	planet_1
SELECT sum(Weight) FROM Packages WHERE Customer_Name = "Leo Wong" ;	planet_1
SELECT sum(Weight) FROM Packages WHERE Sender = "Leo Wong" ;	planet_1
SELECT Position FROM Employees WHERE Name = "Amy Wong" ;	planet_1
SELECT position FROM employees WHERE first_name = "Amy Wong" ;	planet_1
SELECT salary , position FROM employees WHERE name = "Turanga Leela"	planet_1
SELECT salary , position FROM employees WHERE first_name = "Turanga Leela" ;	planet_1
SELECT avg(salary) FROM jobs WHERE job_title = "Intern" ;	planet_1
SELECT avg(salary) FROM employees WHERE job_title = "Intern" ;	planet_1
SELECT DISTINCT level FROM employees WHERE job = "Physician" ;	planet_1
SELECT Clearance FROM Physician ORDER BY Clearance DESC LIMIT 1;	planet_1
SELECT Package_Number FROM Packages WHERE Driver_Name = "Leo Wong" ;	planet_1
SELECT count(*) FROM packages WHERE sender = "Leo Wong" ;	planet_1
SELECT package_number FROM packages WHERE driver_name = "Leo Wong" ;	planet_1
SELECT DISTINCT PackageNumber FROM Orders WHERE EmployeeName = "Leo Wong" ;	planet_1
SELECT * FROM Package WHERE Sender = "Leo Wong" OR Receiver = "Leo Wong" ;	planet_1
SELECT DISTINCT package_number FROM packages WHERE sender_name = "Leo Wong" UNION SELECT DISTINCT package_number FROM packages WHERE receiver_name = "Leo Wong"	planet_1
SELECT count(*) FROM packages WHERE sender = "Ogden Wernstrom" INTERSECT SELECT count(*) FROM packages WHERE receiver = "Leo Wong" ;	planet_1
SELECT count(*) FROM packages WHERE sender = "Ogden Wernstrom" INTERSECT SELECT count(*) FROM packages WHERE receiver = "Leo Wong" ;	planet_1
SELECT * FROM Packages WHERE Sender = "John Zoidfarb" ;	planet_1
SELECT PackageContents FROM Packages WHERE SenderName = "John Zoidfarb"	planet_1
SELECT PackageNumber , Weight FROM Packages WHERE ClientName LIKE '%John%' ORDER BY Weight DESC LIMIT 1;	planet_1
SELECT PackageNumber , Weight FROM Packages WHERE ClientName = "John" ORDER BY Weight DESC LIMIT 1;	planet_1
SELECT package_number , weight FROM packages ORDER BY weight ASC LIMIT 3 ;	planet_1
SELECT PackageNumber , Weight FROM Packages ORDER BY Weight ASC LIMIT 3 ;	planet_1
SELECT client_name , count(*) FROM packages GROUP BY client_name ORDER BY count(*) DESC LIMIT 1 ;	planet_1
SELECT client_name , count(*) FROM packages GROUP BY client_name ORDER BY count(*) DESC LIMIT 1 ;	planet_1
SELECT client_name , count(*) FROM packages GROUP BY client_name ORDER BY count(*) ASC LIMIT 1 ;	planet_1
SELECT count(*) , name FROM packages GROUP BY name ORDER BY count(*) LIMIT 1 ;	planet_1
SELECT client_name FROM packages GROUP BY client_name HAVING count(*) > 1 ;	planet_1
SELECT client_name FROM packages GROUP BY client_name HAVING count(*) > 1 ;	planet_1
SELECT Coordinates FROM Planet WHERE Name = "Mars" ;	planet_1
SELECT latitude , longitude FROM planets WHERE name = "Mars" ;	planet_1
SELECT name , x , y FROM planets ORDER BY name ASC ;	planet_1
SELECT name , longitude , latitude FROM planets ORDER BY name ASC ;	planet_1
SELECT ShipmentID FROM Shipment WHERE ManagerID = "Phillip J. Fry" ;	planet_1
SELECT T1.Shipment_ID FROM Delivery AS T1 JOIN Employee AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Name = "Phillip J Fry" GROUP BY T1.Shipment_ID;	planet_1
SELECT shipment_date FROM shipments;	planet_1
SELECT shipment_date FROM shipments ;	planet_1
SELECT ShipmentID FROM Planets WHERE PlanetName = "Mars" ;	planet_1
SELECT ShipmentID FROM Planets WHERE PlanetName = "Mars" ;	planet_1
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Customer AS T2 ON T1.CustomerID = T2.CustomerID JOIN Planet AS T3 ON T2.PlanetID = T3.PlanetID JOIN Management AS T4 ON T2.CustomerID = T4.CustomerID WHERE T3.PlanetName = "Mars" AND T4.Name = "Turanga Leela" GROUP BY T1.ShipmentID;	planet_1
SELECT id FROM Shipment WHERE planet = "Mars" AND manager = "Turanga Leela" ;	planet_1
SELECT T1.Shipment_ID FROM Shipment AS T1 JOIN Customer AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Planet AS T3 ON T2.Planet_ID = T3.Planet_ID WHERE T3.Name = "Mars" UNION SELECT T1.Shipment_ID FROM Shipment AS T1 JOIN Customer AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Planet AS T3 ON T2.Planet_ID = T3.Planet_ID WHERE T3.Name = "Turanga Leela"	planet_1
SELECT id FROM Shipment WHERE Manager = "Turanga Leela" AND Planet = "Mars" ;	planet_1
SELECT planet , sum(ships) FROM planets GROUP BY planet ;	planet_1
SELECT planet , count(*) FROM shipments GROUP BY planet ;	planet_1
SELECT planet FROM shipments GROUP BY planet ORDER BY count(*) DESC LIMIT 1;	planet_1
SELECT name FROM planet ORDER BY shipments DESC LIMIT 1;	planet_1
SELECT manager , count(*) FROM shipments GROUP BY manager ;	planet_1
SELECT count(*) , manager FROM shipments GROUP BY manager ;	planet_1
SELECT sum(weight) FROM package WHERE destination = "Mars" ;	planet_1
SELECT sum(Weight) FROM Packages WHERE Destination = "Mars" ;	planet_1
SELECT planet , sum ( weight ) FROM package GROUP BY planet ;	planet_1
SELECT planet , sum(package_weight) FROM planets GROUP BY planet ;	planet_1
SELECT planet FROM planets WHERE total_weight_of_shipment > 30 ;	planet_1
SELECT name FROM planets WHERE total_shipment_weight > 30 ;	planet_1
SELECT package_number FROM ships WHERE destination = "Omicron Persei 8" INTERSECT SELECT package_number FROM ships WHERE pilot = "Zapp Brannigan" ;	planet_1
SELECT count(*) FROM Packages WHERE Sender = "Zapp Brannigan" AND ShipDate = "Omicron Persei 8" ;	planet_1
SELECT PackageNumber FROM Packages WHERE PlanetName = "Omicron Persei 8" INTERSECT SELECT PackageNumber FROM Packages WHERE SenderName = "Zapp Brannigan"	planet_1
SELECT count(*) FROM planet WHERE name = "Omicron Persei 8" UNION SELECT count(*) FROM shipper WHERE name = "Zapp Brannigan" ;	planet_1
SELECT package_number , weight FROM packages WHERE weight BETWEEN 10 AND 30 ;	planet_1
SELECT package_number , package_weight FROM packages WHERE package_weight BETWEEN 10 AND 30 ;	planet_1
SELECT name FROM employee WHERE clearance != "Mars" ;	planet_1
SELECT name FROM employee WHERE clearance != 'Mars' ;	planet_1
SELECT name FROM employee WHERE clearance = 'Omega III' ;	planet_1
SELECT name FROM employee WHERE clearance = "Omega III"	planet_1
SELECT T1.planet_name FROM planet AS T1 JOIN employee AS T2 ON T1.planet_id = T2.planet_id GROUP BY T1.planet_name HAVING count(*) = 1 ;	planet_1
SELECT T1.name FROM planet AS T1 JOIN employee AS T2 ON T1.id = T2.planet_id WHERE T2.clearance = 1 GROUP BY T1.name HAVING count(*) = 1 ;	planet_1
SELECT name FROM employees WHERE salary BETWEEN 5000 AND 10000;	planet_1
SELECT name FROM employees WHERE salary BETWEEN 5000 AND 10000;	planet_1
SELECT name FROM employees WHERE salary > (SELECT avg(salary) FROM employees) OR salary > 5000;	planet_1
SELECT name FROM employees WHERE salary > (SELECT avg(salary) FROM employees) OR salary > 5000;	planet_1
SELECT count(*) FROM employee WHERE clearance != "Mars" ;	planet_1
SELECT count(*) FROM employee WHERE clearance != "Mars" ;	planet_1
SELECT count(*) FROM games ;	video_game
SELECT count(*) FROM games ;	video_game
SELECT Title , Developers FROM Games ORDER BY Units_Sold DESC ;	video_game
SELECT title , developer FROM games ORDER BY units_sold DESC ;	video_game
SELECT AVG(T1.units) FROM games AS T1 JOIN developers AS T2 ON T1.developer_id = T2.developer_id WHERE T2.developer_name != 'Nintendo' GROUP BY T1.units;	video_game
SELECT avg(T1.units) FROM games AS T1 JOIN developers AS T2 ON T1.developer_id = T2.developer_id WHERE T2.developer_name != 'Nintendo' GROUP BY T1.units;	video_game
SELECT platform_name , market_district FROM platforms ;	video_game
SELECT platform_name , market_district FROM platforms ;	video_game
SELECT name , id FROM platform WHERE download_rank = 1 ;	video_game
SELECT name , id FROM platform WHERE download_rank = 1 ;	video_game
SELECT max(rank) , min(rank) FROM players WHERE year = ( SELECT year FROM players GROUP BY year ORDER BY count(*) DESC LIMIT 1 ) ;	video_game
SELECT max(rank) , min(rank) FROM players ;	video_game
SELECT count(*) FROM players WHERE rank_of_the_year < 3 ;	video_game
SELECT count(*) FROM player WHERE rank_year <= 3 ;	video_game
SELECT player_name FROM players ORDER BY player_name ASC;	video_game
SELECT name FROM players ORDER BY name ASC;	video_game
SELECT name , college FROM player ORDER BY rank DESC ;	video_game
SELECT Name , College FROM Players ORDER BY Rank DESC ;	video_game
SELECT name , rank FROM player WHERE game_title = "Super Mario World" ;	video_game
SELECT Name , Rank FROM Players WHERE GameTitle = "Super Mario World" ;	video_game
SELECT DISTINCT Developer FROM Games WHERE College = "Auburn" GROUP BY Developer;	video_game
SELECT DISTINCT T1.Developer FROM Developers AS T1 JOIN Games AS T2 ON T1.DeveloperID = T2.DeveloperID JOIN Players AS T3 ON T2.GameID = T3.GameID JOIN Colleges AS T4 ON T3.CollegeID = T4.CollegeID WHERE T4.CollegeName = "Auburn College"	video_game
SELECT avg(T1.units) FROM player AS T1 JOIN game AS T2 ON T1.gameid = T2.gameid WHERE T1.position = "Guard" GROUP BY T1.units;	video_game
SELECT avg(T2.units) FROM player AS T1 JOIN game AS T2 ON T1.player_id = T2.player_id WHERE T1.position = "Guard" GROUP BY T1.player_id;	video_game
SELECT Title , Platform_Name FROM Games ;	video_game
SELECT Title , Platform FROM Games ;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Platforms AS T2 ON T1.PlatformID = T2.PlatformID WHERE T2.MarketDistrict = "Asia" OR T2.MarketDistrict = "USA" GROUP BY T1.Title;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Platforms AS T2 ON T1.PlatformID = T2.PlatformID WHERE T2.MarketDistrict = "Asia" OR T2.MarketDistrict = "USA" GROUP BY T1.Title;	video_game
SELECT franchise , count(*) FROM games GROUP BY franchise ;	video_game
SELECT franchise , count(*) FROM games GROUP BY franchise ;	video_game
SELECT franchise FROM games GROUP BY franchise ORDER BY count(*) DESC LIMIT 1;	video_game
SELECT franchise FROM games GROUP BY franchise ORDER BY count(*) DESC LIMIT 1;	video_game
SELECT franchise FROM games GROUP BY franchise HAVING count(*) >= 2 ;	video_game
SELECT franchise FROM games GROUP BY franchise HAVING count(*) >= 2 ;	video_game
SELECT name FROM player WHERE id NOT IN (SELECT player_id FROM game) ;	video_game
SELECT name FROM player WHERE id NOT IN (SELECT player_id FROM game) ;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.College = "Oklahoma" INTERSECT SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.PlayerID = T2.PlayerID WHERE T2.College = "Auburn"	video_game
SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.GameID = T2.GameID JOIN Colleges AS T3 ON T2.CollegeID = T3.CollegeID WHERE T3.CollegeName = "Oklahoma" OR T3.CollegeName = "Auburn" GROUP BY T1.Title;	video_game
SELECT DISTINCT franchise FROM games ;	video_game
SELECT DISTINCT franchise FROM franchises;	video_game
SELECT title FROM games WHERE player_id NOT IN (SELECT player_id FROM players WHERE position = 'Guard') ;	video_game
SELECT T1.Title FROM Games AS T1 JOIN Players AS T2 ON T1.GameID = T2.GameID WHERE T2.Position != "Guard" GROUP BY T1.Title HAVING COUNT(*) = (SELECT COUNT(*) FROM Players AS T3 WHERE T3.Position = "Guard")	video_game
SELECT name FROM press ORDER BY profit DESC;	book_press
SELECT name FROM press ORDER BY profit DESC;	book_press
SELECT Publisher FROM publisher_profit GROUP BY Publisher HAVING SUM(profit) > 15000000000 OR SUM(profit) / 12 > 1000000000;	book_press
SELECT T1.press_name FROM Press AS T1 JOIN Profit AS T2 ON T1.press_id = T2.press_id GROUP BY T1.press_name HAVING SUM(T2.profit) > 15 OR SUM(T2.profit) > 100000000;	book_press
SELECT avg(profit) , max(profit) FROM press_profit GROUP BY YEAR;	book_press
SELECT year , avg(profit) , max(profit) FROM press GROUP BY year ;	book_press
SELECT name FROM publisher ORDER BY monthly_profit DESC LIMIT 1;	book_press
SELECT press_name FROM press_profit GROUP BY press_name ORDER BY sum(profit) DESC LIMIT 1;	book_press
SELECT name FROM publisher ORDER BY monthly_profit DESC LIMIT 1 UNION SELECT name FROM publisher ORDER BY monthly_profit ASC LIMIT 1 ;	book_press
SELECT name FROM press ORDER BY monthly_profit DESC LIMIT 1 UNION SELECT name FROM press ORDER BY monthly_profit ASC LIMIT 1	book_press
SELECT count(*) FROM authors WHERE age < 30 ;	book_press
SELECT count(*) FROM authors WHERE age < 30 ;	book_press
SELECT gender , avg( age ) FROM authors GROUP BY gender ;	book_press
SELECT gender , avg(age) FROM authors GROUP BY gender ;	book_press
SELECT gender , count(*) FROM authors WHERE age > 30 GROUP BY gender ;	book_press
SELECT gender , count(*) FROM authors WHERE age > 30 GROUP BY gender ;	book_press
SELECT title FROM books ORDER BY release_date DESC;	book_press
SELECT title FROM books ORDER BY release_date DESC;	book_press
SELECT series , count(*) FROM books GROUP BY series ;	book_press
SELECT book_series , count(*) FROM books GROUP BY book_series ;	book_press
SELECT title , publish_date FROM books ORDER BY sales DESC LIMIT 5 ;	book_press
SELECT title , release_date FROM books ORDER BY sale_amount DESC LIMIT 5 ;	book_press
SELECT book_series FROM books GROUP BY book_series HAVING count(*) > 1000 INTERSECT SELECT book_series FROM books GROUP BY book_series HAVING count(*) < 500 ;	book_press
SELECT book_series FROM books WHERE sale_amount > 1000 INTERSECT SELECT book_series FROM books WHERE sale_amount < 500 ;	book_press
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.Series = "MM" INTERSECT SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.Series = "LT"	book_press
SELECT DISTINCT T1.author_name FROM authors AS T1 JOIN books AS T2 ON T1.author_id = T2.author_id WHERE T2.series_name = "MM" INTERSECT SELECT DISTINCT T1.author_name FROM authors AS T1 JOIN books AS T2 ON T1.author_id = T2.author_id WHERE T2.series_name = "LT"	book_press
SELECT T1.name , T1.age FROM authors AS T1 JOIN books AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING count(*) = 0 ;	book_press
SELECT author FROM authors WHERE author NOT IN (SELECT author FROM books) ;	book_press
SELECT name FROM authors GROUP BY name HAVING count(*) > 1 ;	book_press
SELECT author FROM books GROUP BY author HAVING count(*) > 1 ORDER BY count(*) DESC;	book_press
SELECT title , author_name , publisher_name FROM books ORDER BY sales DESC LIMIT 3;	book_press
SELECT T1.title , T2.author , T3.press FROM books AS T1 JOIN authors AS T2 ON T1.author_id = T2.author_id JOIN publishers AS T3 ON T1.press_id = T3.press_id ORDER BY T1.quantity DESC LIMIT 3;	book_press
SELECT press , sum(amount) FROM books GROUP BY press ;	book_press
SELECT press , sum(amount) FROM books GROUP BY press ;	book_press
SELECT publisher , count(*) FROM books GROUP BY publisher HAVING count(*) > 1000 ;	book_press
SELECT press_name , count(*) FROM books GROUP BY press_name HAVING sum(sale_amount) > 1000 ;	book_press
SELECT name FROM authors WHERE book_id IN (SELECT book_id FROM books ORDER BY sales DESC LIMIT 1)	book_press
SELECT name FROM authors WHERE id IN (SELECT author_id FROM books ORDER BY sales DESC LIMIT 1) ;	book_press
SELECT T1.Name , T1.Gender FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID GROUP BY T2.AuthorID ORDER BY count(*) DESC LIMIT 1;	book_press
SELECT T1.author_name , T1.gender FROM authors AS T1 JOIN books AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1;	book_press
SELECT T1.Name FROM Authors AS T1 JOIN Books AS T2 ON T1.AuthorID = T2.AuthorID WHERE T2.PressName != "Accor" GROUP BY T1.Name;	book_press
SELECT DISTINCT T1.author FROM authors AS T1 JOIN publications AS T2 ON T1.author_id = T2.author_id WHERE T2.press_name != "Accor" ORDER BY T1.author;	book_press
SELECT T1.name , T2.profit FROM Press AS T1 JOIN Book AS T2 ON T1.id = T2.press_id GROUP BY T1.name HAVING count(*) > 2 ORDER BY T2.profit DESC LIMIT 10;	book_press
SELECT press_name , yearly_profit FROM books GROUP BY press_name HAVING count(*) > 2 ORDER BY yearly_profit DESC ;	book_press
SELECT count(*) FROM authors ;	cre_Doc_Workflow
SELECT name FROM authors;	cre_Doc_Workflow
SELECT name , other_details FROM authors ;	cre_Doc_Workflow
SELECT * FROM authors WHERE first_name = "Addison" AND last_name = "Denesik";	cre_Doc_Workflow
SELECT count(*) FROM documents ;	cre_Doc_Workflow
SELECT author FROM documents WHERE id = 4;	cre_Doc_Workflow
SELECT author FROM documents WHERE title = "Travel to Brazil" ;	cre_Doc_Workflow
SELECT count(*) FROM documents WHERE author = "Era Kerluke" ;	cre_Doc_Workflow
SELECT name , description FROM document ;	cre_Doc_Workflow
SELECT id , name FROM document WHERE author = "Bianka Cummings" ;	cre_Doc_Workflow
SELECT T1.author_name , T1.author_details FROM document AS T1 JOIN author AS T2 ON T1.author_id = T2.author_id WHERE T1.title = "Travel to China" ;	cre_Doc_Workflow
SELECT name , count(*) FROM authors GROUP BY name ;	cre_Doc_Workflow
SELECT name FROM authors ORDER BY count(*) DESC LIMIT 1;	cre_Doc_Workflow
SELECT name FROM authors GROUP BY name HAVING count(*) >= 2 ;	cre_Doc_Workflow
SELECT count(*) FROM business_process;	cre_Doc_Workflow
SELECT next_process_id , process_name , process_description FROM process WHERE process_id = 9;	cre_Doc_Workflow
SELECT process_name FROM process WHERE process_id = 9 ORDER BY process_id DESC LIMIT 1;	cre_Doc_Workflow
SELECT count(*) FROM process_outcomes;	cre_Doc_Workflow
SELECT code , description FROM process_outcomes ;	cre_Doc_Workflow
SELECT description FROM process_outcome WHERE code = "working" ;	cre_Doc_Workflow
SELECT count(*) FROM process_status;	cre_Doc_Workflow
SELECT code , description FROM process_status ;	cre_Doc_Workflow
SELECT description FROM process_status WHERE code = 'ct' ;	cre_Doc_Workflow
SELECT count(*) FROM staff ;	cre_Doc_Workflow
SELECT id , details FROM staff ;	cre_Doc_Workflow
SELECT * FROM staff WHERE staff_id = 100;	cre_Doc_Workflow
SELECT count(*) FROM staff_roles;	cre_Doc_Workflow
SELECT Code , Description FROM Staff_Role ;	cre_Doc_Workflow
SELECT Description FROM StaffRole WHERE StaffRoleCode = "HR" ;	cre_Doc_Workflow
SELECT count(*) FROM documents ;	cre_Doc_Workflow
SELECT DISTINCT process_id FROM documents;	cre_Doc_Workflow
SELECT DISTINCT document_id FROM documents WHERE process_id IS NULL ;	cre_Doc_Workflow
SELECT process_id FROM documents GROUP BY process_id HAVING count(*) = 0	cre_Doc_Workflow
SELECT process_outcome_description , process_status_description FROM document WHERE document_id = 0 ;	cre_Doc_Workflow
SELECT process_name FROM documents WHERE document_name = "Travel to Brazil" ;	cre_Doc_Workflow
SELECT process_id , count(*) FROM documents GROUP BY process_id ;	cre_Doc_Workflow
SELECT count(*) FROM staff WHERE document_id = 0 AND process_id = 9 ;	cre_Doc_Workflow
SELECT staff_id , count(*) FROM document_process GROUP BY staff_id ;	cre_Doc_Workflow
SELECT staff_role_code , count(*) FROM document_process GROUP BY staff_role_code ;	cre_Doc_Workflow
SELECT count(DISTINCT role_id) FROM staff WHERE staff_id = 3 ;	cre_Doc_Workflow
SELECT count(*) FROM agencies ;	advertising_agencies
SELECT count(*) FROM agencies ;	advertising_agencies
SELECT agency_id , agency_name , address , city , state , zip FROM agencies ;	advertising_agencies
SELECT agency_id , agency_details FROM agencies ;	advertising_agencies
SELECT count(*) FROM clients;	advertising_agencies
SELECT count(*) FROM clients ;	advertising_agencies
SELECT client_id , client_details FROM clients ;	advertising_agencies
SELECT client_id , client_details FROM clients ;	advertising_agencies
SELECT agency_id , count(*) FROM clients GROUP BY agency_id ;	advertising_agencies
SELECT agency , count(*) FROM clients GROUP BY agency ;	advertising_agencies
SELECT agency_id , count(*) FROM clients GROUP BY agency_id ORDER BY count(*) DESC LIMIT 1	advertising_agencies
SELECT agency_id , agency_details FROM agencies ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT agency_id , agency_details FROM agencies WHERE agency_id IN ( SELECT agency_id FROM clients GROUP BY agency_id HAVING count(*) >= 2 ) ;	advertising_agencies
SELECT agency_id , agency_details FROM agencies GROUP BY agency_id HAVING count(*) >= 2 ;	advertising_agencies
SELECT * FROM agency WHERE client_detail = 'Mac' ;	advertising_agencies
SELECT agency FROM clients WHERE detail = 'Mac' ;	advertising_agencies
SELECT * FROM Clients INNER JOIN Agents ON Clients.AgentID = Agents.AgentID;	advertising_agencies
SELECT T1.ClientID , T1.ClientName , T1.ClientAddress , T1.ClientCity , T1.ClientState , T1.ClientZip , T1.ClientCountry , T1.ClientPhone , T1.ClientFax , T1.ClientEmail , T2.ClientAgencyID , T2.ClientAgencyName , T2.ClientAgencyAddress , T2.ClientAgencyCity , T2.ClientAgencyState , T2.ClientAgencyZip , T2.ClientAgencyCountry , T2.ClientAgencyPhone , T2.ClientAgencyFax , T2.ClientAgencyEmail FROM Client AS T1 JOIN ClientAgency AS T2 ON T1.ClientID = T2.ClientID;	advertising_agencies
SELECT sic , count(*) FROM clients GROUP BY sic ;	advertising_agencies
SELECT sic , count(*) FROM clients GROUP BY sic ;	advertising_agencies
SELECT * FROM client WHERE sic_code = "Bad" ;	advertising_agencies
SELECT * FROM client WHERE sic_code = 'Bad' ;	advertising_agencies
SELECT agency_id , agency_details FROM agencies WHERE client_id IS NOT NULL ;	advertising_agencies
SELECT agency_id , agency_details FROM agencies WHERE agency_id IN ( SELECT agency_id FROM clients GROUP BY agency_id ) ;	advertising_agencies
SELECT DISTINCT agency_id FROM clients WHERE client_id IS NULL ;	advertising_agencies
SELECT agency_id FROM agencies WHERE agency_id NOT IN (SELECT agency_id FROM clients)	advertising_agencies
SELECT count(*) FROM invoices ;	advertising_agencies
SELECT count(*) FROM invoices ;	advertising_agencies
SELECT id , status_code , details FROM invoices WHERE client_id IN ( SELECT id FROM clients ) ;	advertising_agencies
SELECT id , status , details FROM invoices ;	advertising_agencies
SELECT client_id , count(*) FROM invoices GROUP BY client_id ;	advertising_agencies
SELECT client_id , count(*) FROM invoices GROUP BY client_id ;	advertising_agencies
SELECT client_id , detail FROM invoices GROUP BY client_id , detail ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT client_id , client_details FROM clients ORDER BY invoice_count DESC LIMIT 1;	advertising_agencies
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2 ;	advertising_agencies
SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) >= 2 ;	advertising_agencies
SELECT status , count(*) FROM invoices GROUP BY status ;	advertising_agencies
SELECT status_code , count(*) FROM invoices GROUP BY status_code ;	advertising_agencies
SELECT invoice_status_code FROM invoices GROUP BY invoice_status_code ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT invoice_status_code , invoice_status_details , client_id , client_details , agency_id , agency_details FROM invoices ;	advertising_agencies
SELECT invoice_status , invoice_details , client_id , client_details , agency_id , agency_details FROM invoices ;	advertising_agencies
SELECT meeting_type_code , meeting_type_details FROM meeting_types ;	advertising_agencies
SELECT * FROM meeting_types ;	advertising_agencies
SELECT outcome , purpose FROM meeting_outcomes ;	advertising_agencies
SELECT DISTINCT outcome , purpose FROM meeting ;	advertising_agencies
SELECT payment_id , payment_details FROM invoices WHERE status = 'Working' ;	advertising_agencies
SELECT payment_id , payment_details FROM invoices WHERE status = 'Working' ;	advertising_agencies
SELECT invoice_id , status FROM invoices WHERE payment_id IS NULL ;	advertising_agencies
SELECT invoice_id , status FROM invoices WHERE payment_id IS NULL ;	advertising_agencies
SELECT count(*) FROM payments ;	advertising_agencies
SELECT count(*) FROM payments ;	advertising_agencies
SELECT payment_id , invoice_id , invoice_details FROM payment_details ;	advertising_agencies
SELECT payment_id , invoice_id , payment_details FROM payments ;	advertising_agencies
SELECT DISTINCT invoice_id , status FROM payments ;	advertising_agencies
SELECT DISTINCT invoice_id , status FROM payments ;	advertising_agencies
SELECT invoice_id , count(*) FROM payment GROUP BY invoice_id ;	advertising_agencies
SELECT invoice_id , count(*) FROM payments GROUP BY invoice_id ;	advertising_agencies
SELECT InvoiceID , Status , Details FROM Invoices ORDER BY COUNT(*) DESC LIMIT 1;	advertising_agencies
SELECT invoice_id , status , details FROM invoices ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT count(*) FROM staff ;	advertising_agencies
SELECT count(*) FROM staff ;	advertising_agencies
SELECT agency_id , count(*) FROM agent GROUP BY agency_id ;	advertising_agencies
SELECT agency_id , count(*) FROM staff GROUP BY agency_id ;	advertising_agencies
SELECT agent_id , details FROM agency ORDER BY count(*) DESC LIMIT 1;	advertising_agencies
SELECT id , detail FROM agency ORDER BY staff DESC LIMIT 1;	advertising_agencies
SELECT outcome_code , count(*) FROM meeting GROUP BY outcome_code ;	advertising_agencies
SELECT outcome , count(*) FROM meetings GROUP BY outcome ;	advertising_agencies
SELECT client_id , count(*) FROM meeting GROUP BY client_id ;	advertising_agencies
SELECT client_id , count(*) FROM meetings GROUP BY client_id ;	advertising_agencies
SELECT meeting_type_code , count(*) FROM meeting GROUP BY meeting_type_code ;	advertising_agencies
SELECT meeting_type , count(*) FROM meetings GROUP BY meeting_type ;	advertising_agencies
SELECT meeting_id , meeting_outcome , meeting_type , client_details FROM meeting_details ;	advertising_agencies
SELECT MeetingId , MeetingOutcome , MeetingType , ClientId , ClientName FROM Meeting ;	advertising_agencies
SELECT meeting_id , count(*) FROM meeting GROUP BY meeting_id ;	advertising_agencies
SELECT count(*) , meeting_id FROM staff GROUP BY meeting_id ;	advertising_agencies
SELECT staff_id , count(*) FROM attendance GROUP BY staff_id ORDER BY count(*) LIMIT 1 ;	advertising_agencies
SELECT staff_id FROM attendance GROUP BY staff_id ORDER BY count(*) LIMIT 1;	advertising_agencies
SELECT count(*) FROM staff WHERE staff_id IN (SELECT staff_id FROM meeting) ;	advertising_agencies
SELECT count(DISTINCT staff_id) FROM staff_meetings;	advertising_agencies
SELECT count(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM meeting) ;	advertising_agencies
SELECT count(*) FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM meeting) ;	advertising_agencies
SELECT client_id , client_details FROM clients WHERE client_id IN ( SELECT client_id FROM meetings ) INTERSECT SELECT client_id , client_details FROM clients WHERE client_id IN ( SELECT client_id FROM invoices ) ;	advertising_agencies
SELECT client_id , client_details FROM clients WHERE client_id IN ( SELECT client_id FROM meetings ) INTERSECT SELECT client_id , client_details FROM clients WHERE client_id IN ( SELECT client_id FROM invoices ) ;	advertising_agencies
SELECT StaffID , StaffDetail FROM Staff WHERE StaffID IN ( SELECT StaffID FROM Meeting WHERE StaffID IN ( SELECT StaffID FROM Staff WHERE StaffDetail LIKE 's%' ) GROUP BY StaffID HAVING COUNT(*) >= 1 ) ;	advertising_agencies
SELECT staff_id , staff_details FROM staff WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM staff_meetings WHERE staff_id IN ( SELECT staff_id FROM	advertising_agencies
SELECT T1.id , T1.sic_code , T1.agency_id FROM Client AS T1 JOIN Meeting AS T2 ON T1.id = T2.client_id WHERE T2.meeting_count = 1 INTERSECT SELECT T1.id , T1.sic_code , T1.agency_id FROM Client AS T1 JOIN Invoice AS T2 ON T1.id = T2.client_id GROUP BY T1.id HAVING count(*) > 0 ;	advertising_agencies
SELECT client_id , sic_code , agency_id FROM clients WHERE client_id IN ( SELECT client_id FROM meetings GROUP BY client_id HAVING count(*) = 1 ) AND client_id IN ( SELECT client_id FROM invoices GROUP BY client_id HAVING count(*) = 1 ) ;	advertising_agencies
SELECT meeting_start_time , meeting_end_time , client_detail , staff_detail FROM meetings ;	advertising_agencies
SELECT Meeting_Start_Time , Meeting_End_Time , Client_Name , Staff_Name FROM Meeting_Attendees INNER JOIN Clients ON Meeting_Attendees.Client_ID = Clients.Client_ID INNER JOIN Staff ON Meeting_Attendees.Staff_ID = Staff.Staff_ID ORDER BY Meeting_Start_Time ;	advertising_agencies
